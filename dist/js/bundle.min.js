(()=>{var n={"./node_modules/moment/locale sync recursive \\b\\B":e=>{function t(e){e=new Error("Cannot find module '"+e+"'");throw e.code="MODULE_NOT_FOUND",e}t.keys=()=>[],(t.resolve=t).id="./node_modules/moment/locale sync recursive \\b\\B",e.exports=t},"./node_modules/moment/moment.js":function(la,e,fa){(la=fa.nmd(la)).exports=function(){"use strict";var U,H;function d(){return U.apply(null,arguments)}function F(e){U=e}function a(e){return e instanceof Array||Object.prototype.toString.call(e)==="[object Array]"}function E(e){return e!=null&&Object.prototype.toString.call(e)==="[object Object]"}function u(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function V(e){if(Object.getOwnPropertyNames)return Object.getOwnPropertyNames(e).length===0;else{var t;for(t in e)if(u(e,t))return false;return true}}function o(e){return e===void 0}function l(e){return typeof e==="number"||Object.prototype.toString.call(e)==="[object Number]"}function G(e){return e instanceof Date||Object.prototype.toString.call(e)==="[object Date]"}function A(e,t){var n=[],i,r=e.length;for(i=0;i<r;++i)n.push(t(e[i],i));return n}function j(e,t){for(var n in t)if(u(t,n))e[n]=t[n];if(u(t,"toString"))e.toString=t.toString;if(u(t,"valueOf"))e.valueOf=t.valueOf;return e}function f(e,t,n,i){return Xn(e,t,n,i,true).utc()}function I(){return{empty:false,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:false,invalidEra:null,invalidMonth:null,invalidFormat:false,userInvalidated:false,iso:false,parsedDateParts:[],era:null,meridiem:null,rfc2822:false,weekdayMismatch:false}}function h(e){if(e._pf==null)e._pf=I();return e._pf}if(Array.prototype.some)H=Array.prototype.some;else H=function(e){var t=Object(this),n=t.length>>>0,i;for(i=0;i<n;i++)if(i in t&&e.call(this,t[i],i,t))return true;return false};function Z(e){if(e._isValid==null){var t=h(e),n=H.call(t.parsedDateParts,function(e){return e!=null}),i=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict)i=i&&t.charsLeftOver===0&&t.unusedTokens.length===0&&t.bigHour===undefined;if(Object.isFrozen==null||!Object.isFrozen(e))e._isValid=i;else return i}return e._isValid}function z(e){var t=f(NaN);if(e!=null)j(h(t),e);else h(t).userInvalidated=true;return t}var q=d.momentProperties=[],$=false;function B(e,t){var n,i,r,s=q.length;if(!o(t._isAMomentObject))e._isAMomentObject=t._isAMomentObject;if(!o(t._i))e._i=t._i;if(!o(t._f))e._f=t._f;if(!o(t._l))e._l=t._l;if(!o(t._strict))e._strict=t._strict;if(!o(t._tzm))e._tzm=t._tzm;if(!o(t._isUTC))e._isUTC=t._isUTC;if(!o(t._offset))e._offset=t._offset;if(!o(t._pf))e._pf=h(t);if(!o(t._locale))e._locale=t._locale;if(s>0)for(n=0;n<s;n++){i=q[n];r=t[i];if(!o(r))e[i]=r}return e}function J(e){B(this,e);this._d=new Date(e._d!=null?e._d.getTime():NaN);if(!this.isValid())this._d=new Date(NaN);if($===false){$=true;d.updateOffset(this);$=false}}function c(e){return e instanceof J||e!=null&&e._isAMomentObject!=null}function Q(e){if(d.suppressDeprecationWarnings===false&&typeof console!=="undefined"&&console.warn)console.warn("Deprecation warning: "+e)}function e(s,a){var o=true;return j(function(){if(d.deprecationHandler!=null)d.deprecationHandler(null,s);if(o){var e=[],t,n,i,r=arguments.length;for(n=0;n<r;n++){t="";if(typeof arguments[n]==="object"){t+="\n["+n+"] ";for(i in arguments[0])if(u(arguments[0],i))t+=i+": "+arguments[0][i]+", ";t=t.slice(0,-2)}else t=arguments[n];e.push(t)}Q(s+"\nArguments: "+Array.prototype.slice.call(e).join("")+"\n"+(new Error).stack);o=false}return a.apply(this,arguments)},a)}var X={},K;function ee(e,t){if(d.deprecationHandler!=null)d.deprecationHandler(e,t);if(!X[e]){Q(t);X[e]=true}}function m(e){return typeof Function!=="undefined"&&e instanceof Function||Object.prototype.toString.call(e)==="[object Function]"}function te(e){var t,n;for(n in e)if(u(e,n)){t=e[n];if(m(t))this[n]=t;else this["_"+n]=t}this._config=e;this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)}function ne(e,t){var n=j({},e),i;for(i in t)if(u(t,i))if(E(e[i])&&E(t[i])){n[i]={};j(n[i],e[i]);j(n[i],t[i])}else if(t[i]!=null)n[i]=t[i];else delete n[i];for(i in e)if(u(e,i)&&!u(t,i)&&E(e[i]))n[i]=j({},n[i]);return n}function ie(e){if(e!=null)this.set(e)}if(d.suppressDeprecationWarnings=false,d.deprecationHandler=null,Object.keys)K=Object.keys;else K=function(e){var t,n=[];for(t in e)if(u(e,t))n.push(t);return n};var re={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"};function se(e,t,n){var i=this._calendar[e]||this._calendar["sameElse"];return m(i)?i.call(t,n):i}function s(e,t,n){var i=""+Math.abs(e),r=t-i.length,s=e>=0;return(s?n?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+i}var ae=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,oe=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,ue={},le={};function i(e,t,n,i){var r=i;if(typeof i==="string")r=function(){return this[i]()};if(e)le[e]=r;if(t)le[t[0]]=function(){return s(r.apply(this,arguments),t[1],t[2])};if(n)le[n]=function(){return this.localeData().ordinal(r.apply(this,arguments),e)}}function fe(e){if(e.match(/\[[\s\S]/))return e.replace(/^\[|\]$/g,"");return e.replace(/\\/g,"")}function de(i){var r=i.match(ae),e,s;for(e=0,s=r.length;e<s;e++)if(le[r[e]])r[e]=le[r[e]];else r[e]=fe(r[e]);return function(e){var t="",n;for(n=0;n<s;n++)t+=m(r[n])?r[n].call(e,i):r[n];return t}}function he(e,t){if(!e.isValid())return e.localeData().invalidDate();t=ce(t,e.localeData());ue[t]=ue[t]||de(t);return ue[t](e)}function ce(e,t){var n=5;function i(e){return t.longDateFormat(e)||e}oe.lastIndex=0;while(n>=0&&oe.test(e)){e=e.replace(oe,i);oe.lastIndex=0;n-=1}return e}var me={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"};function _e(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];if(t||!n)return t;this._longDateFormat[e]=n.match(ae).map(function(e){if(e==="MMMM"||e==="MM"||e==="DD"||e==="dddd")return e.slice(1);return e}).join("");return this._longDateFormat[e]}var ye="Invalid date";function ge(){return this._invalidDate}var pe="%d",we=/\d{1,2}/;function ve(e){return this._ordinal.replace("%d",e)}var Me={future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"};function ke(e,t,n,i){var r=this._relativeTime[n];return m(r)?r(e,t,n,i):r.replace(/%d/i,e)}function Se(e,t){var n=this._relativeTime[e>0?"future":"past"];return m(n)?n(t):n.replace(/%s/i,t)}var De={};function t(e,t){var n=e.toLowerCase();De[n]=De[n+"s"]=De[t]=e}function _(e){return typeof e==="string"?De[e]||De[e.toLowerCase()]:undefined}function Ye(e){var t={},n,i;for(i in e)if(u(e,i)){n=_(i);if(n)t[n]=e[i]}return t}var be={};function n(e,t){be[e]=t}function Oe(e){var t=[],n;for(n in e)if(u(e,n))t.push({unit:n,priority:be[n]});t.sort(function(e,t){return e.priority-t.priority});return t}function xe(e){return e%4===0&&e%100!==0||e%400===0}function y(e){if(e<0)return Math.ceil(e)||0;else return Math.floor(e)}function g(e){var t=+e,n=0;if(t!==0&&isFinite(t))n=y(t);return n}function Te(t,n){return function(e){if(e!=null){Pe(this,t,e);d.updateOffset(this,n);return this}else return Ne(this,t)}}function Ne(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function Pe(e,t,n){if(e.isValid()&&!isNaN(n))if(t==="FullYear"&&xe(e.year())&&e.month()===1&&e.date()===29){n=g(n);e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),st(n,e.month()))}else e._d["set"+(e._isUTC?"UTC":"")+t](n)}function Re(e){e=_(e);if(m(this[e]))return this[e]();return this}function We(e,t){if(typeof e==="object"){e=Ye(e);var n=Oe(e),i,r=n.length;for(i=0;i<r;i++)this[n[i].unit](e[n[i].unit])}else{e=_(e);if(m(this[e]))return this[e](t)}return this}var Ce=/\d/,r=/\d\d/,Le=/\d{3}/,Ue=/\d{4}/,He=/[+-]?\d{6}/,p=/\d\d?/,Fe=/\d\d\d\d?/,Ee=/\d\d\d\d\d\d?/,Ve=/\d{1,3}/,Ge=/\d{1,4}/,Ae=/[+-]?\d{1,6}/,je=/\d+/,Ie=/[+-]?\d+/,Ze=/Z|[+-]\d\d:?\d\d/gi,ze=/Z|[+-]\d\d(?::?\d\d)?/gi,qe=/[+-]?\d+(\.\d{1,3})?/,$e=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,Be;function w(e,n,i){Be[e]=m(n)?n:function(e,t){return e&&i?i:n}}function Je(e,t){if(!u(Be,e))return new RegExp(Qe(e));return Be[e](t._strict,t._locale)}function Qe(e){return v(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,i,r){return t||n||i||r}))}function v(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var Be={},Xe={};function M(e,n){var t,i=n,r;if(typeof e==="string")e=[e];if(l(n))i=function(e,t){t[n]=g(e)};r=e.length;for(t=0;t<r;t++)Xe[e[t]]=i}function Ke(e,r){M(e,function(e,t,n,i){n._w=n._w||{};r(e,n._w,n,i)})}function et(e,t,n){if(t!=null&&u(Xe,e))Xe[e](t,n._a,n,e)}var k=0,S=1,D=2,Y=3,b=4,O=5,tt=6,nt=7,it=8,x;function rt(e,t){return(e%t+t)%t}if(Array.prototype.indexOf)x=Array.prototype.indexOf;else x=function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1};function st(e,t){if(isNaN(e)||isNaN(t))return NaN;var n=rt(t,12);e+=(t-n)/12;return n===1?xe(e)?29:28:31-n%7%2}i("M",["MM",2],"Mo",function(){return this.month()+1}),i("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),i("MMMM",0,0,function(e){return this.localeData().months(this,e)}),t("month","M"),n("month",8),w("M",p),w("MM",p,r),w("MMM",function(e,t){return t.monthsShortRegex(e)}),w("MMMM",function(e,t){return t.monthsRegex(e)}),M(["M","MM"],function(e,t){t[S]=g(e)-1}),M(["MMM","MMMM"],function(e,t,n,i){var r=n._locale.monthsParse(e,i,n._strict);if(r!=null)t[S]=r;else h(n).invalidMonth=e});var at="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ot="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),ut=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,lt=$e,ft=$e;function dt(e,t){if(!e)return a(this._months)?this._months:this._months["standalone"];return a(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||ut).test(t)?"format":"standalone"][e.month()]}function ht(e,t){if(!e)return a(this._monthsShort)?this._monthsShort:this._monthsShort["standalone"];return a(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[ut.test(t)?"format":"standalone"][e.month()]}function ct(e,t,n){var i,r,s,a=e.toLocaleLowerCase();if(!this._monthsParse){this._monthsParse=[];this._longMonthsParse=[];this._shortMonthsParse=[];for(i=0;i<12;++i){s=f([2e3,i]);this._shortMonthsParse[i]=this.monthsShort(s,"").toLocaleLowerCase();this._longMonthsParse[i]=this.months(s,"").toLocaleLowerCase()}}if(n)if(t==="MMM"){r=x.call(this._shortMonthsParse,a);return r!==-1?r:null}else{r=x.call(this._longMonthsParse,a);return r!==-1?r:null}else if(t==="MMM"){r=x.call(this._shortMonthsParse,a);if(r!==-1)return r;r=x.call(this._longMonthsParse,a);return r!==-1?r:null}else{r=x.call(this._longMonthsParse,a);if(r!==-1)return r;r=x.call(this._shortMonthsParse,a);return r!==-1?r:null}}function mt(e,t,n){var i,r,s;if(this._monthsParseExact)return ct.call(this,e,t,n);if(!this._monthsParse){this._monthsParse=[];this._longMonthsParse=[];this._shortMonthsParse=[]}for(i=0;i<12;i++){r=f([2e3,i]);if(n&&!this._longMonthsParse[i]){this._longMonthsParse[i]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i");this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")}if(!n&&!this._monthsParse[i]){s="^"+this.months(r,"")+"|^"+this.monthsShort(r,"");this._monthsParse[i]=new RegExp(s.replace(".",""),"i")}if(n&&t==="MMMM"&&this._longMonthsParse[i].test(e))return i;else if(n&&t==="MMM"&&this._shortMonthsParse[i].test(e))return i;else if(!n&&this._monthsParse[i].test(e))return i}}function _t(e,t){var n;if(!e.isValid())return e;if(typeof t==="string")if(/^\d+$/.test(t))t=g(t);else{t=e.localeData().monthsParse(t);if(!l(t))return e}n=Math.min(e.date(),st(e.year(),t));e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n);return e}function yt(e){if(e!=null){_t(this,e);d.updateOffset(this,true);return this}else return Ne(this,"Month")}function gt(){return st(this.year(),this.month())}function pt(e){if(this._monthsParseExact){if(!u(this,"_monthsRegex"))vt.call(this);if(e)return this._monthsShortStrictRegex;else return this._monthsShortRegex}else{if(!u(this,"_monthsShortRegex"))this._monthsShortRegex=lt;return this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex}}function wt(e){if(this._monthsParseExact){if(!u(this,"_monthsRegex"))vt.call(this);if(e)return this._monthsStrictRegex;else return this._monthsRegex}else{if(!u(this,"_monthsRegex"))this._monthsRegex=ft;return this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex}}function vt(){function e(e,t){return t.length-e.length}var t=[],n=[],i=[],r,s;for(r=0;r<12;r++){s=f([2e3,r]);t.push(this.monthsShort(s,""));n.push(this.months(s,""));i.push(this.months(s,""));i.push(this.monthsShort(s,""))}t.sort(e);n.sort(e);i.sort(e);for(r=0;r<12;r++){t[r]=v(t[r]);n[r]=v(n[r])}for(r=0;r<24;r++)i[r]=v(i[r]);this._monthsRegex=new RegExp("^("+i.join("|")+")","i");this._monthsShortRegex=this._monthsRegex;this._monthsStrictRegex=new RegExp("^("+n.join("|")+")","i");this._monthsShortStrictRegex=new RegExp("^("+t.join("|")+")","i")}function Mt(e){return xe(e)?366:365}i("Y",0,0,function(){var e=this.year();return e<=9999?s(e,4):"+"+e}),i(0,["YY",2],0,function(){return this.year()%100}),i(0,["YYYY",4],0,"year"),i(0,["YYYYY",5],0,"year"),i(0,["YYYYYY",6,true],0,"year"),t("year","y"),n("year",1),w("Y",Ie),w("YY",p,r),w("YYYY",Ge,Ue),w("YYYYY",Ae,He),w("YYYYYY",Ae,He),M(["YYYYY","YYYYYY"],k),M("YYYY",function(e,t){t[k]=e.length===2?d.parseTwoDigitYear(e):g(e)}),M("YY",function(e,t){t[k]=d.parseTwoDigitYear(e)}),M("Y",function(e,t){t[k]=parseInt(e,10)}),d.parseTwoDigitYear=function(e){return g(e)+(g(e)>68?1900:2e3)};var kt=Te("FullYear",true);function St(){return xe(this.year())}function Dt(e,t,n,i,r,s,a){var o;if(e<100&&e>=0){o=new Date(e+400,t,n,i,r,s,a);if(isFinite(o.getFullYear()))o.setFullYear(e)}else o=new Date(e,t,n,i,r,s,a);return o}function Yt(e){var t,n;if(e<100&&e>=0){n=Array.prototype.slice.call(arguments);n[0]=e+400;t=new Date(Date.UTC.apply(null,n));if(isFinite(t.getUTCFullYear()))t.setUTCFullYear(e)}else t=new Date(Date.UTC.apply(null,arguments));return t}function bt(e,t,n){var i=7+t-n,r=(7+Yt(e,0,i).getUTCDay()-t)%7;return-r+i-1}function Ot(e,t,n,i,r){var s=(7+n-i)%7,a=bt(e,i,r),o=1+7*(t-1)+s+a,u,l;if(o<=0){u=e-1;l=Mt(u)+o}else if(o>Mt(e)){u=e+1;l=o-Mt(e)}else{u=e;l=o}return{year:u,dayOfYear:l}}function xt(e,t,n){var i=bt(e.year(),t,n),r=Math.floor((e.dayOfYear()-i-1)/7)+1,s,a;if(r<1){a=e.year()-1;s=r+T(a,t,n)}else if(r>T(e.year(),t,n)){s=r-T(e.year(),t,n);a=e.year()+1}else{a=e.year();s=r}return{week:s,year:a}}function T(e,t,n){var i=bt(e,t,n),r=bt(e+1,t,n);return(Mt(e)-i+r)/7}function Tt(e){return xt(e,this._week.dow,this._week.doy).week}i("w",["ww",2],"wo","week"),i("W",["WW",2],"Wo","isoWeek"),t("week","w"),t("isoWeek","W"),n("week",5),n("isoWeek",5),w("w",p),w("ww",p,r),w("W",p),w("WW",p,r),Ke(["w","ww","W","WW"],function(e,t,n,i){t[i.substr(0,1)]=g(e)});var Nt={dow:0,doy:6};function Pt(){return this._week.dow}function Rt(){return this._week.doy}function Wt(e){var t=this.localeData().week(this);return e==null?t:this.add((e-t)*7,"d")}function Ct(e){var t=xt(this,1,4).week;return e==null?t:this.add((e-t)*7,"d")}function Lt(e,t){if(typeof e!=="string")return e;if(!isNaN(e))return parseInt(e,10);e=t.weekdaysParse(e);if(typeof e==="number")return e;return null}function Ut(e,t){if(typeof e==="string")return t.weekdaysParse(e)%7||7;return isNaN(e)?null:e}function Ht(e,t){return e.slice(t,7).concat(e.slice(0,t))}i("d",0,"do","day"),i("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),i("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),i("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),i("e",0,0,"weekday"),i("E",0,0,"isoWeekday"),t("day","d"),t("weekday","e"),t("isoWeekday","E"),n("day",11),n("weekday",11),n("isoWeekday",11),w("d",p),w("e",p),w("E",p),w("dd",function(e,t){return t.weekdaysMinRegex(e)}),w("ddd",function(e,t){return t.weekdaysShortRegex(e)}),w("dddd",function(e,t){return t.weekdaysRegex(e)}),Ke(["dd","ddd","dddd"],function(e,t,n,i){var r=n._locale.weekdaysParse(e,i,n._strict);if(r!=null)t.d=r;else h(n).invalidWeekday=e}),Ke(["d","e","E"],function(e,t,n,i){t[i]=g(e)});var Ft="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Et="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Vt="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Gt=$e,At=$e,jt=$e;function It(e,t){var n=a(this._weekdays)?this._weekdays:this._weekdays[e&&e!==true&&this._weekdays.isFormat.test(t)?"format":"standalone"];return e===true?Ht(n,this._week.dow):e?n[e.day()]:n}function Zt(e){return e===true?Ht(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort}function zt(e){return e===true?Ht(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin}function qt(e,t,n){var i,r,s,a=e.toLocaleLowerCase();if(!this._weekdaysParse){this._weekdaysParse=[];this._shortWeekdaysParse=[];this._minWeekdaysParse=[];for(i=0;i<7;++i){s=f([2e3,1]).day(i);this._minWeekdaysParse[i]=this.weekdaysMin(s,"").toLocaleLowerCase();this._shortWeekdaysParse[i]=this.weekdaysShort(s,"").toLocaleLowerCase();this._weekdaysParse[i]=this.weekdays(s,"").toLocaleLowerCase()}}if(n)if(t==="dddd"){r=x.call(this._weekdaysParse,a);return r!==-1?r:null}else if(t==="ddd"){r=x.call(this._shortWeekdaysParse,a);return r!==-1?r:null}else{r=x.call(this._minWeekdaysParse,a);return r!==-1?r:null}else if(t==="dddd"){r=x.call(this._weekdaysParse,a);if(r!==-1)return r;r=x.call(this._shortWeekdaysParse,a);if(r!==-1)return r;r=x.call(this._minWeekdaysParse,a);return r!==-1?r:null}else if(t==="ddd"){r=x.call(this._shortWeekdaysParse,a);if(r!==-1)return r;r=x.call(this._weekdaysParse,a);if(r!==-1)return r;r=x.call(this._minWeekdaysParse,a);return r!==-1?r:null}else{r=x.call(this._minWeekdaysParse,a);if(r!==-1)return r;r=x.call(this._weekdaysParse,a);if(r!==-1)return r;r=x.call(this._shortWeekdaysParse,a);return r!==-1?r:null}}function $t(e,t,n){var i,r,s;if(this._weekdaysParseExact)return qt.call(this,e,t,n);if(!this._weekdaysParse){this._weekdaysParse=[];this._minWeekdaysParse=[];this._shortWeekdaysParse=[];this._fullWeekdaysParse=[]}for(i=0;i<7;i++){r=f([2e3,1]).day(i);if(n&&!this._fullWeekdaysParse[i]){this._fullWeekdaysParse[i]=new RegExp("^"+this.weekdays(r,"").replace(".","\\.?")+"$","i");this._shortWeekdaysParse[i]=new RegExp("^"+this.weekdaysShort(r,"").replace(".","\\.?")+"$","i");this._minWeekdaysParse[i]=new RegExp("^"+this.weekdaysMin(r,"").replace(".","\\.?")+"$","i")}if(!this._weekdaysParse[i]){s="^"+this.weekdays(r,"")+"|^"+this.weekdaysShort(r,"")+"|^"+this.weekdaysMin(r,"");this._weekdaysParse[i]=new RegExp(s.replace(".",""),"i")}if(n&&t==="dddd"&&this._fullWeekdaysParse[i].test(e))return i;else if(n&&t==="ddd"&&this._shortWeekdaysParse[i].test(e))return i;else if(n&&t==="dd"&&this._minWeekdaysParse[i].test(e))return i;else if(!n&&this._weekdaysParse[i].test(e))return i}}function Bt(e){if(!this.isValid())return e!=null?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();if(e!=null){e=Lt(e,this.localeData());return this.add(e-t,"d")}else return t}function Jt(e){if(!this.isValid())return e!=null?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return e==null?t:this.add(e-t,"d")}function Qt(e){if(!this.isValid())return e!=null?this:NaN;if(e!=null){var t=Ut(e,this.localeData());return this.day(this.day()%7?t:t-7)}else return this.day()||7}function Xt(e){if(this._weekdaysParseExact){if(!u(this,"_weekdaysRegex"))tn.call(this);if(e)return this._weekdaysStrictRegex;else return this._weekdaysRegex}else{if(!u(this,"_weekdaysRegex"))this._weekdaysRegex=Gt;return this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex}}function Kt(e){if(this._weekdaysParseExact){if(!u(this,"_weekdaysRegex"))tn.call(this);if(e)return this._weekdaysShortStrictRegex;else return this._weekdaysShortRegex}else{if(!u(this,"_weekdaysShortRegex"))this._weekdaysShortRegex=At;return this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex}}function en(e){if(this._weekdaysParseExact){if(!u(this,"_weekdaysRegex"))tn.call(this);if(e)return this._weekdaysMinStrictRegex;else return this._weekdaysMinRegex}else{if(!u(this,"_weekdaysMinRegex"))this._weekdaysMinRegex=jt;return this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex}}function tn(){function e(e,t){return t.length-e.length}var t=[],n=[],i=[],r=[],s,a,o,u,l;for(s=0;s<7;s++){a=f([2e3,1]).day(s);o=v(this.weekdaysMin(a,""));u=v(this.weekdaysShort(a,""));l=v(this.weekdays(a,""));t.push(o);n.push(u);i.push(l);r.push(o);r.push(u);r.push(l)}t.sort(e);n.sort(e);i.sort(e);r.sort(e);this._weekdaysRegex=new RegExp("^("+r.join("|")+")","i");this._weekdaysShortRegex=this._weekdaysRegex;this._weekdaysMinRegex=this._weekdaysRegex;this._weekdaysStrictRegex=new RegExp("^("+i.join("|")+")","i");this._weekdaysShortStrictRegex=new RegExp("^("+n.join("|")+")","i");this._weekdaysMinStrictRegex=new RegExp("^("+t.join("|")+")","i")}function nn(){return this.hours()%12||12}function rn(){return this.hours()||24}function sn(e,t){i(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function an(e,t){return t._meridiemParse}function on(e){return(e+"").toLowerCase().charAt(0)==="p"}i("H",["HH",2],0,"hour"),i("h",["hh",2],0,nn),i("k",["kk",2],0,rn),i("hmm",0,0,function(){return""+nn.apply(this)+s(this.minutes(),2)}),i("hmmss",0,0,function(){return""+nn.apply(this)+s(this.minutes(),2)+s(this.seconds(),2)}),i("Hmm",0,0,function(){return""+this.hours()+s(this.minutes(),2)}),i("Hmmss",0,0,function(){return""+this.hours()+s(this.minutes(),2)+s(this.seconds(),2)}),sn("a",true),sn("A",false),t("hour","h"),n("hour",13),w("a",an),w("A",an),w("H",p),w("h",p),w("k",p),w("HH",p,r),w("hh",p,r),w("kk",p,r),w("hmm",Fe),w("hmmss",Ee),w("Hmm",Fe),w("Hmmss",Ee),M(["H","HH"],Y),M(["k","kk"],function(e,t,n){var i=g(e);t[Y]=i===24?0:i}),M(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e);n._meridiem=e}),M(["h","hh"],function(e,t,n){t[Y]=g(e);h(n).bigHour=true}),M("hmm",function(e,t,n){var i=e.length-2;t[Y]=g(e.substr(0,i));t[b]=g(e.substr(i));h(n).bigHour=true}),M("hmmss",function(e,t,n){var i=e.length-4,r=e.length-2;t[Y]=g(e.substr(0,i));t[b]=g(e.substr(i,2));t[O]=g(e.substr(r));h(n).bigHour=true}),M("Hmm",function(e,t,n){var i=e.length-2;t[Y]=g(e.substr(0,i));t[b]=g(e.substr(i))}),M("Hmmss",function(e,t,n){var i=e.length-4,r=e.length-2;t[Y]=g(e.substr(0,i));t[b]=g(e.substr(i,2));t[O]=g(e.substr(r))});var un,ln=Te("Hours",true);function fn(e,t,n){if(e>11)return n?"pm":"PM";else return n?"am":"AM"}var dn={calendar:re,longDateFormat:me,invalidDate:ye,ordinal:pe,dayOfMonthOrdinalParse:we,relativeTime:Me,months:at,monthsShort:ot,week:Nt,weekdays:Ft,weekdaysMin:Vt,weekdaysShort:Et,meridiemParse:/[ap]\.?m?\.?/i},N={},hn={},cn;function mn(e,t){var n,i=Math.min(e.length,t.length);for(n=0;n<i;n+=1)if(e[n]!==t[n])return n;return i}function _n(e){return e?e.toLowerCase().replace("_","-"):e}function yn(e){var t=0,n,i,r,s;while(t<e.length){s=_n(e[t]).split("-");n=s.length;i=_n(e[t+1]);i=i?i.split("-"):null;while(n>0){r=pn(s.slice(0,n).join("-"));if(r)return r;if(i&&i.length>=n&&mn(s,i)>=n-1)break;n--}t++}return cn}function gn(e){return e.match("^[^/\\\\]*$")!=null}function pn(t){var e=null,n;if(N[t]===undefined&&"object"!=="undefined"&&la&&la.exports&&gn(t))try{e=cn._abbr;n=undefined;fa("./node_modules/moment/locale sync recursive \\b\\B")("./"+t);wn(e)}catch(e){N[t]=null}return N[t]}function wn(e,t){var n;if(e){if(o(t))n=kn(e);else n=vn(e,t);if(n)cn=n;else if(typeof console!=="undefined"&&console.warn)console.warn("Locale "+e+" not found. Did you forget to load it?")}return cn._abbr}function vn(e,t){if(t!==null){var n,i=dn;t.abbr=e;if(N[e]!=null){ee("defineLocaleOverride","use moment.updateLocale(localeName, config) to change "+"an existing locale. moment.defineLocale(localeName, "+"config) should only be used for creating a new locale "+"See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");i=N[e]._config}else if(t.parentLocale!=null)if(N[t.parentLocale]!=null)i=N[t.parentLocale]._config;else{n=pn(t.parentLocale);if(n!=null)i=n._config;else{if(!hn[t.parentLocale])hn[t.parentLocale]=[];hn[t.parentLocale].push({name:e,config:t});return null}}N[e]=new ie(ne(i,t));if(hn[e])hn[e].forEach(function(e){vn(e.name,e.config)});wn(e);return N[e]}else{delete N[e];return null}}function Mn(e,t){if(t!=null){var n,i,r=dn;if(N[e]!=null&&N[e].parentLocale!=null)N[e].set(ne(N[e]._config,t));else{i=pn(e);if(i!=null)r=i._config;t=ne(r,t);if(i==null)t.abbr=e;n=new ie(t);n.parentLocale=N[e];N[e]=n}wn(e)}else if(N[e]!=null)if(N[e].parentLocale!=null){N[e]=N[e].parentLocale;if(e===wn())wn(e)}else if(N[e]!=null)delete N[e];return N[e]}function kn(e){var t;if(e&&e._locale&&e._locale._abbr)e=e._locale._abbr;if(!e)return cn;if(!a(e)){t=pn(e);if(t)return t;e=[e]}return yn(e)}function Sn(){return K(N)}function Dn(e){var t,n=e._a;if(n&&h(e).overflow===-2){t=n[S]<0||n[S]>11?S:n[D]<1||n[D]>st(n[k],n[S])?D:n[Y]<0||n[Y]>24||n[Y]===24&&(n[b]!==0||n[O]!==0||n[tt]!==0)?Y:n[b]<0||n[b]>59?b:n[O]<0||n[O]>59?O:n[tt]<0||n[tt]>999?tt:-1;if(h(e)._overflowDayOfYear&&(t<k||t>D))t=D;if(h(e)._overflowWeeks&&t===-1)t=nt;if(h(e)._overflowWeekday&&t===-1)t=it;h(e).overflow=t}return e}var Yn=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,bn=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,On=/Z|[+-]\d\d(?::?\d\d)?/,xn=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,false],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,false],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,false],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,false],["YYYY",/\d{4}/,false]],Tn=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Nn=/^\/?Date\((-?\d+)/i,Pn=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,Rn={UT:0,GMT:0,EDT:-4*60,EST:-5*60,CDT:-5*60,CST:-6*60,MDT:-6*60,MST:-7*60,PDT:-7*60,PST:-8*60};function Wn(e){var t,n,i=e._i,r=Yn.exec(i)||bn.exec(i),s,a,o,u,l=xn.length,f=Tn.length;if(r){h(e).iso=true;for(t=0,n=l;t<n;t++)if(xn[t][1].exec(r[1])){a=xn[t][0];s=xn[t][2]!==false;break}if(a==null){e._isValid=false;return}if(r[3]){for(t=0,n=f;t<n;t++)if(Tn[t][1].exec(r[3])){o=(r[2]||" ")+Tn[t][0];break}if(o==null){e._isValid=false;return}}if(!s&&o!=null){e._isValid=false;return}if(r[4])if(On.exec(r[4]))u="Z";else{e._isValid=false;return}e._f=a+(o||"")+(u||"");Zn(e)}else e._isValid=false}function Cn(e,t,n,i,r,s){var a=[Ln(e),ot.indexOf(t),parseInt(n,10),parseInt(i,10),parseInt(r,10)];if(s)a.push(parseInt(s,10));return a}function Ln(e){var t=parseInt(e,10);if(t<=49)return 2e3+t;else if(t<=999)return 1900+t;return t}function Un(e){return e.replace(/\([^()]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,"")}function Hn(e,t,n){if(e){var i=Et.indexOf(e),r=new Date(t[0],t[1],t[2]).getDay();if(i!==r){h(n).weekdayMismatch=true;n._isValid=false;return false}}return true}function Fn(e,t,n){if(e)return Rn[e];else if(t)return 0;else{var i=parseInt(n,10),r=i%100,s=(i-r)/100;return s*60+r}}function En(e){var t=Pn.exec(Un(e._i)),n;if(t){n=Cn(t[4],t[3],t[2],t[5],t[6],t[7]);if(!Hn(t[1],n,e))return;e._a=n;e._tzm=Fn(t[8],t[9],t[10]);e._d=Yt.apply(null,e._a);e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm);h(e).rfc2822=true}else e._isValid=false}function Vn(e){var t=Nn.exec(e._i);if(t!==null){e._d=new Date(+t[1]);return}Wn(e);if(e._isValid===false)delete e._isValid;else return;En(e);if(e._isValid===false)delete e._isValid;else return;if(e._strict)e._isValid=false;else d.createFromInputFallback(e)}function Gn(e,t,n){if(e!=null)return e;if(t!=null)return t;return n}function An(e){var t=new Date(d.now());if(e._useUTC)return[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()];return[t.getFullYear(),t.getMonth(),t.getDate()]}function jn(e){var t,n,i=[],r,s,a;if(e._d)return;r=An(e);if(e._w&&e._a[D]==null&&e._a[S]==null)In(e);if(e._dayOfYear!=null){a=Gn(e._a[k],r[k]);if(e._dayOfYear>Mt(a)||e._dayOfYear===0)h(e)._overflowDayOfYear=true;n=Yt(a,0,e._dayOfYear);e._a[S]=n.getUTCMonth();e._a[D]=n.getUTCDate()}for(t=0;t<3&&e._a[t]==null;++t)e._a[t]=i[t]=r[t];for(;t<7;t++)e._a[t]=i[t]=e._a[t]==null?t===2?1:0:e._a[t];if(e._a[Y]===24&&e._a[b]===0&&e._a[O]===0&&e._a[tt]===0){e._nextDay=true;e._a[Y]=0}e._d=(e._useUTC?Yt:Dt).apply(null,i);s=e._useUTC?e._d.getUTCDay():e._d.getDay();if(e._tzm!=null)e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm);if(e._nextDay)e._a[Y]=24;if(e._w&&typeof e._w.d!=="undefined"&&e._w.d!==s)h(e).weekdayMismatch=true}function In(e){var t,n,i,r,s,a,o,u,l;t=e._w;if(t.GG!=null||t.W!=null||t.E!=null){s=1;a=4;n=Gn(t.GG,e._a[k],xt(P(),1,4).year);i=Gn(t.W,1);r=Gn(t.E,1);if(r<1||r>7)u=true}else{s=e._locale._week.dow;a=e._locale._week.doy;l=xt(P(),s,a);n=Gn(t.gg,e._a[k],l.year);i=Gn(t.w,l.week);if(t.d!=null){r=t.d;if(r<0||r>6)u=true}else if(t.e!=null){r=t.e+s;if(t.e<0||t.e>6)u=true}else r=s}if(i<1||i>T(n,s,a))h(e)._overflowWeeks=true;else if(u!=null)h(e)._overflowWeekday=true;else{o=Ot(n,i,r,s,a);e._a[k]=o.year;e._dayOfYear=o.dayOfYear}}function Zn(e){if(e._f===d.ISO_8601){Wn(e);return}if(e._f===d.RFC_2822){En(e);return}e._a=[];h(e).empty=true;var t=""+e._i,n,i,r,s,a,o=t.length,u=0,l,f;r=ce(e._f,e._locale).match(ae)||[];f=r.length;for(n=0;n<f;n++){s=r[n];i=(t.match(Je(s,e))||[])[0];if(i){a=t.substr(0,t.indexOf(i));if(a.length>0)h(e).unusedInput.push(a);t=t.slice(t.indexOf(i)+i.length);u+=i.length}if(le[s]){if(i)h(e).empty=false;else h(e).unusedTokens.push(s);et(s,i,e)}else if(e._strict&&!i)h(e).unusedTokens.push(s)}h(e).charsLeftOver=o-u;if(t.length>0)h(e).unusedInput.push(t);if(e._a[Y]<=12&&h(e).bigHour===true&&e._a[Y]>0)h(e).bigHour=undefined;h(e).parsedDateParts=e._a.slice(0);h(e).meridiem=e._meridiem;e._a[Y]=zn(e._locale,e._a[Y],e._meridiem);l=h(e).era;if(l!==null)e._a[k]=e._locale.erasConvertYear(l,e._a[k]);jn(e);Dn(e)}function zn(e,t,n){var i;if(n==null)return t;if(e.meridiemHour!=null)return e.meridiemHour(t,n);else if(e.isPM!=null){i=e.isPM(n);if(i&&t<12)t+=12;if(!i&&t===12)t=0;return t}else return t}function qn(e){var t,n,i,r,s,a,o=false,u=e._f.length;if(u===0){h(e).invalidFormat=true;e._d=new Date(NaN);return}for(r=0;r<u;r++){s=0;a=false;t=B({},e);if(e._useUTC!=null)t._useUTC=e._useUTC;t._f=e._f[r];Zn(t);if(Z(t))a=true;s+=h(t).charsLeftOver;s+=h(t).unusedTokens.length*10;h(t).score=s;if(!o){if(i==null||s<i||a){i=s;n=t;if(a)o=true}}else if(s<i){i=s;n=t}}j(e,n||t)}function $n(e){if(e._d)return;var t=Ye(e._i),n=t.day===undefined?t.date:t.day;e._a=A([t.year,t.month,n,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)});jn(e)}function Bn(e){var t=new J(Dn(Jn(e)));if(t._nextDay){t.add(1,"d");t._nextDay=undefined}return t}function Jn(e){var t=e._i,n=e._f;e._locale=e._locale||kn(e._l);if(t===null||n===undefined&&t==="")return z({nullInput:true});if(typeof t==="string")e._i=t=e._locale.preparse(t);if(c(t))return new J(Dn(t));else if(G(t))e._d=t;else if(a(n))qn(e);else if(n)Zn(e);else Qn(e);if(!Z(e))e._d=null;return e}function Qn(e){var t=e._i;if(o(t))e._d=new Date(d.now());else if(G(t))e._d=new Date(t.valueOf());else if(typeof t==="string")Vn(e);else if(a(t)){e._a=A(t.slice(0),function(e){return parseInt(e,10)});jn(e)}else if(E(t))$n(e);else if(l(t))e._d=new Date(t);else d.createFromInputFallback(e)}function Xn(e,t,n,i,r){var s={};if(t===true||t===false){i=t;t=undefined}if(n===true||n===false){i=n;n=undefined}if(E(e)&&V(e)||a(e)&&e.length===0)e=undefined;s._isAMomentObject=true;s._useUTC=s._isUTC=r;s._l=n;s._i=e;s._f=t;s._strict=i;return Bn(s)}function P(e,t,n,i){return Xn(e,t,n,i,false)}d.createFromInputFallback=e("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), "+"which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are "+"discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),d.ISO_8601=function(){},d.RFC_2822=function(){};var Kn=e("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=P.apply(null,arguments);if(this.isValid()&&e.isValid())return e<this?this:e;else return z()}),ei=e("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=P.apply(null,arguments);if(this.isValid()&&e.isValid())return e>this?this:e;else return z()});function ti(e,t){var n,i;if(t.length===1&&a(t[0]))t=t[0];if(!t.length)return P();n=t[0];for(i=1;i<t.length;++i)if(!t[i].isValid()||t[i][e](n))n=t[i];return n}function ni(){var e=[].slice.call(arguments,0);return ti("isBefore",e)}function ii(){var e=[].slice.call(arguments,0);return ti("isAfter",e)}var ri=function(){return Date.now?Date.now():+new Date},si=["year","quarter","month","week","day","hour","minute","second","millisecond"];function ai(e){var t,n=false,i,r=si.length;for(t in e)if(u(e,t)&&!(x.call(si,t)!==-1&&(e[t]==null||!isNaN(e[t]))))return false;for(i=0;i<r;++i)if(e[si[i]]){if(n)return false;if(parseFloat(e[si[i]])!==g(e[si[i]]))n=true}return true}function oi(){return this._isValid}function ui(){return R(NaN)}function li(e){var t=Ye(e),n=t.year||0,i=t.quarter||0,r=t.month||0,s=t.week||t.isoWeek||0,a=t.day||0,o=t.hour||0,u=t.minute||0,l=t.second||0,f=t.millisecond||0;this._isValid=ai(t);this._milliseconds=+f+l*1e3+u*6e4+o*1e3*60*60;this._days=+a+s*7;this._months=+r+i*3+n*12;this._data={};this._locale=kn();this._bubble()}function fi(e){return e instanceof li}function di(e){if(e<0)return Math.round(-1*e)*-1;else return Math.round(e)}function hi(e,t,n){var i=Math.min(e.length,t.length),r=Math.abs(e.length-t.length),s=0,a;for(a=0;a<i;a++)if(n&&e[a]!==t[a]||!n&&g(e[a])!==g(t[a]))s++;return s+r}function ci(e,n){i(e,0,0,function(){var e=this.utcOffset(),t="+";if(e<0){e=-e;t="-"}return t+s(~~(e/60),2)+n+s(~~e%60,2)})}ci("Z",":"),ci("ZZ",""),w("Z",ze),w("ZZ",ze),M(["Z","ZZ"],function(e,t,n){n._useUTC=true;n._tzm=_i(ze,e)});var mi=/([\+\-]|\d\d)/gi;function _i(e,t){var n=(t||"").match(e),i,r,s;if(n===null)return null;i=n[n.length-1]||[];r=(i+"").match(mi)||["-",0,0];s=+(r[1]*60)+g(r[2]);return s===0?0:r[0]==="+"?s:-s}function yi(e,t){var n,i;if(t._isUTC){n=t.clone();i=(c(e)||G(e)?e.valueOf():P(e).valueOf())-n.valueOf();n._d.setTime(n._d.valueOf()+i);d.updateOffset(n,false);return n}else return P(e).local()}function gi(e){return-Math.round(e._d.getTimezoneOffset())}function pi(e,t,n){var i=this._offset||0,r;if(!this.isValid())return e!=null?this:NaN;if(e!=null){if(typeof e==="string"){e=_i(ze,e);if(e===null)return this}else if(Math.abs(e)<16&&!n)e=e*60;if(!this._isUTC&&t)r=gi(this);this._offset=e;this._isUTC=true;if(r!=null)this.add(r,"m");if(i!==e)if(!t||this._changeInProgress)Li(this,R(e-i,"m"),1,false);else if(!this._changeInProgress){this._changeInProgress=true;d.updateOffset(this,true);this._changeInProgress=null}return this}else return this._isUTC?i:gi(this)}function wi(e,t){if(e!=null){if(typeof e!=="string")e=-e;this.utcOffset(e,t);return this}else return-this.utcOffset()}function vi(e){return this.utcOffset(0,e)}function Mi(e){if(this._isUTC){this.utcOffset(0,e);this._isUTC=false;if(e)this.subtract(gi(this),"m")}return this}function ki(){if(this._tzm!=null)this.utcOffset(this._tzm,false,true);else if(typeof this._i==="string"){var e=_i(Ze,this._i);if(e!=null)this.utcOffset(e);else this.utcOffset(0,true)}return this}function Si(e){if(!this.isValid())return false;e=e?P(e).utcOffset():0;return(this.utcOffset()-e)%60===0}function Di(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Yi(){if(!o(this._isDSTShifted))return this._isDSTShifted;var e={},t;B(e,this);e=Jn(e);if(e._a){t=e._isUTC?f(e._a):P(e._a);this._isDSTShifted=this.isValid()&&hi(e._a,t.toArray())>0}else this._isDSTShifted=false;return this._isDSTShifted}function bi(){return this.isValid()?!this._isUTC:false}function Oi(){return this.isValid()?this._isUTC:false}function xi(){return this.isValid()?this._isUTC&&this._offset===0:false}d.updateOffset=function(){};var Ti=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,Ni=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function R(e,t){var n=e,i=null,r,s,a;if(fi(e))n={ms:e._milliseconds,d:e._days,M:e._months};else if(l(e)||!isNaN(+e)){n={};if(t)n[t]=+e;else n.milliseconds=+e}else if(i=Ti.exec(e)){r=i[1]==="-"?-1:1;n={y:0,d:g(i[D])*r,h:g(i[Y])*r,m:g(i[b])*r,s:g(i[O])*r,ms:g(di(i[tt]*1e3))*r}}else if(i=Ni.exec(e)){r=i[1]==="-"?-1:1;n={y:Pi(i[2],r),M:Pi(i[3],r),w:Pi(i[4],r),d:Pi(i[5],r),h:Pi(i[6],r),m:Pi(i[7],r),s:Pi(i[8],r)}}else if(n==null)n={};else if(typeof n==="object"&&("from"in n||"to"in n)){a=Wi(P(n.from),P(n.to));n={};n.ms=a.milliseconds;n.M=a.months}s=new li(n);if(fi(e)&&u(e,"_locale"))s._locale=e._locale;if(fi(e)&&u(e,"_isValid"))s._isValid=e._isValid;return s}function Pi(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Ri(e,t){var n={};n.months=t.month()-e.month()+(t.year()-e.year())*12;if(e.clone().add(n.months,"M").isAfter(t))--n.months;n.milliseconds=+t-+e.clone().add(n.months,"M");return n}function Wi(e,t){var n;if(!(e.isValid()&&t.isValid()))return{milliseconds:0,months:0};t=yi(t,e);if(e.isBefore(t))n=Ri(e,t);else{n=Ri(t,e);n.milliseconds=-n.milliseconds;n.months=-n.months}return n}function Ci(r,s){return function(e,t){var n,i;if(t!==null&&!isNaN(+t)){ee(s,"moment()."+s+"(period, number) is deprecated. Please use moment()."+s+"(number, period). "+"See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");i=e;e=t;t=i}n=R(e,t);Li(this,n,r);return this}}function Li(e,t,n,i){var r=t._milliseconds,s=di(t._days),a=di(t._months);if(!e.isValid())return;i=i==null?true:i;if(a)_t(e,Ne(e,"Month")+a*n);if(s)Pe(e,"Date",Ne(e,"Date")+s*n);if(r)e._d.setTime(e._d.valueOf()+r*n);if(i)d.updateOffset(e,s||a)}R.fn=li.prototype,R.invalid=ui;var Ui=Ci(1,"add"),Hi=Ci(-1,"subtract");function Fi(e){return typeof e==="string"||e instanceof String}function Ei(e){return c(e)||G(e)||Fi(e)||l(e)||Gi(e)||Vi(e)||e===null||e===undefined}function Vi(e){var t=E(e)&&!V(e),n=false,i=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"],r,s,a=i.length;for(r=0;r<a;r+=1){s=i[r];n=n||u(e,s)}return t&&n}function Gi(t){var e=a(t),n=false;if(e)n=t.filter(function(e){return!l(e)&&Fi(t)}).length===0;return e&&n}function Ai(e){var t=E(e)&&!V(e),n=false,i=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"],r,s;for(r=0;r<i.length;r+=1){s=i[r];n=n||u(e,s)}return t&&n}function ji(e,t){var n=e.diff(t,"days",true);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"}function Ii(e,t){if(arguments.length===1)if(!arguments[0]){e=undefined;t=undefined}else if(Ei(arguments[0])){e=arguments[0];t=undefined}else if(Ai(arguments[0])){t=arguments[0];e=undefined}var n=e||P(),i=yi(n,this).startOf("day"),r=d.calendarFormat(this,i)||"sameElse",s=t&&(m(t[r])?t[r].call(this,n):t[r]);return this.format(s||this.localeData().calendar(r,this,P(n)))}function Zi(){return new J(this)}function zi(e,t){var n=c(e)?e:P(e);if(!(this.isValid()&&n.isValid()))return false;t=_(t)||"millisecond";if(t==="millisecond")return this.valueOf()>n.valueOf();else return n.valueOf()<this.clone().startOf(t).valueOf()}function qi(e,t){var n=c(e)?e:P(e);if(!(this.isValid()&&n.isValid()))return false;t=_(t)||"millisecond";if(t==="millisecond")return this.valueOf()<n.valueOf();else return this.clone().endOf(t).valueOf()<n.valueOf()}function $i(e,t,n,i){var r=c(e)?e:P(e),s=c(t)?t:P(t);if(!(this.isValid()&&r.isValid()&&s.isValid()))return false;i=i||"()";return(i[0]==="("?this.isAfter(r,n):!this.isBefore(r,n))&&(i[1]===")"?this.isBefore(s,n):!this.isAfter(s,n))}function Bi(e,t){var n=c(e)?e:P(e),i;if(!(this.isValid()&&n.isValid()))return false;t=_(t)||"millisecond";if(t==="millisecond")return this.valueOf()===n.valueOf();else{i=n.valueOf();return this.clone().startOf(t).valueOf()<=i&&i<=this.clone().endOf(t).valueOf()}}function Ji(e,t){return this.isSame(e,t)||this.isAfter(e,t)}function Qi(e,t){return this.isSame(e,t)||this.isBefore(e,t)}function Xi(e,t,n){var i,r,s;if(!this.isValid())return NaN;i=yi(e,this);if(!i.isValid())return NaN;r=(i.utcOffset()-this.utcOffset())*6e4;t=_(t);switch(t){case"year":s=Ki(this,i)/12;break;case"month":s=Ki(this,i);break;case"quarter":s=Ki(this,i)/3;break;case"second":s=(this-i)/1e3;break;case"minute":s=(this-i)/6e4;break;case"hour":s=(this-i)/36e5;break;case"day":s=(this-i-r)/864e5;break;case"week":s=(this-i-r)/6048e5;break;default:s=this-i}return n?s:y(s)}function Ki(e,t){if(e.date()<t.date())return-Ki(t,e);var n=(t.year()-e.year())*12+(t.month()-e.month()),i=e.clone().add(n,"months"),r,s;if(t-i<0){r=e.clone().add(n-1,"months");s=(t-i)/(i-r)}else{r=e.clone().add(n+1,"months");s=(t-i)/(r-i)}return-(n+s)||0}function er(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function tr(e){if(!this.isValid())return null;var t=e!==true,n=t?this.clone().utc():this;if(n.year()<0||n.year()>9999)return he(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ");if(m(Date.prototype.toISOString))if(t)return this.toDate().toISOString();else return new Date(this.valueOf()+this.utcOffset()*60*1e3).toISOString().replace("Z",he(n,"Z"));return he(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")}function nr(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="",n,i,r,s;if(!this.isLocal()){e=this.utcOffset()===0?"moment.utc":"moment.parseZone";t="Z"}n="["+e+'("]';i=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY";r="-MM-DD[T]HH:mm:ss.SSS";s=t+'[")]';return this.format(n+i+r+s)}function ir(e){if(!e)e=this.isUtc()?d.defaultFormatUtc:d.defaultFormat;var t=he(this,e);return this.localeData().postformat(t)}function rr(e,t){if(this.isValid()&&(c(e)&&e.isValid()||P(e).isValid()))return R({to:this,from:e}).locale(this.locale()).humanize(!t);else return this.localeData().invalidDate()}function sr(e){return this.from(P(),e)}function ar(e,t){if(this.isValid()&&(c(e)&&e.isValid()||P(e).isValid()))return R({from:this,to:e}).locale(this.locale()).humanize(!t);else return this.localeData().invalidDate()}function or(e){return this.to(P(),e)}function ur(e){var t;if(e===undefined)return this._locale._abbr;else{t=kn(e);if(t!=null)this._locale=t;return this}}d.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",d.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var lr=e("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){if(e===undefined)return this.localeData();else return this.locale(e)});function fr(){return this._locale}var dr=1e3,hr=60*dr,cr=60*hr,mr=(365*400+97)*24*cr;function _r(e,t){return(e%t+t)%t}function yr(e,t,n){if(e<100&&e>=0)return new Date(e+400,t,n)-mr;else return new Date(e,t,n).valueOf()}function gr(e,t,n){if(e<100&&e>=0)return Date.UTC(e+400,t,n)-mr;else return Date.UTC(e,t,n)}function pr(e){var t,n;e=_(e);if(e===undefined||e==="millisecond"||!this.isValid())return this;n=this._isUTC?gr:yr;switch(e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf();t-=_r(t+(this._isUTC?0:this.utcOffset()*hr),cr);break;case"minute":t=this._d.valueOf();t-=_r(t,hr);break;case"second":t=this._d.valueOf();t-=_r(t,dr);break}this._d.setTime(t);d.updateOffset(this,true);return this}function wr(e){var t,n;e=_(e);if(e===undefined||e==="millisecond"||!this.isValid())return this;n=this._isUTC?gr:yr;switch(e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf();t+=cr-_r(t+(this._isUTC?0:this.utcOffset()*hr),cr)-1;break;case"minute":t=this._d.valueOf();t+=hr-_r(t,hr)-1;break;case"second":t=this._d.valueOf();t+=dr-_r(t,dr)-1;break}this._d.setTime(t);d.updateOffset(this,true);return this}function vr(){return this._d.valueOf()-(this._offset||0)*6e4}function Mr(){return Math.floor(this.valueOf()/1e3)}function kr(){return new Date(this.valueOf())}function Sr(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function Dr(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function Yr(){return this.isValid()?this.toISOString():null}function br(){return Z(this)}function Or(){return j({},h(this))}function xr(){return h(this).overflow}function Tr(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function Nr(e,t){var n,i,r,s=this._eras||kn("en")._eras;for(n=0,i=s.length;n<i;++n){switch(typeof s[n].since){case"string":r=d(s[n].since).startOf("day");s[n].since=r.valueOf();break}switch(typeof s[n].until){case"undefined":s[n].until=+Infinity;break;case"string":r=d(s[n].until).startOf("day").valueOf();s[n].until=r.valueOf();break}}return s}function Pr(e,t,n){var i,r,s=this.eras(),a,o,u;e=e.toUpperCase();for(i=0,r=s.length;i<r;++i){a=s[i].name.toUpperCase();o=s[i].abbr.toUpperCase();u=s[i].narrow.toUpperCase();if(n)switch(t){case"N":case"NN":case"NNN":if(o===e)return s[i];break;case"NNNN":if(a===e)return s[i];break;case"NNNNN":if(u===e)return s[i];break}else if([a,o,u].indexOf(e)>=0)return s[i]}}function Rr(e,t){var n=e.since<=e.until?+1:-1;if(t===undefined)return d(e.since).year();else return d(e.since).year()+(t-e.offset)*n}function Wr(){var e,t,n,i=this.localeData().eras();for(e=0,t=i.length;e<t;++e){n=this.clone().startOf("day").valueOf();if(i[e].since<=n&&n<=i[e].until)return i[e].name;if(i[e].until<=n&&n<=i[e].since)return i[e].name}return""}function Cr(){var e,t,n,i=this.localeData().eras();for(e=0,t=i.length;e<t;++e){n=this.clone().startOf("day").valueOf();if(i[e].since<=n&&n<=i[e].until)return i[e].narrow;if(i[e].until<=n&&n<=i[e].since)return i[e].narrow}return""}function Lr(){var e,t,n,i=this.localeData().eras();for(e=0,t=i.length;e<t;++e){n=this.clone().startOf("day").valueOf();if(i[e].since<=n&&n<=i[e].until)return i[e].abbr;if(i[e].until<=n&&n<=i[e].since)return i[e].abbr}return""}function Ur(){var e,t,n,i,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){n=r[e].since<=r[e].until?+1:-1;i=this.clone().startOf("day").valueOf();if(r[e].since<=i&&i<=r[e].until||r[e].until<=i&&i<=r[e].since)return(this.year()-d(r[e].since).year())*n+r[e].offset}return this.year()}function Hr(e){if(!u(this,"_erasNameRegex"))Ir.call(this);return e?this._erasNameRegex:this._erasRegex}function Fr(e){if(!u(this,"_erasAbbrRegex"))Ir.call(this);return e?this._erasAbbrRegex:this._erasRegex}function Er(e){if(!u(this,"_erasNarrowRegex"))Ir.call(this);return e?this._erasNarrowRegex:this._erasRegex}function Vr(e,t){return t.erasAbbrRegex(e)}function Gr(e,t){return t.erasNameRegex(e)}function Ar(e,t){return t.erasNarrowRegex(e)}function jr(e,t){return t._eraYearOrdinalRegex||je}function Ir(){var e=[],t=[],n=[],i=[],r,s,a=this.eras();for(r=0,s=a.length;r<s;++r){t.push(v(a[r].name));e.push(v(a[r].abbr));n.push(v(a[r].narrow));i.push(v(a[r].name));i.push(v(a[r].abbr));i.push(v(a[r].narrow))}this._erasRegex=new RegExp("^("+i.join("|")+")","i");this._erasNameRegex=new RegExp("^("+t.join("|")+")","i");this._erasAbbrRegex=new RegExp("^("+e.join("|")+")","i");this._erasNarrowRegex=new RegExp("^("+n.join("|")+")","i")}function Zr(e,t){i(0,[e,e.length],0,t)}function zr(e){return Xr.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function qr(e){return Xr.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function $r(){return T(this.year(),1,4)}function Br(){return T(this.isoWeekYear(),1,4)}function Jr(){var e=this.localeData()._week;return T(this.year(),e.dow,e.doy)}function Qr(){var e=this.localeData()._week;return T(this.weekYear(),e.dow,e.doy)}function Xr(e,t,n,i,r){var s;if(e==null)return xt(this,i,r).year;else{s=T(e,i,r);if(t>s)t=s;return Kr.call(this,e,t,n,i,r)}}function Kr(e,t,n,i,r){var s=Ot(e,t,n,i,r),a=Yt(s.year,0,s.dayOfYear);this.year(a.getUTCFullYear());this.month(a.getUTCMonth());this.date(a.getUTCDate());return this}function es(e){return e==null?Math.ceil((this.month()+1)/3):this.month((e-1)*3+this.month()%3)}i("N",0,0,"eraAbbr"),i("NN",0,0,"eraAbbr"),i("NNN",0,0,"eraAbbr"),i("NNNN",0,0,"eraName"),i("NNNNN",0,0,"eraNarrow"),i("y",["y",1],"yo","eraYear"),i("y",["yy",2],0,"eraYear"),i("y",["yyy",3],0,"eraYear"),i("y",["yyyy",4],0,"eraYear"),w("N",Vr),w("NN",Vr),w("NNN",Vr),w("NNNN",Gr),w("NNNNN",Ar),M(["N","NN","NNN","NNNN","NNNNN"],function(e,t,n,i){var r=n._locale.erasParse(e,i,n._strict);if(r)h(n).era=r;else h(n).invalidEra=e}),w("y",je),w("yy",je),w("yyy",je),w("yyyy",je),w("yo",jr),M(["y","yy","yyy","yyyy"],k),M(["yo"],function(e,t,n,i){var r;if(n._locale._eraYearOrdinalRegex)r=e.match(n._locale._eraYearOrdinalRegex);if(n._locale.eraYearOrdinalParse)t[k]=n._locale.eraYearOrdinalParse(e,r);else t[k]=parseInt(e,10)}),i(0,["gg",2],0,function(){return this.weekYear()%100}),i(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Zr("gggg","weekYear"),Zr("ggggg","weekYear"),Zr("GGGG","isoWeekYear"),Zr("GGGGG","isoWeekYear"),t("weekYear","gg"),t("isoWeekYear","GG"),n("weekYear",1),n("isoWeekYear",1),w("G",Ie),w("g",Ie),w("GG",p,r),w("gg",p,r),w("GGGG",Ge,Ue),w("gggg",Ge,Ue),w("GGGGG",Ae,He),w("ggggg",Ae,He),Ke(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,i){t[i.substr(0,2)]=g(e)}),Ke(["gg","GG"],function(e,t,n,i){t[i]=d.parseTwoDigitYear(e)}),i("Q",0,"Qo","quarter"),t("quarter","Q"),n("quarter",7),w("Q",Ce),M("Q",function(e,t){t[S]=(g(e)-1)*3}),i("D",["DD",2],"Do","date"),t("date","D"),n("date",9),w("D",p),w("DD",p,r),w("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),M(["D","DD"],D),M("Do",function(e,t){t[D]=g(e.match(p)[0])});var ts=Te("Date",true);function ns(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return e==null?t:this.add(e-t,"d")}i("DDD",["DDDD",3],"DDDo","dayOfYear"),t("dayOfYear","DDD"),n("dayOfYear",4),w("DDD",Ve),w("DDDD",Le),M(["DDD","DDDD"],function(e,t,n){n._dayOfYear=g(e)}),i("m",["mm",2],0,"minute"),t("minute","m"),n("minute",14),w("m",p),w("mm",p,r),M(["m","mm"],b);var is=Te("Minutes",false),rs=(i("s",["ss",2],0,"second"),t("second","s"),n("second",15),w("s",p),w("ss",p,r),M(["s","ss"],O),Te("Seconds",false)),ss,as;for(i("S",0,0,function(){return~~(this.millisecond()/100)}),i(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),i(0,["SSS",3],0,"millisecond"),i(0,["SSSS",4],0,function(){return this.millisecond()*10}),i(0,["SSSSS",5],0,function(){return this.millisecond()*100}),i(0,["SSSSSS",6],0,function(){return this.millisecond()*1e3}),i(0,["SSSSSSS",7],0,function(){return this.millisecond()*1e4}),i(0,["SSSSSSSS",8],0,function(){return this.millisecond()*1e5}),i(0,["SSSSSSSSS",9],0,function(){return this.millisecond()*1e6}),t("millisecond","ms"),n("millisecond",16),w("S",Ve,Ce),w("SS",Ve,r),w("SSS",Ve,Le),ss="SSSS";ss.length<=9;ss+="S")w(ss,je);function os(e,t){t[tt]=g(("0."+e)*1e3)}for(ss="S";ss.length<=9;ss+="S")M(ss,os);function us(){return this._isUTC?"UTC":""}function ls(){return this._isUTC?"Coordinated Universal Time":""}as=Te("Milliseconds",false),i("z",0,0,"zoneAbbr"),i("zz",0,0,"zoneName");var W=J.prototype;if(W.add=Ui,W.calendar=Ii,W.clone=Zi,W.diff=Xi,W.endOf=wr,W.format=ir,W.from=rr,W.fromNow=sr,W.to=ar,W.toNow=or,W.get=Re,W.invalidAt=xr,W.isAfter=zi,W.isBefore=qi,W.isBetween=$i,W.isSame=Bi,W.isSameOrAfter=Ji,W.isSameOrBefore=Qi,W.isValid=br,W.lang=lr,W.locale=ur,W.localeData=fr,W.max=ei,W.min=Kn,W.parsingFlags=Or,W.set=We,W.startOf=pr,W.subtract=Hi,W.toArray=Sr,W.toObject=Dr,W.toDate=kr,W.toISOString=tr,W.inspect=nr,typeof Symbol!=="undefined"&&Symbol.for!=null)W[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"};function fs(e){return P(e*1e3)}function ds(){return P.apply(null,arguments).parseZone()}function hs(e){return e}W.toJSON=Yr,W.toString=er,W.unix=Mr,W.valueOf=vr,W.creationData=Tr,W.eraName=Wr,W.eraNarrow=Cr,W.eraAbbr=Lr,W.eraYear=Ur,W.year=kt,W.isLeapYear=St,W.weekYear=zr,W.isoWeekYear=qr,W.quarter=W.quarters=es,W.month=yt,W.daysInMonth=gt,W.week=W.weeks=Wt,W.isoWeek=W.isoWeeks=Ct,W.weeksInYear=Jr,W.weeksInWeekYear=Qr,W.isoWeeksInYear=$r,W.isoWeeksInISOWeekYear=Br,W.date=ts,W.day=W.days=Bt,W.weekday=Jt,W.isoWeekday=Qt,W.dayOfYear=ns,W.hour=W.hours=ln,W.minute=W.minutes=is,W.second=W.seconds=rs,W.millisecond=W.milliseconds=as,W.utcOffset=pi,W.utc=vi,W.local=Mi,W.parseZone=ki,W.hasAlignedHourOffset=Si,W.isDST=Di,W.isLocal=bi,W.isUtcOffset=Oi,W.isUtc=xi,W.isUTC=xi,W.zoneAbbr=us,W.zoneName=ls,W.dates=e("dates accessor is deprecated. Use date instead.",ts),W.months=e("months accessor is deprecated. Use month instead",yt),W.years=e("years accessor is deprecated. Use year instead",kt),W.zone=e("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",wi),W.isDSTShifted=e("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",Yi);var C=ie.prototype;function cs(e,t,n,i){var r=kn(),s=f().set(i,t);return r[n](s,e)}function ms(e,t,n){if(l(e)){t=e;e=undefined}e=e||"";if(t!=null)return cs(e,t,n,"month");var i,r=[];for(i=0;i<12;i++)r[i]=cs(e,i,n,"month");return r}function _s(e,t,n,i){if(typeof e==="boolean"){if(l(t)){n=t;t=undefined}t=t||""}else{t=e;n=t;e=false;if(l(t)){n=t;t=undefined}t=t||""}var r=kn(),s=e?r._week.dow:0,a,o=[];if(n!=null)return cs(t,(n+s)%7,i,"day");for(a=0;a<7;a++)o[a]=cs(t,(a+s)%7,i,"day");return o}function ys(e,t){return ms(e,t,"months")}function gs(e,t){return ms(e,t,"monthsShort")}function ps(e,t,n){return _s(e,t,n,"weekdays")}function ws(e,t,n){return _s(e,t,n,"weekdaysShort")}function vs(e,t,n){return _s(e,t,n,"weekdaysMin")}C.calendar=se,C.longDateFormat=_e,C.invalidDate=ge,C.ordinal=ve,C.preparse=hs,C.postformat=hs,C.relativeTime=ke,C.pastFuture=Se,C.set=te,C.eras=Nr,C.erasParse=Pr,C.erasConvertYear=Rr,C.erasAbbrRegex=Fr,C.erasNameRegex=Hr,C.erasNarrowRegex=Er,C.months=dt,C.monthsShort=ht,C.monthsParse=mt,C.monthsRegex=wt,C.monthsShortRegex=pt,C.week=Tt,C.firstDayOfYear=Rt,C.firstDayOfWeek=Pt,C.weekdays=It,C.weekdaysMin=zt,C.weekdaysShort=Zt,C.weekdaysParse=$t,C.weekdaysRegex=Xt,C.weekdaysShortRegex=Kt,C.weekdaysMinRegex=en,C.isPM=on,C.meridiem=fn,wn("en",{eras:[{since:"0001-01-01",until:+Infinity,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-Infinity,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=g(e%100/10)===1?"th":t===1?"st":t===2?"nd":t===3?"rd":"th";return e+n}}),d.lang=e("moment.lang is deprecated. Use moment.locale instead.",wn),d.langData=e("moment.langData is deprecated. Use moment.localeData instead.",kn);var Ms=Math.abs;function ks(){var e=this._data;this._milliseconds=Ms(this._milliseconds);this._days=Ms(this._days);this._months=Ms(this._months);e.milliseconds=Ms(e.milliseconds);e.seconds=Ms(e.seconds);e.minutes=Ms(e.minutes);e.hours=Ms(e.hours);e.months=Ms(e.months);e.years=Ms(e.years);return this}function Ss(e,t,n,i){var r=R(t,n);e._milliseconds+=i*r._milliseconds;e._days+=i*r._days;e._months+=i*r._months;return e._bubble()}function Ds(e,t){return Ss(this,e,t,1)}function Ys(e,t){return Ss(this,e,t,-1)}function bs(e){if(e<0)return Math.floor(e);else return Math.ceil(e)}function Os(){var e=this._milliseconds,t=this._days,n=this._months,i=this._data,r,s,a,o,u;if(!(e>=0&&t>=0&&n>=0||e<=0&&t<=0&&n<=0)){e+=bs(Ts(n)+t)*864e5;t=0;n=0}i.milliseconds=e%1e3;r=y(e/1e3);i.seconds=r%60;s=y(r/60);i.minutes=s%60;a=y(s/60);i.hours=a%24;t+=y(a/24);u=y(xs(t));n+=u;t-=bs(Ts(u));o=y(n/12);n%=12;i.days=t;i.months=n;i.years=o;return this}function xs(e){return e*4800/146097}function Ts(e){return e*146097/4800}function Ns(e){if(!this.isValid())return NaN;var t,n,i=this._milliseconds;e=_(e);if(e==="month"||e==="quarter"||e==="year"){t=this._days+i/864e5;n=this._months+xs(t);switch(e){case"month":return n;case"quarter":return n/3;case"year":return n/12}}else{t=this._days+Math.round(Ts(this._months));switch(e){case"week":return t/7+i/6048e5;case"day":return t+i/864e5;case"hour":return t*24+i/36e5;case"minute":return t*1440+i/6e4;case"second":return t*86400+i/1e3;case"millisecond":return Math.floor(t*864e5)+i;default:throw new Error("Unknown unit "+e)}}}function Ps(){if(!this.isValid())return NaN;return this._milliseconds+this._days*864e5+this._months%12*2592e6+g(this._months/12)*31536e6}function Rs(e){return function(){return this.as(e)}}var Ws=Rs("ms"),Cs=Rs("s"),Ls=Rs("m"),Us=Rs("h"),Hs=Rs("d"),Fs=Rs("w"),Es=Rs("M"),Vs=Rs("Q"),Gs=Rs("y");function As(){return R(this)}function js(e){e=_(e);return this.isValid()?this[e+"s"]():NaN}function Is(e){return function(){return this.isValid()?this._data[e]:NaN}}var Zs=Is("milliseconds"),zs=Is("seconds"),qs=Is("minutes"),$s=Is("hours"),Bs=Is("days"),Js=Is("months"),Qs=Is("years");function Xs(){return y(this.days()/7)}var Ks=Math.round,ea={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function ta(e,t,n,i,r){return r.relativeTime(t||1,!!n,e,i)}function na(e,t,n,i){var r=R(e).abs(),s=Ks(r.as("s")),a=Ks(r.as("m")),o=Ks(r.as("h")),u=Ks(r.as("d")),l=Ks(r.as("M")),f=Ks(r.as("w")),d=Ks(r.as("y")),h=s<=n.ss&&["s",s]||s<n.s&&["ss",s]||a<=1&&["m"]||a<n.m&&["mm",a]||o<=1&&["h"]||o<n.h&&["hh",o]||u<=1&&["d"]||u<n.d&&["dd",u];if(n.w!=null)h=h||f<=1&&["w"]||f<n.w&&["ww",f];h=h||l<=1&&["M"]||l<n.M&&["MM",l]||d<=1&&["y"]||["yy",d];h[2]=t;h[3]=+e>0;h[4]=i;return ta.apply(null,h)}function ia(e){if(e===undefined)return Ks;if(typeof e==="function"){Ks=e;return true}return false}function ra(e,t){if(ea[e]===undefined)return false;if(t===undefined)return ea[e];ea[e]=t;if(e==="s")ea.ss=t-1;return true}function sa(e,t){if(!this.isValid())return this.localeData().invalidDate();var n=false,i=ea,r,s;if(typeof e==="object"){t=e;e=false}if(typeof e==="boolean")n=e;if(typeof t==="object"){i=Object.assign({},ea,t);if(t.s!=null&&t.ss==null)i.ss=t.s-1}r=this.localeData();s=na(this,!n,i,r);if(n)s=r.pastFuture(+this,s);return r.postformat(s)}var aa=Math.abs;function oa(e){return(e>0)-(e<0)||+e}function ua(){if(!this.isValid())return this.localeData().invalidDate();var e=aa(this._milliseconds)/1e3,t=aa(this._days),n=aa(this._months),i,r,s,a,o=this.asSeconds(),u,l,f,d;if(!o)return"P0D";i=y(e/60);r=y(i/60);e%=60;i%=60;s=y(n/12);n%=12;a=e?e.toFixed(3).replace(/\.?0+$/,""):"";u=o<0?"-":"";l=oa(this._months)!==oa(o)?"-":"";f=oa(this._days)!==oa(o)?"-":"";d=oa(this._milliseconds)!==oa(o)?"-":"";return u+"P"+(s?l+s+"Y":"")+(n?l+n+"M":"")+(t?f+t+"D":"")+(r||i||e?"T":"")+(r?d+r+"H":"")+(i?d+i+"M":"")+(e?d+a+"S":"")}var L=li.prototype;return L.isValid=oi,L.abs=ks,L.add=Ds,L.subtract=Ys,L.as=Ns,L.asMilliseconds=Ws,L.asSeconds=Cs,L.asMinutes=Ls,L.asHours=Us,L.asDays=Hs,L.asWeeks=Fs,L.asMonths=Es,L.asQuarters=Vs,L.asYears=Gs,L.valueOf=Ps,L._bubble=Os,L.clone=As,L.get=js,L.milliseconds=Zs,L.seconds=zs,L.minutes=qs,L.hours=$s,L.days=Bs,L.weeks=Xs,L.months=Js,L.years=Qs,L.humanize=sa,L.toISOString=ua,L.toString=ua,L.toJSON=ua,L.locale=ur,L.localeData=fr,L.toIsoString=e("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",ua),L.lang=lr,i("X",0,0,"unix"),i("x",0,0,"valueOf"),w("x",Ie),w("X",qe),M("X",function(e,t,n){n._d=new Date(parseFloat(e)*1e3)}),M("x",function(e,t,n){n._d=new Date(g(e))}),d.version="2.29.4",F(P),d.fn=W,d.min=ni,d.max=ii,d.now=ri,d.utc=f,d.unix=fs,d.months=ys,d.isDate=G,d.locale=wn,d.invalid=z,d.duration=R,d.isMoment=c,d.weekdays=ps,d.parseZone=ds,d.localeData=kn,d.isDuration=fi,d.monthsShort=gs,d.weekdaysMin=vs,d.defineLocale=vn,d.updateLocale=Mn,d.locales=Sn,d.weekdaysShort=ws,d.normalizeUnits=_,d.relativeTimeRounding=ia,d.relativeTimeThreshold=ra,d.calendarFormat=ji,d.prototype=W,d.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},d}()}},i={};function k(e){var t=i[e];if(void 0!==t)return t.exports;t=i[e]={id:e,loaded:!1,exports:{}};return n[e].call(t.exports,t,t.exports,k),t.loaded=!0,t.exports}k.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return k.d(t,{a:t}),t},k.d=(e,t)=>{for(var n in t)k.o(t,n)&&!k.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},k.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),k.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},k.nmd=e=>(e.paths=[],e.children||(e.children=[]),e);var S={};(()=>{"use strict";k.r(S);function e(){r=document.querySelector("#release-date"),s=document.querySelector("#release-days"),a=document.querySelector("#release-hours"),o=document.querySelector("#release-minutes"),u=document.querySelector("#release-seconds"),(l=document.querySelector(".subscription-form"))&&(f=l.querySelector("#name"),d=l.querySelector("#email"),h=l.querySelector("#submit-btn"))}function t(){l&&(h.addEventListener("click",p),f.addEventListener("focusin",M),d.addEventListener("focusin",M),f.addEventListener("focusout",w),d.addEventListener("focusout",v))}function n(){r&&(r.setAttribute("datetime",_.format("YYYY-MM-DD")),r.innerText=_.format("D MMM YYYY"))}function i(){var e=m()(),e=m().duration(_-e);s&&(s.innerText=g(e.days())),a&&(a.innerText=g(e.hours())),o&&(o.innerText=g(e.minutes())),u&&(u.innerText=g(e.seconds()))}var r,s,a,o,u,l,f,d,h,c=k("./node_modules/moment/moment.js"),m=k.n(c),_=(l&&(l.querySelector("#name"),l.querySelector("#email"),l.querySelector("#submit-btn")),m()().add(30,"days").startOf("day")),y=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,g=function(e){return"".concat(e<10?0:"").concat(e)},p=function(e){e.preventDefault(),w(),v()},w=function(){f.classList.toggle("error",!f.value)},v=function(){d.classList.toggle("error",!d.value||!email.value.match(y))},M=function(e){e.target.classList.remove("error")};document.addEventListener("DOMContentLoaded",function(){e(),t(),n(),i(),setInterval(i,1e3)})})()})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6L3BhZ2Uvbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvIHN5bmMgL2IvQiIsIndlYnBhY2s6Ly9wYWdlL25vZGVfbW9kdWxlcy9tb21lbnQvbW9tZW50LmpzIiwid2VicGFjazovL3BhZ2Uvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi9wYWdlL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovcGFnZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi9wYWdlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi9wYWdlL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi9wYWdlL3dlYnBhY2svcnVudGltZS9ub2RlIG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vcGFnZS9zcmMvanMvbWFpbi5qcyJdLCJuYW1lcyI6WyJ3ZWJwYWNrRW1wdHlDb250ZXh0IiwicmVxIiwiZSIsIkVycm9yIiwiY29kZSIsImtleXMiLCJyZXNvbHZlIiwiaWQiLCJtb2R1bGUiLCJleHBvcnRzIiwiaG9va0NhbGxiYWNrIiwic29tZSIsImhvb2tzIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJzZXRIb29rQ2FsbGJhY2siLCJjYWxsYmFjayIsImlzQXJyYXkiLCJpbnB1dCIsIkFycmF5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiaXNPYmplY3QiLCJoYXNPd25Qcm9wIiwiYSIsImIiLCJoYXNPd25Qcm9wZXJ0eSIsImlzT2JqZWN0RW1wdHkiLCJvYmoiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwibGVuZ3RoIiwiayIsImlzVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJEYXRlIiwibWFwIiwiYXJyIiwiZm4iLCJyZXMiLCJpIiwiYXJyTGVuIiwicHVzaCIsImV4dGVuZCIsInZhbHVlT2YiLCJjcmVhdGVVVEMiLCJmb3JtYXQiLCJsb2NhbGUiLCJzdHJpY3QiLCJjcmVhdGVMb2NhbE9yVVRDIiwidXRjIiwiZGVmYXVsdFBhcnNpbmdGbGFncyIsImVtcHR5IiwidW51c2VkVG9rZW5zIiwidW51c2VkSW5wdXQiLCJvdmVyZmxvdyIsImNoYXJzTGVmdE92ZXIiLCJudWxsSW5wdXQiLCJpbnZhbGlkRXJhIiwiaW52YWxpZE1vbnRoIiwiaW52YWxpZEZvcm1hdCIsInVzZXJJbnZhbGlkYXRlZCIsImlzbyIsInBhcnNlZERhdGVQYXJ0cyIsImVyYSIsIm1lcmlkaWVtIiwicmZjMjgyMiIsIndlZWtkYXlNaXNtYXRjaCIsImdldFBhcnNpbmdGbGFncyIsIm0iLCJfcGYiLCJmdW4iLCJ0IiwidGhpcyIsImxlbiIsImlzVmFsaWQiLCJfaXNWYWxpZCIsImZsYWdzIiwicGFyc2VkUGFydHMiLCJpc05vd1ZhbGlkIiwiaXNOYU4iLCJfZCIsImdldFRpbWUiLCJpbnZhbGlkV2Vla2RheSIsIl9zdHJpY3QiLCJiaWdIb3VyIiwidW5kZWZpbmVkIiwiaXNGcm96ZW4iLCJjcmVhdGVJbnZhbGlkIiwiTmFOIiwibW9tZW50UHJvcGVydGllcyIsInVwZGF0ZUluUHJvZ3Jlc3MiLCJjb3B5Q29uZmlnIiwidG8iLCJmcm9tIiwicHJvcCIsInZhbCIsIm1vbWVudFByb3BlcnRpZXNMZW4iLCJfaXNBTW9tZW50T2JqZWN0IiwiX2kiLCJfZiIsIl9sIiwiX3R6bSIsIl9pc1VUQyIsIl9vZmZzZXQiLCJfbG9jYWxlIiwiTW9tZW50IiwiY29uZmlnIiwidXBkYXRlT2Zmc2V0IiwiaXNNb21lbnQiLCJ3YXJuIiwibXNnIiwic3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzIiwiY29uc29sZSIsImRlcHJlY2F0ZSIsImZpcnN0VGltZSIsImRlcHJlY2F0aW9uSGFuZGxlciIsImFyZ3MiLCJhcmciLCJrZXkiLCJhcmdMZW4iLCJzbGljZSIsImpvaW4iLCJzdGFjayIsImRlcHJlY2F0aW9ucyIsImRlcHJlY2F0ZVNpbXBsZSIsIm5hbWUiLCJpc0Z1bmN0aW9uIiwiRnVuY3Rpb24iLCJzZXQiLCJfY29uZmlnIiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50IiwiUmVnRXhwIiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2UiLCJzb3VyY2UiLCJfb3JkaW5hbFBhcnNlIiwibWVyZ2VDb25maWdzIiwicGFyZW50Q29uZmlnIiwiY2hpbGRDb25maWciLCJMb2NhbGUiLCJkZWZhdWx0Q2FsZW5kYXIiLCJzYW1lRGF5IiwibmV4dERheSIsIm5leHRXZWVrIiwibGFzdERheSIsImxhc3RXZWVrIiwic2FtZUVsc2UiLCJjYWxlbmRhciIsIm1vbSIsIm5vdyIsIm91dHB1dCIsIl9jYWxlbmRhciIsInplcm9GaWxsIiwibnVtYmVyIiwidGFyZ2V0TGVuZ3RoIiwiZm9yY2VTaWduIiwiYWJzTnVtYmVyIiwiTWF0aCIsImFicyIsInplcm9zVG9GaWxsIiwic2lnbiIsInBvdyIsIm1heCIsInN1YnN0ciIsImZvcm1hdHRpbmdUb2tlbnMiLCJsb2NhbEZvcm1hdHRpbmdUb2tlbnMiLCJmb3JtYXRGdW5jdGlvbnMiLCJmb3JtYXRUb2tlbkZ1bmN0aW9ucyIsImFkZEZvcm1hdFRva2VuIiwidG9rZW4iLCJwYWRkZWQiLCJvcmRpbmFsIiwiZnVuYyIsImxvY2FsZURhdGEiLCJyZW1vdmVGb3JtYXR0aW5nVG9rZW5zIiwibWF0Y2giLCJyZXBsYWNlIiwibWFrZUZvcm1hdEZ1bmN0aW9uIiwiYXJyYXkiLCJmb3JtYXRNb21lbnQiLCJpbnZhbGlkRGF0ZSIsImV4cGFuZEZvcm1hdCIsInJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyIsImxvbmdEYXRlRm9ybWF0IiwibGFzdEluZGV4IiwidGVzdCIsImRlZmF1bHRMb25nRGF0ZUZvcm1hdCIsIkxUUyIsIkxUIiwiTCIsIkxMIiwiTExMIiwiTExMTCIsIl9sb25nRGF0ZUZvcm1hdCIsImZvcm1hdFVwcGVyIiwidG9VcHBlckNhc2UiLCJ0b2siLCJkZWZhdWx0SW52YWxpZERhdGUiLCJfaW52YWxpZERhdGUiLCJkZWZhdWx0T3JkaW5hbCIsImRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwiX29yZGluYWwiLCJkZWZhdWx0UmVsYXRpdmVUaW1lIiwiZnV0dXJlIiwicGFzdCIsInMiLCJzcyIsIm1tIiwiaCIsImhoIiwiZCIsImRkIiwidyIsInd3IiwiTSIsIk1NIiwieSIsInl5IiwicmVsYXRpdmVUaW1lIiwid2l0aG91dFN1ZmZpeCIsInN0cmluZyIsImlzRnV0dXJlIiwiX3JlbGF0aXZlVGltZSIsInBhc3RGdXR1cmUiLCJkaWZmIiwiYWxpYXNlcyIsImFkZFVuaXRBbGlhcyIsInVuaXQiLCJzaG9ydGhhbmQiLCJsb3dlckNhc2UiLCJ0b0xvd2VyQ2FzZSIsIm5vcm1hbGl6ZVVuaXRzIiwidW5pdHMiLCJub3JtYWxpemVPYmplY3RVbml0cyIsImlucHV0T2JqZWN0Iiwibm9ybWFsaXplZElucHV0Iiwibm9ybWFsaXplZFByb3AiLCJwcmlvcml0aWVzIiwiYWRkVW5pdFByaW9yaXR5IiwicHJpb3JpdHkiLCJnZXRQcmlvcml0aXplZFVuaXRzIiwidW5pdHNPYmoiLCJ1Iiwic29ydCIsImlzTGVhcFllYXIiLCJ5ZWFyIiwiYWJzRmxvb3IiLCJjZWlsIiwiZmxvb3IiLCJ0b0ludCIsImFyZ3VtZW50Rm9yQ29lcmNpb24iLCJjb2VyY2VkTnVtYmVyIiwidmFsdWUiLCJpc0Zpbml0ZSIsIm1ha2VHZXRTZXQiLCJrZWVwVGltZSIsInNldCQxIiwiZ2V0IiwibW9udGgiLCJkYXRlIiwiZGF5c0luTW9udGgiLCJzdHJpbmdHZXQiLCJzdHJpbmdTZXQiLCJwcmlvcml0aXplZCIsInByaW9yaXRpemVkTGVuIiwibWF0Y2gxIiwibWF0Y2gyIiwibWF0Y2gzIiwibWF0Y2g0IiwibWF0Y2g2IiwibWF0Y2gxdG8yIiwibWF0Y2gzdG80IiwibWF0Y2g1dG82IiwibWF0Y2gxdG8zIiwibWF0Y2gxdG80IiwibWF0Y2gxdG82IiwibWF0Y2hVbnNpZ25lZCIsIm1hdGNoU2lnbmVkIiwibWF0Y2hPZmZzZXQiLCJtYXRjaFNob3J0T2Zmc2V0IiwibWF0Y2hUaW1lc3RhbXAiLCJtYXRjaFdvcmQiLCJyZWdleGVzIiwiYWRkUmVnZXhUb2tlbiIsInJlZ2V4Iiwic3RyaWN0UmVnZXgiLCJpc1N0cmljdCIsImdldFBhcnNlUmVnZXhGb3JUb2tlbiIsInVuZXNjYXBlRm9ybWF0IiwicmVnZXhFc2NhcGUiLCJtYXRjaGVkIiwicDEiLCJwMiIsInAzIiwicDQiLCJ0b2tlbnMiLCJhZGRQYXJzZVRva2VuIiwidG9rZW5MZW4iLCJhZGRXZWVrUGFyc2VUb2tlbiIsIl93IiwiYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4iLCJfYSIsIllFQVIiLCJNT05USCIsIkRBVEUiLCJIT1VSIiwiTUlOVVRFIiwiU0VDT05EIiwiTUlMTElTRUNPTkQiLCJXRUVLIiwiV0VFS0RBWSIsImluZGV4T2YiLCJtb2QiLCJuIiwieCIsIm8iLCJtb2RNb250aCIsIm1vbnRoc1Nob3J0IiwibW9udGhzIiwibW9udGhzU2hvcnRSZWdleCIsIm1vbnRoc1JlZ2V4IiwibW9udGhzUGFyc2UiLCJkZWZhdWx0TG9jYWxlTW9udGhzIiwic3BsaXQiLCJkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQiLCJNT05USFNfSU5fRk9STUFUIiwiZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXgiLCJkZWZhdWx0TW9udGhzUmVnZXgiLCJsb2NhbGVNb250aHMiLCJfbW9udGhzIiwiaXNGb3JtYXQiLCJsb2NhbGVNb250aHNTaG9ydCIsIl9tb250aHNTaG9ydCIsImhhbmRsZVN0cmljdFBhcnNlIiwibW9udGhOYW1lIiwiaWkiLCJsbGMiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsIl9tb250aHNQYXJzZSIsIl9sb25nTW9udGhzUGFyc2UiLCJfc2hvcnRNb250aHNQYXJzZSIsImxvY2FsZU1vbnRoc1BhcnNlIiwiX21vbnRoc1BhcnNlRXhhY3QiLCJzZXRNb250aCIsImRheU9mTW9udGgiLCJtaW4iLCJnZXRTZXRNb250aCIsImdldERheXNJbk1vbnRoIiwiY29tcHV0ZU1vbnRoc1BhcnNlIiwiX21vbnRoc1Nob3J0U3RyaWN0UmVnZXgiLCJfbW9udGhzU2hvcnRSZWdleCIsIl9tb250aHNTdHJpY3RSZWdleCIsIl9tb250aHNSZWdleCIsImNtcExlblJldiIsInNob3J0UGllY2VzIiwibG9uZ1BpZWNlcyIsIm1peGVkUGllY2VzIiwiZGF5c0luWWVhciIsInBhcnNlVHdvRGlnaXRZZWFyIiwicGFyc2VJbnQiLCJnZXRTZXRZZWFyIiwiZ2V0SXNMZWFwWWVhciIsImNyZWF0ZURhdGUiLCJtcyIsImdldEZ1bGxZZWFyIiwic2V0RnVsbFllYXIiLCJjcmVhdGVVVENEYXRlIiwiVVRDIiwiZ2V0VVRDRnVsbFllYXIiLCJzZXRVVENGdWxsWWVhciIsImZpcnN0V2Vla09mZnNldCIsImRvdyIsImRveSIsImZ3ZCIsImZ3ZGx3IiwiZ2V0VVRDRGF5IiwiZGF5T2ZZZWFyRnJvbVdlZWtzIiwid2VlayIsIndlZWtkYXkiLCJsb2NhbFdlZWtkYXkiLCJ3ZWVrT2Zmc2V0IiwiZGF5T2ZZZWFyIiwicmVzWWVhciIsInJlc0RheU9mWWVhciIsIndlZWtPZlllYXIiLCJyZXNXZWVrIiwid2Vla3NJblllYXIiLCJ3ZWVrT2Zmc2V0TmV4dCIsImxvY2FsZVdlZWsiLCJfd2VlayIsImRlZmF1bHRMb2NhbGVXZWVrIiwibG9jYWxlRmlyc3REYXlPZldlZWsiLCJsb2NhbGVGaXJzdERheU9mWWVhciIsImdldFNldFdlZWsiLCJhZGQiLCJnZXRTZXRJU09XZWVrIiwicGFyc2VXZWVrZGF5Iiwid2Vla2RheXNQYXJzZSIsInBhcnNlSXNvV2Vla2RheSIsInNoaWZ0V2Vla2RheXMiLCJ3cyIsImNvbmNhdCIsIndlZWtkYXlzTWluIiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzIiwid2Vla2RheXNNaW5SZWdleCIsIndlZWtkYXlzU2hvcnRSZWdleCIsIndlZWtkYXlzUmVnZXgiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXMiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCIsImRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiIsImRlZmF1bHRXZWVrZGF5c1JlZ2V4IiwiZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleCIsImRlZmF1bHRXZWVrZGF5c01pblJlZ2V4IiwibG9jYWxlV2Vla2RheXMiLCJfd2Vla2RheXMiLCJkYXkiLCJsb2NhbGVXZWVrZGF5c1Nob3J0IiwiX3dlZWtkYXlzU2hvcnQiLCJsb2NhbGVXZWVrZGF5c01pbiIsIl93ZWVrZGF5c01pbiIsImhhbmRsZVN0cmljdFBhcnNlJDEiLCJ3ZWVrZGF5TmFtZSIsIl93ZWVrZGF5c1BhcnNlIiwiX3Nob3J0V2Vla2RheXNQYXJzZSIsIl9taW5XZWVrZGF5c1BhcnNlIiwibG9jYWxlV2Vla2RheXNQYXJzZSIsIl93ZWVrZGF5c1BhcnNlRXhhY3QiLCJfZnVsbFdlZWtkYXlzUGFyc2UiLCJnZXRTZXREYXlPZldlZWsiLCJnZXREYXkiLCJnZXRTZXRMb2NhbGVEYXlPZldlZWsiLCJnZXRTZXRJU09EYXlPZldlZWsiLCJjb21wdXRlV2Vla2RheXNQYXJzZSIsIl93ZWVrZGF5c1N0cmljdFJlZ2V4IiwiX3dlZWtkYXlzUmVnZXgiLCJfd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4IiwiX3dlZWtkYXlzU2hvcnRSZWdleCIsIl93ZWVrZGF5c01pblN0cmljdFJlZ2V4IiwiX3dlZWtkYXlzTWluUmVnZXgiLCJtaW5QaWVjZXMiLCJtaW5wIiwic2hvcnRwIiwibG9uZ3AiLCJoRm9ybWF0IiwiaG91cnMiLCJrRm9ybWF0IiwibG93ZXJjYXNlIiwibWludXRlcyIsIm1hdGNoTWVyaWRpZW0iLCJfbWVyaWRpZW1QYXJzZSIsImxvY2FsZUlzUE0iLCJjaGFyQXQiLCJzZWNvbmRzIiwia0lucHV0IiwiX2lzUG0iLCJpc1BNIiwiX21lcmlkaWVtIiwicG9zIiwicG9zMSIsInBvczIiLCJkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSIsImdldFNldEhvdXIiLCJsb2NhbGVNZXJpZGllbSIsImlzTG93ZXIiLCJiYXNlQ29uZmlnIiwiZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsIm1lcmlkaWVtUGFyc2UiLCJsb2NhbGVzIiwibG9jYWxlRmFtaWxpZXMiLCJnbG9iYWxMb2NhbGUiLCJjb21tb25QcmVmaXgiLCJhcnIxIiwiYXJyMiIsIm1pbmwiLCJub3JtYWxpemVMb2NhbGUiLCJjaG9vc2VMb2NhbGUiLCJuYW1lcyIsImoiLCJuZXh0IiwibG9hZExvY2FsZSIsImlzTG9jYWxlTmFtZVNhbmUiLCJvbGRMb2NhbGUiLCJhbGlhc2VkUmVxdWlyZSIsIl9hYmJyIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImdldFNldEdsb2JhbExvY2FsZSIsInZhbHVlcyIsImRhdGEiLCJnZXRMb2NhbGUiLCJkZWZpbmVMb2NhbGUiLCJhYmJyIiwicGFyZW50TG9jYWxlIiwiZm9yRWFjaCIsInVwZGF0ZUxvY2FsZSIsInRtcExvY2FsZSIsImxpc3RMb2NhbGVzIiwiY2hlY2tPdmVyZmxvdyIsIl9vdmVyZmxvd0RheU9mWWVhciIsIl9vdmVyZmxvd1dlZWtzIiwiX292ZXJmbG93V2Vla2RheSIsImV4dGVuZGVkSXNvUmVnZXgiLCJiYXNpY0lzb1JlZ2V4IiwidHpSZWdleCIsImlzb0RhdGVzIiwiaXNvVGltZXMiLCJhc3BOZXRKc29uUmVnZXgiLCJvYnNPZmZzZXRzIiwiVVQiLCJHTVQiLCJFRFQiLCJFU1QiLCJDRFQiLCJDU1QiLCJNRFQiLCJNU1QiLCJQRFQiLCJQU1QiLCJjb25maWdGcm9tSVNPIiwibCIsImV4ZWMiLCJhbGxvd1RpbWUiLCJkYXRlRm9ybWF0IiwidGltZUZvcm1hdCIsInR6Rm9ybWF0IiwiaXNvRGF0ZXNMZW4iLCJpc29UaW1lc0xlbiIsImNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQiLCJleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzIiwieWVhclN0ciIsIm1vbnRoU3RyIiwiZGF5U3RyIiwiaG91clN0ciIsIm1pbnV0ZVN0ciIsInNlY29uZFN0ciIsInJlc3VsdCIsInVudHJ1bmNhdGVZZWFyIiwicHJlcHJvY2Vzc1JGQzI4MjIiLCJjaGVja1dlZWtkYXkiLCJ3ZWVrZGF5U3RyIiwicGFyc2VkSW5wdXQiLCJ3ZWVrZGF5UHJvdmlkZWQiLCJ3ZWVrZGF5QWN0dWFsIiwiY2FsY3VsYXRlT2Zmc2V0Iiwib2JzT2Zmc2V0IiwibWlsaXRhcnlPZmZzZXQiLCJudW1PZmZzZXQiLCJobSIsImNvbmZpZ0Zyb21SRkMyODIyIiwicGFyc2VkQXJyYXkiLCJzZXRVVENNaW51dGVzIiwiZ2V0VVRDTWludXRlcyIsImNvbmZpZ0Zyb21TdHJpbmciLCJjcmVhdGVGcm9tSW5wdXRGYWxsYmFjayIsImRlZmF1bHRzIiwiYyIsImN1cnJlbnREYXRlQXJyYXkiLCJub3dWYWx1ZSIsIl91c2VVVEMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRNb250aCIsImdldERhdGUiLCJjb25maWdGcm9tQXJyYXkiLCJjdXJyZW50RGF0ZSIsImV4cGVjdGVkV2Vla2RheSIsInllYXJUb1VzZSIsImRheU9mWWVhckZyb21XZWVrSW5mbyIsIl9kYXlPZlllYXIiLCJfbmV4dERheSIsIndlZWtZZWFyIiwidGVtcCIsIndlZWtkYXlPdmVyZmxvdyIsImN1cldlZWsiLCJHRyIsIlciLCJFIiwiY3JlYXRlTG9jYWwiLCJnZyIsIklTT184NjAxIiwiUkZDXzI4MjIiLCJza2lwcGVkIiwic3RyaW5nTGVuZ3RoIiwidG90YWxQYXJzZWRJbnB1dExlbmd0aCIsIm1lcmlkaWVtRml4V3JhcCIsImVyYXNDb252ZXJ0WWVhciIsImhvdXIiLCJpc1BtIiwibWVyaWRpZW1Ib3VyIiwiY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5IiwidGVtcENvbmZpZyIsImJlc3RNb21lbnQiLCJzY29yZVRvQmVhdCIsImN1cnJlbnRTY29yZSIsInZhbGlkRm9ybWF0Rm91bmQiLCJiZXN0Rm9ybWF0SXNWYWxpZCIsImNvbmZpZ2ZMZW4iLCJzY29yZSIsImNvbmZpZ0Zyb21PYmplY3QiLCJkYXlPckRhdGUiLCJtaW51dGUiLCJzZWNvbmQiLCJtaWxsaXNlY29uZCIsImNyZWF0ZUZyb21Db25maWciLCJwcmVwYXJlQ29uZmlnIiwicHJlcGFyc2UiLCJjb25maWdGcm9tSW5wdXQiLCJpc1VUQyIsInByb3RvdHlwZU1pbiIsIm90aGVyIiwicHJvdG90eXBlTWF4IiwicGlja0J5IiwibW9tZW50cyIsIm9yZGVyaW5nIiwiaXNEdXJhdGlvblZhbGlkIiwidW5pdEhhc0RlY2ltYWwiLCJvcmRlckxlbiIsInBhcnNlRmxvYXQiLCJpc1ZhbGlkJDEiLCJjcmVhdGVJbnZhbGlkJDEiLCJjcmVhdGVEdXJhdGlvbiIsIkR1cmF0aW9uIiwiZHVyYXRpb24iLCJ5ZWFycyIsInF1YXJ0ZXJzIiwicXVhcnRlciIsIndlZWtzIiwiaXNvV2VlayIsImRheXMiLCJtaWxsaXNlY29uZHMiLCJfbWlsbGlzZWNvbmRzIiwiX2RheXMiLCJfZGF0YSIsIl9idWJibGUiLCJpc0R1cmF0aW9uIiwiYWJzUm91bmQiLCJyb3VuZCIsImNvbXBhcmVBcnJheXMiLCJhcnJheTEiLCJhcnJheTIiLCJkb250Q29udmVydCIsImxlbmd0aERpZmYiLCJkaWZmcyIsIm9mZnNldCIsInNlcGFyYXRvciIsInV0Y09mZnNldCIsIm9mZnNldEZyb21TdHJpbmciLCJjaHVua09mZnNldCIsIm1hdGNoZXIiLCJtYXRjaGVzIiwiY2h1bmsiLCJwYXJ0cyIsImNsb25lV2l0aE9mZnNldCIsIm1vZGVsIiwiY2xvbmUiLCJzZXRUaW1lIiwibG9jYWwiLCJnZXREYXRlT2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJnZXRTZXRPZmZzZXQiLCJrZWVwTG9jYWxUaW1lIiwia2VlcE1pbnV0ZXMiLCJsb2NhbEFkanVzdCIsIl9jaGFuZ2VJblByb2dyZXNzIiwiYWRkU3VidHJhY3QiLCJnZXRTZXRab25lIiwic2V0T2Zmc2V0VG9VVEMiLCJzZXRPZmZzZXRUb0xvY2FsIiwic3VidHJhY3QiLCJzZXRPZmZzZXRUb1BhcnNlZE9mZnNldCIsInRab25lIiwiaGFzQWxpZ25lZEhvdXJPZmZzZXQiLCJpc0RheWxpZ2h0U2F2aW5nVGltZSIsImlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCIsIl9pc0RTVFNoaWZ0ZWQiLCJ0b0FycmF5IiwiaXNMb2NhbCIsImlzVXRjT2Zmc2V0IiwiaXNVdGMiLCJhc3BOZXRSZWdleCIsImlzb1JlZ2V4IiwicmV0IiwiZGlmZlJlcyIsInBhcnNlSXNvIiwibW9tZW50c0RpZmZlcmVuY2UiLCJpbnAiLCJwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlIiwiYmFzZSIsImlzQWZ0ZXIiLCJpc0JlZm9yZSIsImNyZWF0ZUFkZGVyIiwiZGlyZWN0aW9uIiwicGVyaW9kIiwiZHVyIiwidG1wIiwiaXNBZGRpbmciLCJpbnZhbGlkIiwiaXNTdHJpbmciLCJTdHJpbmciLCJpc01vbWVudElucHV0IiwiaXNOdW1iZXJPclN0cmluZ0FycmF5IiwiaXNNb21lbnRJbnB1dE9iamVjdCIsIm9iamVjdFRlc3QiLCJwcm9wZXJ0eVRlc3QiLCJwcm9wZXJ0aWVzIiwicHJvcGVydHkiLCJwcm9wZXJ0eUxlbiIsImFycmF5VGVzdCIsImRhdGFUeXBlVGVzdCIsImZpbHRlciIsIml0ZW0iLCJpc0NhbGVuZGFyU3BlYyIsImdldENhbGVuZGFyRm9ybWF0IiwibXlNb21lbnQiLCJjYWxlbmRhciQxIiwidGltZSIsImZvcm1hdHMiLCJzb2QiLCJzdGFydE9mIiwiY2FsZW5kYXJGb3JtYXQiLCJsb2NhbElucHV0IiwiZW5kT2YiLCJpc0JldHdlZW4iLCJpbmNsdXNpdml0eSIsImxvY2FsRnJvbSIsImxvY2FsVG8iLCJpc1NhbWUiLCJpbnB1dE1zIiwiaXNTYW1lT3JBZnRlciIsImlzU2FtZU9yQmVmb3JlIiwiYXNGbG9hdCIsInRoYXQiLCJ6b25lRGVsdGEiLCJtb250aERpZmYiLCJ3aG9sZU1vbnRoRGlmZiIsImFuY2hvciIsImFuY2hvcjIiLCJhZGp1c3QiLCJ0b0lTT1N0cmluZyIsImtlZXBPZmZzZXQiLCJ0b0RhdGUiLCJpbnNwZWN0Iiwiem9uZSIsInByZWZpeCIsImRhdGV0aW1lIiwic3VmZml4IiwiaW5wdXRTdHJpbmciLCJkZWZhdWx0Rm9ybWF0VXRjIiwiZGVmYXVsdEZvcm1hdCIsInBvc3Rmb3JtYXQiLCJodW1hbml6ZSIsImZyb21Ob3ciLCJ0b05vdyIsIm5ld0xvY2FsZURhdGEiLCJsYW5nIiwiTVNfUEVSX1NFQ09ORCIsIk1TX1BFUl9NSU5VVEUiLCJNU19QRVJfSE9VUiIsIk1TX1BFUl80MDBfWUVBUlMiLCJtb2QkMSIsImRpdmlkZW5kIiwiZGl2aXNvciIsImxvY2FsU3RhcnRPZkRhdGUiLCJ1dGNTdGFydE9mRGF0ZSIsInN0YXJ0T2ZEYXRlIiwiaXNvV2Vla2RheSIsInVuaXgiLCJ0b09iamVjdCIsInRvSlNPTiIsImlzVmFsaWQkMiIsInBhcnNpbmdGbGFncyIsImludmFsaWRBdCIsImNyZWF0aW9uRGF0YSIsImxvY2FsZUVyYXMiLCJlcmFzIiwiX2VyYXMiLCJzaW5jZSIsInVudGlsIiwiSW5maW5pdHkiLCJsb2NhbGVFcmFzUGFyc2UiLCJlcmFOYW1lIiwibmFycm93IiwibG9jYWxlRXJhc0NvbnZlcnRZZWFyIiwiZGlyIiwiZ2V0RXJhTmFtZSIsImdldEVyYU5hcnJvdyIsImdldEVyYUFiYnIiLCJnZXRFcmFZZWFyIiwiZXJhc05hbWVSZWdleCIsImNvbXB1dGVFcmFzUGFyc2UiLCJfZXJhc05hbWVSZWdleCIsIl9lcmFzUmVnZXgiLCJlcmFzQWJiclJlZ2V4IiwiX2VyYXNBYmJyUmVnZXgiLCJlcmFzTmFycm93UmVnZXgiLCJfZXJhc05hcnJvd1JlZ2V4IiwibWF0Y2hFcmFBYmJyIiwibWF0Y2hFcmFOYW1lIiwibWF0Y2hFcmFOYXJyb3ciLCJtYXRjaEVyYVllYXJPcmRpbmFsIiwiX2VyYVllYXJPcmRpbmFsUmVnZXgiLCJhYmJyUGllY2VzIiwibmFtZVBpZWNlcyIsIm5hcnJvd1BpZWNlcyIsImFkZFdlZWtZZWFyRm9ybWF0VG9rZW4iLCJnZXR0ZXIiLCJnZXRTZXRXZWVrWWVhciIsImdldFNldFdlZWtZZWFySGVscGVyIiwiZ2V0U2V0SVNPV2Vla1llYXIiLCJnZXRJU09XZWVrc0luWWVhciIsImdldElTT1dlZWtzSW5JU09XZWVrWWVhciIsImlzb1dlZWtZZWFyIiwiZ2V0V2Vla3NJblllYXIiLCJ3ZWVrSW5mbyIsImdldFdlZWtzSW5XZWVrWWVhciIsIndlZWtzVGFyZ2V0Iiwic2V0V2Vla0FsbCIsImRheU9mWWVhckRhdGEiLCJnZXRTZXRRdWFydGVyIiwiZXJhc1BhcnNlIiwiZXJhWWVhck9yZGluYWxQYXJzZSIsImdldFNldERheU9mTW9udGgiLCJnZXRTZXREYXlPZlllYXIiLCJnZXRTZXRNaW51dGUiLCJnZXRTZXRTZWNvbmQiLCJnZXRTZXRNaWxsaXNlY29uZCIsInBhcnNlTXMiLCJnZXRab25lQWJiciIsImdldFpvbmVOYW1lIiwicHJvdG8iLCJTeW1ib2wiLCJmb3IiLCJjcmVhdGVVbml4IiwiY3JlYXRlSW5ab25lIiwicGFyc2Vab25lIiwicHJlUGFyc2VQb3N0Rm9ybWF0IiwiZXJhTmFycm93IiwiZXJhQWJiciIsImVyYVllYXIiLCJpc29XZWVrcyIsIndlZWtzSW5XZWVrWWVhciIsImlzb1dlZWtzSW5ZZWFyIiwiaXNvV2Vla3NJbklTT1dlZWtZZWFyIiwiaXNEU1QiLCJ6b25lQWJiciIsInpvbmVOYW1lIiwiZGF0ZXMiLCJpc0RTVFNoaWZ0ZWQiLCJwcm90byQxIiwiZ2V0JDEiLCJpbmRleCIsImZpZWxkIiwic2V0dGVyIiwibGlzdE1vbnRoc0ltcGwiLCJvdXQiLCJsaXN0V2Vla2RheXNJbXBsIiwibG9jYWxlU29ydGVkIiwic2hpZnQiLCJsaXN0TW9udGhzIiwibGlzdE1vbnRoc1Nob3J0IiwibGlzdFdlZWtkYXlzIiwibGlzdFdlZWtkYXlzU2hvcnQiLCJsaXN0V2Vla2RheXNNaW4iLCJmaXJzdERheU9mWWVhciIsImZpcnN0RGF5T2ZXZWVrIiwibGFuZ0RhdGEiLCJtYXRoQWJzIiwiYWRkU3VidHJhY3QkMSIsImFkZCQxIiwic3VidHJhY3QkMSIsImFic0NlaWwiLCJidWJibGUiLCJtb250aHNGcm9tRGF5cyIsIm1vbnRoc1RvRGF5cyIsImRheXNUb01vbnRocyIsImFzIiwidmFsdWVPZiQxIiwibWFrZUFzIiwiYWxpYXMiLCJhc01pbGxpc2Vjb25kcyIsImFzU2Vjb25kcyIsImFzTWludXRlcyIsImFzSG91cnMiLCJhc0RheXMiLCJhc1dlZWtzIiwiYXNNb250aHMiLCJhc1F1YXJ0ZXJzIiwiYXNZZWFycyIsImNsb25lJDEiLCJnZXQkMiIsIm1ha2VHZXR0ZXIiLCJ0aHJlc2hvbGRzIiwic3Vic3RpdHV0ZVRpbWVBZ28iLCJyZWxhdGl2ZVRpbWUkMSIsInBvc05lZ0R1cmF0aW9uIiwiZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmciLCJyb3VuZGluZ0Z1bmN0aW9uIiwiZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkIiwidGhyZXNob2xkIiwibGltaXQiLCJhcmdXaXRoU3VmZml4IiwiYXJnVGhyZXNob2xkcyIsIndpdGhTdWZmaXgiLCJ0aCIsImFzc2lnbiIsImFicyQxIiwidG9JU09TdHJpbmckMSIsInRvdGFsIiwidG90YWxTaWduIiwieW1TaWduIiwiZGF5c1NpZ24iLCJobXNTaWduIiwidG9GaXhlZCIsInByb3RvJDIiLCJ0b0lzb1N0cmluZyIsInZlcnNpb24iLCJyZWxhdGl2ZVRpbWVSb3VuZGluZyIsInJlbGF0aXZlVGltZVRocmVzaG9sZCIsIkhUTUw1X0ZNVCIsIkRBVEVUSU1FX0xPQ0FMIiwiREFURVRJTUVfTE9DQUxfU0VDT05EUyIsIkRBVEVUSU1FX0xPQ0FMX01TIiwiVElNRSIsIlRJTUVfU0VDT05EUyIsIlRJTUVfTVMiLCJmYWN0b3J5IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJsb2FkZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiX19lc01vZHVsZSIsImRlZmluaXRpb24iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJyIiwidG9TdHJpbmdUYWciLCJubWQiLCJwYXRocyIsImNoaWxkcmVuIiwicHJlcGFyZURPTUVsZW1lbnRzIiwicmVsZWFzZURhdGVMYWJlbCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInJlbGVhc2VEYXlzTGVmdCIsInJlbGVhc2VIb3Vyc0xlZnQiLCJyZWxlYXNlTWludXRlc0xlZnQiLCJyZWxlYXNlU2Vjb25kc0xlZnQiLCJzdWJzY3JpcHRpb25Gb3JtIiwibmFtZUlucHV0IiwiZW1haWxJbnB1dCIsInN1Ym1pdEJ0biIsInByZXBhcmVET01FdmVudHMiLCJhZGRFdmVudExpc3RlbmVyIiwiaGFuZGxlU3VibWl0QnRuIiwicmVtb3ZlRXJyb3IiLCJ2YWxpZGF0ZU5hbWUiLCJ2YWxpZGF0ZUVtYWlsIiwibG9hZFJlbGVhc2VEYXRlIiwic2V0QXR0cmlidXRlIiwicmVsZWFzZURhdGUiLCJpbm5lclRleHQiLCJoYW5kbGVDb3VudGRvd24iLCJtb21lbnQiLCJ0aW1lTGVmdCIsImZvcm1hdFRpbWUiLCJlbWFpbFJlZ2V4IiwicHJldmVudERlZmF1bHQiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJlbWFpbCIsInRhcmdldCIsInJlbW92ZSIsInNldEludGVydmFsIl0sIm1hcHBpbmdzIjoic0VBQUEsU0FBQUEsRUFBQUMsR0FDQUMsRUFBQSxJQUFBQyxNQUFBLHVCQUFBRixFQUFBLEtBRUEsTUFEQUMsRUFBQUUsS0FBQSxtQkFDQUYsRUFFQUYsRUFBQUssS0FBQSxJQUFBLElBQ0FMLEVBQUFNLFFBQUFOLEdBQ0FPLEdBQUEscURBQ0FDLEVBQUFDLFFBQUFULEcsb0VDRGdFUyxRQUcvRCx3QkFFRCxJQUFBQyxFQTZIQUMsRUEzSEEsU0FBQUMsSUFDQSxPQUFBRixFQUFBRyxNQUFBLEtBQUFDLFdBS0EsU0FBQUMsRUFBQUMsR0FDQU4sRUFBQU0sRUFHQSxTQUFBQyxFQUFBQyxHQUNBLE9BQ0FBLGFBQUFDLE9BQ0FDLE9BQUFDLFVBQUFDLFNBQUFDLEtBQUFMLEtBQUEsaUJBSUEsU0FBQU0sRUFBQU4sR0FHQSxPQUNBQSxHQUFBLE1BQ0FFLE9BQUFDLFVBQUFDLFNBQUFDLEtBQUFMLEtBQUEsa0JBSUEsU0FBQU8sRUFBQUMsRUFBQUMsR0FDQSxPQUFBUCxPQUFBQyxVQUFBTyxlQUFBTCxLQUFBRyxFQUFBQyxHQUdBLFNBQUFFLEVBQUFDLEdBQ0EsR0FBQVYsT0FBQVcsb0JBQ0EsT0FBQVgsT0FBQVcsb0JBQUFELEdBQUFFLFNBQUEsTUFDVSxDQUNWLElBQUFDLEVBQ0EsSUFBQUEsS0FBQUgsRUFDQSxHQUFBTCxFQUFBSyxFQUFBRyxHQUNBLE9BQUEsTUFHQSxPQUFBLE1BSUEsU0FBQUMsRUFBQWhCLEdBQ0EsT0FBQUEsU0FBQSxFQUdBLFNBQUFpQixFQUFBakIsR0FDQSxjQUNBQSxJQUFBLFVBQ0FFLE9BQUFDLFVBQUFDLFNBQUFDLEtBQUFMLEtBQUEsa0JBSUEsU0FBQWtCLEVBQUFsQixHQUNBLE9BQ0FBLGFBQUFtQixNQUNBakIsT0FBQUMsVUFBQUMsU0FBQUMsS0FBQUwsS0FBQSxnQkFJQSxTQUFBb0IsRUFBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUFBLEdBQ0FDLEVBQ0FDLEVBQUFKLEVBQUFQLE9BQ0EsSUFBQVUsRUFBQSxFQUFvQkEsRUFBQUMsSUFBWUQsRUFDaENELEVBQUFHLEtBQUFKLEVBQUFELEVBQUFHLEdBQUFBLElBRUEsT0FBQUQsRUFHQSxTQUFBSSxFQUFBbkIsRUFBQUMsR0FDQSxJQUFBLElBQUFlLEtBQUFmLEVBQ0EsR0FBQUYsRUFBQUUsRUFBQWUsR0FDQWhCLEVBQUFnQixHQUFBZixFQUFBZSxHQUlBLEdBQUFqQixFQUFBRSxFQUFBLFlBQ0FELEVBQUFKLFNBQUFLLEVBQUFMLFNBR0EsR0FBQUcsRUFBQUUsRUFBQSxXQUNBRCxFQUFBb0IsUUFBQW5CLEVBQUFtQixRQUdBLE9BQUFwQixFQUdBLFNBQUFxQixFQUFBN0IsRUFBQThCLEVBQUFDLEVBQUFDLEdBQ0EsT0FBQUMsR0FBQWpDLEVBQUE4QixFQUFBQyxFQUFBQyxFQUFBLE1BQUFFLE1BR0EsU0FBQUMsSUFFQSxNQUFBLENBQ0FDLE1BQUEsTUFDQUMsYUFBQSxHQUNBQyxZQUFBLEdBQ0FDLFVBQUEsRUFDQUMsY0FBQSxFQUNBQyxVQUFBLE1BQ0FDLFdBQUEsS0FDQUMsYUFBQSxLQUNBQyxjQUFBLE1BQ0FDLGdCQUFBLE1BQ0FDLElBQUEsTUFDQUMsZ0JBQUEsR0FDQUMsSUFBQSxLQUNBQyxTQUFBLEtBQ0FDLFFBQUEsTUFDQUMsZ0JBQUEsT0FJQSxTQUFBQyxFQUFBQyxHQUNBLEdBQUFBLEVBQUFDLEtBQUEsS0FDQUQsRUFBQUMsSUFBQW5CLElBRUEsT0FBQWtCLEVBQUFDLElBSUEsR0FBQXJELE1BQUFFLFVBQUFWLEtBQ0FBLEVBQUFRLE1BQUFFLFVBQUFWLFVBRUFBLEVBQUEsU0FBQThELEdBQ0EsSUFBQUMsRUFBQXRELE9BQUF1RCxNQUNBQyxFQUFBRixFQUFBMUMsU0FBQSxFQUNBVSxFQUVBLElBQUFBLEVBQUEsRUFBd0JBLEVBQUFrQyxFQUFTbEMsSUFDakMsR0FBQUEsS0FBQWdDLEdBQUFELEVBQUFsRCxLQUFBb0QsS0FBQUQsRUFBQWhDLEdBQUFBLEVBQUFnQyxHQUNBLE9BQUEsS0FJQSxPQUFBLE9BSUEsU0FBQUcsRUFBQU4sR0FDQSxHQUFBQSxFQUFBTyxVQUFBLEtBQUEsQ0FDQSxJQUFBQyxFQUFBVCxFQUFBQyxHQUNBUyxFQUFBckUsRUFBQVksS0FBQXdELEVBQUFkLGdCQUFBLFNBQUF2QixHQUNBLE9BQUFBLEdBQUEsT0FFQXVDLEdBQ0FDLE1BQUFYLEVBQUFZLEdBQUFDLFlBQ0FMLEVBQUF0QixTQUFBLElBQ0FzQixFQUFBekIsUUFDQXlCLEVBQUFuQixhQUNBbUIsRUFBQWxCLGVBQ0FrQixFQUFBTSxpQkFDQU4sRUFBQVYsa0JBQ0FVLEVBQUFwQixZQUNBb0IsRUFBQWpCLGdCQUNBaUIsRUFBQWhCLG1CQUNBZ0IsRUFBQVosVUFBQVksRUFBQVosVUFBQWEsR0FFQSxHQUFBVCxFQUFBZSxRQUNBTCxFQUNBQSxHQUNBRixFQUFBckIsZ0JBQUEsR0FDQXFCLEVBQUF4QixhQUFBdkIsU0FBQSxHQUNBK0MsRUFBQVEsVUFBQUMsVUFHQSxHQUFBcEUsT0FBQXFFLFVBQUEsT0FBQXJFLE9BQUFxRSxTQUFBbEIsR0FDQUEsRUFBQU8sU0FBQUcsT0FFQSxPQUFBQSxFQUdBLE9BQUFWLEVBQUFPLFNBR0EsU0FBQVksRUFBQVgsR0FDQSxJQUFBUixFQUFBeEIsRUFBQTRDLEtBQ0EsR0FBQVosR0FBQSxLQUNBbEMsRUFBQXlCLEVBQUFDLEdBQUFRLFFBRUFULEVBQUFDLEdBQUFSLGdCQUFBLEtBR0EsT0FBQVEsRUFLQSxJQUFBcUIsRUFBQWhGLEVBQUFnRixpQkFBQSxHQUNBQyxFQUFBLE1BRUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FDQSxJQUFBdEQsRUFDQXVELEVBQ0FDLEVBQ0FDLEVBQUFQLEVBQUE1RCxPQUVBLElBQUFFLEVBQUE4RCxFQUFBSSxrQkFDQUwsRUFBQUssaUJBQUFKLEVBQUFJLGlCQUVBLElBQUFsRSxFQUFBOEQsRUFBQUssSUFDQU4sRUFBQU0sR0FBQUwsRUFBQUssR0FFQSxJQUFBbkUsRUFBQThELEVBQUFNLElBQ0FQLEVBQUFPLEdBQUFOLEVBQUFNLEdBRUEsSUFBQXBFLEVBQUE4RCxFQUFBTyxJQUNBUixFQUFBUSxHQUFBUCxFQUFBTyxHQUVBLElBQUFyRSxFQUFBOEQsRUFBQVYsU0FDQVMsRUFBQVQsUUFBQVUsRUFBQVYsUUFFQSxJQUFBcEQsRUFBQThELEVBQUFRLE1BQ0FULEVBQUFTLEtBQUFSLEVBQUFRLEtBRUEsSUFBQXRFLEVBQUE4RCxFQUFBUyxRQUNBVixFQUFBVSxPQUFBVCxFQUFBUyxPQUVBLElBQUF2RSxFQUFBOEQsRUFBQVUsU0FDQVgsRUFBQVcsUUFBQVYsRUFBQVUsUUFFQSxJQUFBeEUsRUFBQThELEVBQUF4QixLQUNBdUIsRUFBQXZCLElBQUFGLEVBQUEwQixHQUVBLElBQUE5RCxFQUFBOEQsRUFBQVcsU0FDQVosRUFBQVksUUFBQVgsRUFBQVcsUUFHQSxHQUFBUixFQUFBLEVBQ0EsSUFBQXpELEVBQUEsRUFBd0JBLEVBQUF5RCxFQUF5QnpELElBQUEsQ0FDakR1RCxFQUFBTCxFQUFBbEQsR0FDQXdELEVBQUFGLEVBQUFDLEdBQ0EsSUFBQS9ELEVBQUFnRSxHQUNBSCxFQUFBRSxHQUFBQyxFQUtBLE9BQUFILEVBSUEsU0FBQWEsRUFBQUMsR0FDQWYsRUFBQW5CLEtBQUFrQyxHQUNBbEMsS0FBQVEsR0FBQSxJQUFBOUMsS0FBQXdFLEVBQUExQixJQUFBLEtBQUEwQixFQUFBMUIsR0FBQUMsVUFBQU8sS0FDQSxJQUFBaEIsS0FBQUUsVUFDQUYsS0FBQVEsR0FBQSxJQUFBOUMsS0FBQXNELEtBSUEsR0FBQUUsSUFBQSxNQUFBLENBQ0FBLEVBQUEsS0FDQWpGLEVBQUFrRyxhQUFBbkMsTUFDQWtCLEVBQUEsT0FJQSxTQUFBa0IsRUFBQWpGLEdBQ0EsT0FDQUEsYUFBQThFLEdBQUE5RSxHQUFBLE1BQUFBLEVBQUFzRSxrQkFBQSxLQUlBLFNBQUFZLEVBQUFDLEdBQ0EsR0FDQXJHLEVBQUFzRyw4QkFBQSxjQUNBQyxVQUFBLGFBQ0FBLFFBQUFILEtBRUFHLFFBQUFILEtBQUEsd0JBQUFDLEdBSUEsU0FBQUcsRUFBQUgsRUFBQXpFLEdBQ0EsSUFBQTZFLEVBQUEsS0FFQSxPQUFBeEUsRUFBQSxXQUNBLEdBQUFqQyxFQUFBMEcsb0JBQUEsS0FDQTFHLEVBQUEwRyxtQkFBQSxLQUFBTCxHQUVBLEdBQUFJLEVBQUEsQ0FDQSxJQUFBRSxFQUFBLEdBQ0FDLEVBQ0E5RSxFQUNBK0UsRUFDQUMsRUFBQTVHLFVBQUFrQixPQUNBLElBQUFVLEVBQUEsRUFBNEJBLEVBQUFnRixFQUFZaEYsSUFBQSxDQUN4QzhFLEVBQUEsR0FDQSxVQUFBMUcsVUFBQTRCLEtBQUEsU0FBQSxDQUNBOEUsR0FBQSxNQUFBOUUsRUFBQSxLQUNBLElBQUErRSxLQUFBM0csVUFBQSxHQUNBLEdBQUFXLEVBQUFYLFVBQUEsR0FBQTJHLEdBQ0FELEdBQUFDLEVBQUEsS0FBQTNHLFVBQUEsR0FBQTJHLEdBQUEsS0FHQUQsRUFBQUEsRUFBQUcsTUFBQSxHQUFBLFFBRUFILEVBQUExRyxVQUFBNEIsR0FFQTZFLEVBQUEzRSxLQUFBNEUsR0FFQVIsRUFDQUMsRUFDQSxnQkFDQTlGLE1BQUFFLFVBQUFzRyxNQUFBcEcsS0FBQWdHLEdBQUFLLEtBQUEsSUFDQSxNQUNBLElBQUF6SCxPQUFBMEgsT0FFQVIsRUFBQSxNQUVBLE9BQUE3RSxFQUFBM0IsTUFBQThELEtBQUE3RCxZQUNTMEIsR0FHVCxJQUFBc0YsRUFBQSxHQWdGQXpILEVBOUVBLFNBQUEwSCxHQUFBQyxFQUFBZixHQUNBLEdBQUFyRyxFQUFBMEcsb0JBQUEsS0FDQTFHLEVBQUEwRyxtQkFBQVUsRUFBQWYsR0FFQSxJQUFBYSxFQUFBRSxHQUFBLENBQ0FoQixFQUFBQyxHQUNBYSxFQUFBRSxHQUFBLE1BT0EsU0FBQUMsRUFBQS9HLEdBQ0EsY0FDQWdILFdBQUEsYUFBQWhILGFBQUFnSCxVQUNBOUcsT0FBQUMsVUFBQUMsU0FBQUMsS0FBQUwsS0FBQSxvQkFJQSxTQUFBaUgsR0FBQXRCLEdBQ0EsSUFBQVosRUFBQXZELEVBQ0EsSUFBQUEsS0FBQW1FLEVBQ0EsR0FBQXBGLEVBQUFvRixFQUFBbkUsR0FBQSxDQUNBdUQsRUFBQVksRUFBQW5FLEdBQ0EsR0FBQXVGLEVBQUFoQyxHQUNBdEIsS0FBQWpDLEdBQUF1RCxPQUVBdEIsS0FBQSxJQUFBakMsR0FBQXVELEVBSUF0QixLQUFBeUQsUUFBQXZCLEVBSUFsQyxLQUFBMEQsK0JBQUEsSUFBQUMsUUFDQTNELEtBQUE0RCx3QkFBQUMsUUFBQTdELEtBQUE4RCxjQUFBRCxRQUNBLElBQ0EsVUFBd0JBLFFBSXhCLFNBQUFFLEdBQUFDLEVBQUFDLEdBQ0EsSUFBQW5HLEVBQUFJLEVBQUEsR0FBMkI4RixHQUMzQjFDLEVBQ0EsSUFBQUEsS0FBQTJDLEVBQ0EsR0FBQW5ILEVBQUFtSCxFQUFBM0MsR0FDQSxHQUFBekUsRUFBQW1ILEVBQUExQyxLQUFBekUsRUFBQW9ILEVBQUEzQyxJQUFBLENBQ0F4RCxFQUFBd0QsR0FBQSxHQUNBcEQsRUFBQUosRUFBQXdELEdBQUEwQyxFQUFBMUMsSUFDQXBELEVBQUFKLEVBQUF3RCxHQUFBMkMsRUFBQTNDLFNBQ2tCLEdBQUEyQyxFQUFBM0MsSUFBQSxLQUNsQnhELEVBQUF3RCxHQUFBMkMsRUFBQTNDLGVBRUF4RCxFQUFBd0QsR0FJQSxJQUFBQSxLQUFBMEMsRUFDQSxHQUNBbEgsRUFBQWtILEVBQUExQyxLQUNBeEUsRUFBQW1ILEVBQUEzQyxJQUNBekUsRUFBQW1ILEVBQUExQyxJQUdBeEQsRUFBQXdELEdBQUFwRCxFQUFBLEdBQXFDSixFQUFBd0QsSUFHckMsT0FBQXhELEVBR0EsU0FBQW9HLEdBQUFoQyxHQUNBLEdBQUFBLEdBQUEsS0FDQWxDLEtBQUF3RCxJQUFBdEIsR0FNQSxHQXRFQWpHLEVBQUFzRyw0QkFBQSxNQUNBdEcsRUFBQTBHLG1CQUFBLEtBcUVBbEcsT0FBQWYsS0FDQUEsRUFBQWUsT0FBQWYsVUFFQUEsRUFBQSxTQUFBeUIsR0FDQSxJQUFBWSxFQUNBRCxFQUFBLEdBQ0EsSUFBQUMsS0FBQVosRUFDQSxHQUFBTCxFQUFBSyxFQUFBWSxHQUNBRCxFQUFBRyxLQUFBRixHQUdBLE9BQUFELEdBSUEsSUFBQXFHLEdBQUEsQ0FDQUMsUUFBQSxnQkFDQUMsUUFBQSxtQkFDQUMsU0FBQSxlQUNBQyxRQUFBLG9CQUNBQyxTQUFBLHNCQUNBQyxTQUFBLEtBR0EsU0FBQUMsR0FBQTVCLEVBQUE2QixFQUFBQyxHQUNBLElBQUFDLEVBQUE3RSxLQUFBOEUsVUFBQWhDLElBQUE5QyxLQUFBOEUsVUFBQSxZQUNBLE9BQUF4QixFQUFBdUIsR0FBQUEsRUFBQWpJLEtBQUErSCxFQUFBQyxHQUFBQyxFQUdBLFNBQUFFLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQSxHQUFBQyxLQUFBQyxJQUFBTCxHQUNBTSxFQUFBTCxFQUFBRSxFQUFBOUgsT0FDQWtJLEVBQUFQLEdBQUEsRUFDQSxPQUNBTyxFQUFBTCxFQUFBLElBQUEsR0FBQSxLQUNBRSxLQUFBSSxJQUFBLEdBQUFKLEtBQUFLLElBQUEsRUFBQUgsSUFBQTNJLFdBQUErSSxPQUFBLEdBQ0FQLEVBSUEsSUFBQVEsR0FDQSx5TUFDQUMsR0FBQSw2Q0FDQUMsR0FBQSxHQUNBQyxHQUFBLEdBTUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQTdKLEdBQ0EsSUFBQThKLEVBQUE5SixFQUNBLFVBQUFBLElBQUEsU0FDQThKLEVBQUEsV0FDQSxPQUFBbkcsS0FBQTNELE1BR0EsR0FBQTJKLEVBQ0FGLEdBQUFFLEdBQUFHLEVBRUEsR0FBQUYsRUFDQUgsR0FBQUcsRUFBQSxJQUFBLFdBQ0EsT0FBQWxCLEVBQUFvQixFQUFBakssTUFBQThELEtBQUE3RCxXQUFBOEosRUFBQSxHQUFBQSxFQUFBLEtBR0EsR0FBQUMsRUFDQUosR0FBQUksR0FBQSxXQUNBLE9BQUFsRyxLQUFBb0csYUFBQUYsUUFDQUMsRUFBQWpLLE1BQUE4RCxLQUFBN0QsV0FDQTZKLElBTUEsU0FBQUssR0FBQTlKLEdBQ0EsR0FBQUEsRUFBQStKLE1BQUEsWUFDQSxPQUFBL0osRUFBQWdLLFFBQUEsV0FBQSxJQUVBLE9BQUFoSyxFQUFBZ0ssUUFBQSxNQUFBLElBR0EsU0FBQUMsR0FBQW5JLEdBQ0EsSUFBQW9JLEVBQUFwSSxFQUFBaUksTUFBQVgsSUFDQTVILEVBQ0FWLEVBRUEsSUFBQVUsRUFBQSxFQUFBVixFQUFBb0osRUFBQXBKLE9BQTJDVSxFQUFBVixFQUFZVSxJQUN2RCxHQUFBK0gsR0FBQVcsRUFBQTFJLElBQ0EwSSxFQUFBMUksR0FBQStILEdBQUFXLEVBQUExSSxTQUVBMEksRUFBQTFJLEdBQUFzSSxHQUFBSSxFQUFBMUksSUFJQSxPQUFBLFNBQUE0RyxHQUNBLElBQUFFLEVBQUEsR0FDQTlHLEVBQ0EsSUFBQUEsRUFBQSxFQUF3QkEsRUFBQVYsRUFBWVUsSUFDcEM4RyxHQUFBdkIsRUFBQW1ELEVBQUExSSxJQUNBMEksRUFBQTFJLEdBQUFuQixLQUFBK0gsRUFBQXRHLEdBQ0FvSSxFQUFBMUksR0FFQSxPQUFBOEcsR0FLQSxTQUFBNkIsR0FBQTlHLEVBQUF2QixHQUNBLElBQUF1QixFQUFBTSxVQUNBLE9BQUFOLEVBQUF3RyxhQUFBTyxjQUdBdEksRUFBQXVJLEdBQUF2SSxFQUFBdUIsRUFBQXdHLGNBQ0FQLEdBQUF4SCxHQUNBd0gsR0FBQXhILElBQUFtSSxHQUFBbkksR0FFQSxPQUFBd0gsR0FBQXhILEdBQUF1QixHQUdBLFNBQUFnSCxHQUFBdkksRUFBQUMsR0FDQSxJQUFBUCxFQUFBLEVBRUEsU0FBQThJLEVBQUF0SyxHQUNBLE9BQUErQixFQUFBd0ksZUFBQXZLLElBQUFBLEVBR0FxSixHQUFBbUIsVUFBQSxFQUNBLE1BQUFoSixHQUFBLEdBQUE2SCxHQUFBb0IsS0FBQTNJLEdBQUEsQ0FDQUEsRUFBQUEsRUFBQWtJLFFBQ0FYLEdBQ0FpQixHQUVBakIsR0FBQW1CLFVBQUEsRUFDQWhKLEdBQUEsRUFHQSxPQUFBTSxFQUdBLElBQUE0SSxHQUFBLENBQ0FDLElBQUEsWUFDQUMsR0FBQSxTQUNBQyxFQUFBLGFBQ0FDLEdBQUEsZUFDQUMsSUFBQSxzQkFDQUMsS0FBQSw2QkFHQSxTQUFBVCxHQUFBaEUsR0FDQSxJQUFBekUsRUFBQTJCLEtBQUF3SCxnQkFBQTFFLEdBQ0EyRSxFQUFBekgsS0FBQXdILGdCQUFBMUUsRUFBQTRFLGVBRUEsR0FBQXJKLElBQUFvSixFQUNBLE9BQUFwSixFQUdBMkIsS0FBQXdILGdCQUFBMUUsR0FBQTJFLEVBQ0FuQixNQUFBWCxJQUNBaEksSUFBQSxTQUFBZ0ssR0FDQSxHQUNBQSxJQUFBLFFBQ0FBLElBQUEsTUFDQUEsSUFBQSxNQUNBQSxJQUFBLE9BRUEsT0FBQUEsRUFBQTNFLE1BQUEsR0FFQSxPQUFBMkUsSUFFQTFFLEtBQUEsSUFFQSxPQUFBakQsS0FBQXdILGdCQUFBMUUsR0FHQSxJQUFBOEUsR0FBQSxlQUVBLFNBQUFqQixLQUNBLE9BQUEzRyxLQUFBNkgsYUFHQSxJQUFBQyxHQUFBLEtBQ0FDLEdBQUEsVUFFQSxTQUFBN0IsR0FBQWxCLEdBQ0EsT0FBQWhGLEtBQUFnSSxTQUFBekIsUUFBQSxLQUFBdkIsR0FHQSxJQUFBaUQsR0FBQSxDQUNBQyxPQUFBLFFBQ0FDLEtBQUEsU0FDQUMsRUFBQSxnQkFDQUMsR0FBQSxhQUNBekksRUFBQSxXQUNBMEksR0FBQSxhQUNBQyxFQUFBLFVBQ0FDLEdBQUEsV0FDQUMsRUFBQSxRQUNBQyxHQUFBLFVBQ0FDLEVBQUEsU0FDQUMsR0FBQSxXQUNBQyxFQUFBLFVBQ0FDLEdBQUEsWUFDQUMsRUFBQSxTQUNBQyxHQUFBLFlBR0EsU0FBQUMsR0FBQWpFLEVBQUFrRSxFQUFBQyxFQUFBQyxHQUNBLElBQUF2RSxFQUFBN0UsS0FBQXFKLGNBQUFGLEdBQ0EsT0FBQTdGLEVBQUF1QixHQUNBQSxFQUFBRyxFQUFBa0UsRUFBQUMsRUFBQUMsR0FDQXZFLEVBQUEwQixRQUFBLE1BQUF2QixHQUdBLFNBQUFzRSxHQUFBQyxFQUFBMUUsR0FDQSxJQUFBeEcsRUFBQTJCLEtBQUFxSixjQUFBRSxFQUFBLEVBQUEsU0FBQSxRQUNBLE9BQUFqRyxFQUFBakYsR0FBQUEsRUFBQXdHLEdBQUF4RyxFQUFBa0ksUUFBQSxNQUFBMUIsR0FHQSxJQUFBMkUsR0FBQSxHQUVBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQUYsRUFBQUcsY0FDQUwsR0FBQUksR0FBQUosR0FBQUksRUFBQSxLQUFBSixHQUFBRyxHQUFBRCxFQUdBLFNBQUFJLEVBQUFDLEdBQ0EsY0FBQUEsSUFBQSxTQUNBUCxHQUFBTyxJQUFBUCxHQUFBTyxFQUFBRixlQUNBaEosVUFHQSxTQUFBbUosR0FBQUMsR0FDQSxJQUFBQyxFQUFBLEdBQ0FDLEVBQ0E3SSxFQUVBLElBQUFBLEtBQUEySSxFQUNBLEdBQUFuTixFQUFBbU4sRUFBQTNJLEdBQUEsQ0FDQTZJLEVBQUFMLEVBQUF4SSxHQUNBLEdBQUE2SSxFQUNBRCxFQUFBQyxHQUFBRixFQUFBM0ksR0FLQSxPQUFBNEksRUFHQSxJQUFBRSxHQUFBLEdBRUEsU0FBQUMsRUFBQVgsRUFBQVksR0FDQUYsR0FBQVYsR0FBQVksRUFHQSxTQUFBQyxHQUFBQyxHQUNBLElBQUFULEVBQUEsR0FDQVUsRUFDQSxJQUFBQSxLQUFBRCxFQUNBLEdBQUExTixFQUFBME4sRUFBQUMsR0FDQVYsRUFBQTlMLEtBQUEsQ0FBNkJ5TCxLQUFBZSxFQUFBSCxTQUFBRixHQUFBSyxLQUc3QlYsRUFBQVcsS0FBQSxTQUFBM04sRUFBQUMsR0FDQSxPQUFBRCxFQUFBdU4sU0FBQXROLEVBQUFzTixXQUVBLE9BQUFQLEVBR0EsU0FBQVksR0FBQUMsR0FDQSxPQUFBQSxFQUFBLElBQUEsR0FBQUEsRUFBQSxNQUFBLEdBQUFBLEVBQUEsTUFBQSxFQUdBLFNBQUFDLEVBQUE3RixHQUNBLEdBQUFBLEVBQUEsRUFFQSxPQUFBSSxLQUFBMEYsS0FBQTlGLElBQUEsT0FFQSxPQUFBSSxLQUFBMkYsTUFBQS9GLEdBSUEsU0FBQWdHLEVBQUFDLEdBQ0EsSUFBQUMsR0FBQUQsRUFDQUUsRUFBQSxFQUVBLEdBQUFELElBQUEsR0FBQUUsU0FBQUYsR0FDQUMsRUFBQU4sRUFBQUssR0FHQSxPQUFBQyxFQUdBLFNBQUFFLEdBQUEzQixFQUFBNEIsR0FDQSxPQUFBLFNBQUFILEdBQ0EsR0FBQUEsR0FBQSxLQUFBLENBQ0FJLEdBQUF2TCxLQUFBMEosRUFBQXlCLEdBQ0FsUCxFQUFBa0csYUFBQW5DLEtBQUFzTCxHQUNBLE9BQUF0TCxVQUVBLE9BQUF3TCxHQUFBeEwsS0FBQTBKLElBS0EsU0FBQThCLEdBQUE3RyxFQUFBK0UsR0FDQSxPQUFBL0UsRUFBQXpFLFVBQ0F5RSxFQUFBbkUsR0FBQSxPQUFBbUUsRUFBQTdDLE9BQUEsTUFBQSxJQUFBNEgsS0FDQTFJLElBR0EsU0FBQXVLLEdBQUE1RyxFQUFBK0UsRUFBQXlCLEdBQ0EsR0FBQXhHLEVBQUF6RSxZQUFBSyxNQUFBNEssR0FDQSxHQUNBekIsSUFBQSxZQUNBaUIsR0FBQWhHLEVBQUFpRyxTQUNBakcsRUFBQThHLFVBQUEsR0FDQTlHLEVBQUErRyxTQUFBLEdBQ0EsQ0FDQVAsRUFBQUgsRUFBQUcsR0FDQXhHLEVBQUFuRSxHQUFBLE9BQUFtRSxFQUFBN0MsT0FBQSxNQUFBLElBQUE0SCxHQUNBeUIsRUFDQXhHLEVBQUE4RyxRQUNBRSxHQUFBUixFQUFBeEcsRUFBQThHLGVBR0E5RyxFQUFBbkUsR0FBQSxPQUFBbUUsRUFBQTdDLE9BQUEsTUFBQSxJQUFBNEgsR0FBQXlCLEdBT0EsU0FBQVMsR0FBQTdCLEdBQ0FBLEVBQUFELEVBQUFDLEdBQ0EsR0FBQXpHLEVBQUF0RCxLQUFBK0osSUFDQSxPQUFBL0osS0FBQStKLEtBRUEsT0FBQS9KLEtBR0EsU0FBQTZMLEdBQUE5QixFQUFBb0IsR0FDQSxVQUFBcEIsSUFBQSxTQUFBLENBQ0FBLEVBQUFDLEdBQUFELEdBQ0EsSUFBQStCLEVBQUF2QixHQUFBUixHQUNBaE0sRUFDQWdPLEVBQUFELEVBQUF6TyxPQUNBLElBQUFVLEVBQUEsRUFBd0JBLEVBQUFnTyxFQUFvQmhPLElBQzVDaUMsS0FBQThMLEVBQUEvTixHQUFBMkwsTUFBQUssRUFBQStCLEVBQUEvTixHQUFBMkwsV0FFVSxDQUNWSyxFQUFBRCxFQUFBQyxHQUNBLEdBQUF6RyxFQUFBdEQsS0FBQStKLElBQ0EsT0FBQS9KLEtBQUErSixHQUFBb0IsR0FHQSxPQUFBbkwsS0FHQSxJQUFBZ00sR0FBQSxLQUNBQyxFQUFBLE9BQ0FDLEdBQUEsUUFDQUMsR0FBQSxRQUNBQyxHQUFBLGFBQ0FDLEVBQUEsUUFDQUMsR0FBQSxZQUNBQyxHQUFBLGdCQUNBQyxHQUFBLFVBQ0FDLEdBQUEsVUFDQUMsR0FBQSxlQUNBQyxHQUFBLE1BQ0FDLEdBQUEsV0FDQUMsR0FBQSxxQkFDQUMsR0FBQSwwQkFDQUMsR0FBQSx1QkFHQUMsR0FDQSx3SkFDQUMsR0FJQSxTQUFBQyxFQUFBbEgsRUFBQW1ILEVBQUFDLEdBQ0FILEdBQUFqSCxHQUFBMUMsRUFBQTZKLEdBQ0FBLEVBQ0EsU0FBQUUsRUFBQWpILEdBQ0EsT0FBQWlILEdBQUFELEVBQUFBLEVBQUFELEdBSUEsU0FBQUcsR0FBQXRILEVBQUE5RCxHQUNBLElBQUFwRixFQUFBbVEsR0FBQWpILEdBQ0EsT0FBQSxJQUFBckMsT0FBQTRKLEdBQUF2SCxJQUdBLE9BQUFpSCxHQUFBakgsR0FBQTlELEVBQUF2QixRQUFBdUIsRUFBQUYsU0FJQSxTQUFBdUwsR0FBQW5GLEdBQ0EsT0FBQW9GLEVBQ0FwRixFQUNBN0IsUUFBQSxLQUFBLElBQ0FBLFFBQ0Esc0NBQ0EsU0FBQWtILEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsT0FBQUgsR0FBQUMsR0FBQUMsR0FBQUMsS0FNQSxTQUFBTCxFQUFBcEYsR0FDQSxPQUFBQSxFQUFBN0IsUUFBQSx5QkFBOEMsUUFHOUMsSUFwQ0EwRyxHQUFBLEdBb0NBYSxHQUFBLEdBRUEsU0FBQUMsRUFBQS9ILEVBQUEzSixHQUNBLElBQUEwQixFQUNBb0ksRUFBQTlKLEVBQ0EyUixFQUNBLFVBQUFoSSxJQUFBLFNBQ0FBLEVBQUEsQ0FBQUEsR0FFQSxHQUFBeEksRUFBQW5CLEdBQ0E4SixFQUFBLFNBQUE1SixFQUFBa0ssR0FDQUEsRUFBQXBLLEdBQUEyTyxFQUFBek8sSUFHQXlSLEVBQUFoSSxFQUFBM0ksT0FDQSxJQUFBVSxFQUFBLEVBQW9CQSxFQUFBaVEsRUFBY2pRLElBQ2xDK1AsR0FBQTlILEVBQUFqSSxJQUFBb0ksRUFJQSxTQUFBOEgsR0FBQWpJLEVBQUEzSixHQUNBMFIsRUFBQS9ILEVBQUEsU0FBQXpKLEVBQUFrSyxFQUFBdkUsRUFBQThELEdBQ0E5RCxFQUFBZ00sR0FBQWhNLEVBQUFnTSxJQUFBLEdBQ0E3UixFQUFBRSxFQUFBMkYsRUFBQWdNLEdBQUFoTSxFQUFBOEQsS0FJQSxTQUFBbUksR0FBQW5JLEVBQUF6SixFQUFBMkYsR0FDQSxHQUFBM0YsR0FBQSxNQUFBTyxFQUFBZ1IsR0FBQTlILEdBQ0E4SCxHQUFBOUgsR0FBQXpKLEVBQUEyRixFQUFBa00sR0FBQWxNLEVBQUE4RCxHQUlBLElBQUFxSSxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQU1BQyxFQUpBLFNBQUFDLEdBQUFDLEVBQUFDLEdBQ0EsT0FBQUQsRUFBQUMsRUFBQUEsR0FBQUEsRUFLQSxHQUFBelMsTUFBQUUsVUFBQW9TLFFBQ0FBLEVBQUF0UyxNQUFBRSxVQUFBb1MsYUFFQUEsRUFBQSxTQUFBSSxHQUVBLElBQUFuUixFQUNBLElBQUFBLEVBQUEsRUFBd0JBLEVBQUFpQyxLQUFBM0MsU0FBaUJVLEVBQ3pDLEdBQUFpQyxLQUFBakMsS0FBQW1SLEVBQ0EsT0FBQW5SLEVBR0EsT0FBQSxHQUlBLFNBQUE0TixHQUFBZixFQUFBYSxHQUNBLEdBQUFsTCxNQUFBcUssSUFBQXJLLE1BQUFrTCxHQUNBLE9BQUF6SyxJQUVBLElBQUFtTyxFQUFBSixHQUFBdEQsRUFBQSxJQUNBYixJQUFBYSxFQUFBMEQsR0FBQSxHQUNBLE9BQUFBLElBQUEsRUFDQXhFLEdBQUFDLEdBQ0EsR0FDQSxHQUNBLEdBQUF1RSxFQUFBLEVBQUEsRUFLQXBKLEVBQUEsSUFBQSxDQUFBLEtBQUEsR0FBQSxLQUFBLFdBQ0EsT0FBQS9GLEtBQUF5TCxRQUFBLElBR0ExRixFQUFBLE1BQUEsRUFBQSxFQUFBLFNBQUExSCxHQUNBLE9BQUEyQixLQUFBb0csYUFBQWdKLFlBQUFwUCxLQUFBM0IsS0FHQTBILEVBQUEsT0FBQSxFQUFBLEVBQUEsU0FBQTFILEdBQ0EsT0FBQTJCLEtBQUFvRyxhQUFBaUosT0FBQXJQLEtBQUEzQixLQUtBb0wsRUFBQSxRQUFBLEtBSUFZLEVBQUEsUUFBQSxHQUlBNkMsRUFBQSxJQUFBYixHQUNBYSxFQUFBLEtBQUFiLEVBQUFKLEdBQ0FpQixFQUFBLE1BQUEsU0FBQUcsRUFBQS9PLEdBQ0EsT0FBQUEsRUFBQWdSLGlCQUFBakMsS0FFQUgsRUFBQSxPQUFBLFNBQUFHLEVBQUEvTyxHQUNBLE9BQUFBLEVBQUFpUixZQUFBbEMsS0FHQVUsRUFBQSxDQUFBLElBQUEsTUFBQSxTQUFBeFIsRUFBQWtLLEdBQ0FBLEVBQUE2SCxHQUFBdEQsRUFBQXpPLEdBQUEsSUFHQXdSLEVBQUEsQ0FBQSxNQUFBLFFBQUEsU0FBQXhSLEVBQUFrSyxFQUFBdkUsRUFBQThELEdBQ0EsSUFBQXlGLEVBQUF2SixFQUFBRixRQUFBd04sWUFBQWpULEVBQUF5SixFQUFBOUQsRUFBQXZCLFNBRUEsR0FBQThLLEdBQUEsS0FDQWhGLEVBQUE2SCxHQUFBN0MsT0FFQTlMLEVBQUF1QyxHQUFBaEQsYUFBQTNDLElBTUEsSUFBQWtULEdBQ0Esd0ZBQUFDLE1BQ0EsS0FFQUMsR0FDQSxrREFBQUQsTUFBQSxLQUNBRSxHQUFBLGdDQUNBQyxHQUFBN0MsR0FDQThDLEdBQUE5QyxHQUVBLFNBQUErQyxHQUFBblEsRUFBQXZCLEdBQ0EsSUFBQXVCLEVBQ0EsT0FBQXRELEVBQUEwRCxLQUFBZ1EsU0FDQWhRLEtBQUFnUSxRQUNBaFEsS0FBQWdRLFFBQUEsY0FFQSxPQUFBMVQsRUFBQTBELEtBQUFnUSxTQUNBaFEsS0FBQWdRLFFBQUFwUSxFQUFBNkwsU0FDQXpMLEtBQUFnUSxTQUNBaFEsS0FBQWdRLFFBQUFDLFVBQUFMLElBQUE1SSxLQUFBM0ksR0FDQSxTQUNBLGNBQ0F1QixFQUFBNkwsU0FHQSxTQUFBeUUsR0FBQXRRLEVBQUF2QixHQUNBLElBQUF1QixFQUNBLE9BQUF0RCxFQUFBMEQsS0FBQW1RLGNBQ0FuUSxLQUFBbVEsYUFDQW5RLEtBQUFtUSxhQUFBLGNBRUEsT0FBQTdULEVBQUEwRCxLQUFBbVEsY0FDQW5RLEtBQUFtUSxhQUFBdlEsRUFBQTZMLFNBQ0F6TCxLQUFBbVEsYUFDQVAsR0FBQTVJLEtBQUEzSSxHQUFBLFNBQUEsY0FDQXVCLEVBQUE2TCxTQUdBLFNBQUEyRSxHQUFBQyxFQUFBaFMsRUFBQUUsR0FDQSxJQUFBUixFQUNBdVMsRUFDQTNMLEVBQ0E0TCxFQUFBRixFQUFBRyxvQkFDQSxJQUFBeFEsS0FBQXlRLGFBQUEsQ0FFQXpRLEtBQUF5USxhQUFBLEdBQ0F6USxLQUFBMFEsaUJBQUEsR0FDQTFRLEtBQUEyUSxrQkFBQSxHQUNBLElBQUE1UyxFQUFBLEVBQXdCQSxFQUFBLEtBQVFBLEVBQUEsQ0FDaEM0RyxFQUFBdkcsRUFBQSxDQUFBLElBQUFMLElBQ0FpQyxLQUFBMlEsa0JBQUE1UyxHQUFBaUMsS0FBQW9QLFlBQ0F6SyxFQUNBLElBQ0E2TCxvQkFDQXhRLEtBQUEwUSxpQkFBQTNTLEdBQUFpQyxLQUFBcVAsT0FBQTFLLEVBQUEsSUFBQTZMLHFCQUlBLEdBQUFqUyxFQUNBLEdBQUFGLElBQUEsTUFBQSxDQUNBaVMsRUFBQXhCLEVBQUFsUyxLQUFBb0QsS0FBQTJRLGtCQUFBSixHQUNBLE9BQUFELEtBQUEsRUFBQUEsRUFBQSxTQUNjLENBQ2RBLEVBQUF4QixFQUFBbFMsS0FBQW9ELEtBQUEwUSxpQkFBQUgsR0FDQSxPQUFBRCxLQUFBLEVBQUFBLEVBQUEsVUFHQSxHQUFBalMsSUFBQSxNQUFBLENBQ0FpUyxFQUFBeEIsRUFBQWxTLEtBQUFvRCxLQUFBMlEsa0JBQUFKLEdBQ0EsR0FBQUQsS0FBQSxFQUNBLE9BQUFBLEVBRUFBLEVBQUF4QixFQUFBbFMsS0FBQW9ELEtBQUEwUSxpQkFBQUgsR0FDQSxPQUFBRCxLQUFBLEVBQUFBLEVBQUEsU0FDYyxDQUNkQSxFQUFBeEIsRUFBQWxTLEtBQUFvRCxLQUFBMFEsaUJBQUFILEdBQ0EsR0FBQUQsS0FBQSxFQUNBLE9BQUFBLEVBRUFBLEVBQUF4QixFQUFBbFMsS0FBQW9ELEtBQUEyUSxrQkFBQUosR0FDQSxPQUFBRCxLQUFBLEVBQUFBLEVBQUEsTUFLQSxTQUFBTSxHQUFBUCxFQUFBaFMsRUFBQUUsR0FDQSxJQUFBUixFQUFBNEcsRUFBQXdJLEVBRUEsR0FBQW5OLEtBQUE2USxrQkFDQSxPQUFBVCxHQUFBeFQsS0FBQW9ELEtBQUFxUSxFQUFBaFMsRUFBQUUsR0FHQSxJQUFBeUIsS0FBQXlRLGFBQUEsQ0FDQXpRLEtBQUF5USxhQUFBLEdBQ0F6USxLQUFBMFEsaUJBQUEsR0FDQTFRLEtBQUEyUSxrQkFBQSxHQU1BLElBQUE1UyxFQUFBLEVBQW9CQSxFQUFBLEdBQVFBLElBQUEsQ0FFNUI0RyxFQUFBdkcsRUFBQSxDQUFBLElBQUFMLElBQ0EsR0FBQVEsSUFBQXlCLEtBQUEwUSxpQkFBQTNTLEdBQUEsQ0FDQWlDLEtBQUEwUSxpQkFBQTNTLEdBQUEsSUFBQTRGLE9BQ0EsSUFBQTNELEtBQUFxUCxPQUFBMUssRUFBQSxJQUFBNEIsUUFBQSxJQUFBLElBQUEsSUFDQSxLQUVBdkcsS0FBQTJRLGtCQUFBNVMsR0FBQSxJQUFBNEYsT0FDQSxJQUFBM0QsS0FBQW9QLFlBQUF6SyxFQUFBLElBQUE0QixRQUFBLElBQUEsSUFBQSxJQUNBLEtBR0EsSUFBQWhJLElBQUF5QixLQUFBeVEsYUFBQTFTLEdBQUEsQ0FDQW9QLEVBQ0EsSUFBQW5OLEtBQUFxUCxPQUFBMUssRUFBQSxJQUFBLEtBQUEzRSxLQUFBb1AsWUFBQXpLLEVBQUEsSUFDQTNFLEtBQUF5USxhQUFBMVMsR0FBQSxJQUFBNEYsT0FBQXdKLEVBQUE1RyxRQUFBLElBQUEsSUFBQSxLQUdBLEdBQ0FoSSxHQUNBRixJQUFBLFFBQ0EyQixLQUFBMFEsaUJBQUEzUyxHQUFBaUosS0FBQXFKLEdBRUEsT0FBQXRTLE9BQ2MsR0FDZFEsR0FDQUYsSUFBQSxPQUNBMkIsS0FBQTJRLGtCQUFBNVMsR0FBQWlKLEtBQUFxSixHQUVBLE9BQUF0UyxPQUNjLElBQUFRLEdBQUF5QixLQUFBeVEsYUFBQTFTLEdBQUFpSixLQUFBcUosR0FDZCxPQUFBdFMsR0FPQSxTQUFBK1MsR0FBQW5NLEVBQUF3RyxHQUNBLElBQUE0RixFQUVBLElBQUFwTSxFQUFBekUsVUFFQSxPQUFBeUUsRUFHQSxVQUFBd0csSUFBQSxTQUNBLEdBQUEsUUFBQW5FLEtBQUFtRSxHQUNBQSxFQUFBSCxFQUFBRyxPQUNjLENBQ2RBLEVBQUF4RyxFQUFBeUIsYUFBQW9KLFlBQUFyRSxHQUVBLElBQUEzTixFQUFBMk4sR0FDQSxPQUFBeEcsRUFLQW9NLEVBQUEzTCxLQUFBNEwsSUFBQXJNLEVBQUErRyxPQUFBQyxHQUFBaEgsRUFBQWlHLE9BQUFPLElBQ0F4RyxFQUFBbkUsR0FBQSxPQUFBbUUsRUFBQTdDLE9BQUEsTUFBQSxJQUFBLFNBQUFxSixFQUFBNEYsR0FDQSxPQUFBcE0sRUFHQSxTQUFBc00sR0FBQTlGLEdBQ0EsR0FBQUEsR0FBQSxLQUFBLENBQ0EyRixHQUFBOVEsS0FBQW1MLEdBQ0FsUCxFQUFBa0csYUFBQW5DLEtBQUEsTUFDQSxPQUFBQSxVQUVBLE9BQUF3TCxHQUFBeEwsS0FBQSxTQUlBLFNBQUFrUixLQUNBLE9BQUF2RixHQUFBM0wsS0FBQTRLLE9BQUE1SyxLQUFBeUwsU0FHQSxTQUFBNkQsR0FBQWpDLEdBQ0EsR0FBQXJOLEtBQUE2USxrQkFBQSxDQUNBLElBQUEvVCxFQUFBa0QsS0FBQSxnQkFDQW1SLEdBQUF2VSxLQUFBb0QsTUFFQSxHQUFBcU4sRUFDQSxPQUFBck4sS0FBQW9SLDZCQUVBLE9BQUFwUixLQUFBcVIsc0JBRVUsQ0FDVixJQUFBdlUsRUFBQWtELEtBQUEscUJBQ0FBLEtBQUFxUixrQkFBQXhCLEdBRUEsT0FBQTdQLEtBQUFvUix5QkFBQS9ELEVBQ0FyTixLQUFBb1Isd0JBQ0FwUixLQUFBcVIsbUJBSUEsU0FBQTlCLEdBQUFsQyxHQUNBLEdBQUFyTixLQUFBNlEsa0JBQUEsQ0FDQSxJQUFBL1QsRUFBQWtELEtBQUEsZ0JBQ0FtUixHQUFBdlUsS0FBQW9ELE1BRUEsR0FBQXFOLEVBQ0EsT0FBQXJOLEtBQUFzUix3QkFFQSxPQUFBdFIsS0FBQXVSLGlCQUVVLENBQ1YsSUFBQXpVLEVBQUFrRCxLQUFBLGdCQUNBQSxLQUFBdVIsYUFBQXpCLEdBRUEsT0FBQTlQLEtBQUFzUixvQkFBQWpFLEVBQ0FyTixLQUFBc1IsbUJBQ0F0UixLQUFBdVIsY0FJQSxTQUFBSixLQUNBLFNBQUFLLEVBQUF6VSxFQUFBQyxHQUNBLE9BQUFBLEVBQUFLLE9BQUFOLEVBQUFNLE9BR0EsSUFBQW9VLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0E1VCxFQUNBNEcsRUFDQSxJQUFBNUcsRUFBQSxFQUFvQkEsRUFBQSxHQUFRQSxJQUFBLENBRTVCNEcsRUFBQXZHLEVBQUEsQ0FBQSxJQUFBTCxJQUNBMFQsRUFBQXhULEtBQUErQixLQUFBb1AsWUFBQXpLLEVBQUEsS0FDQStNLEVBQUF6VCxLQUFBK0IsS0FBQXFQLE9BQUExSyxFQUFBLEtBQ0FnTixFQUFBMVQsS0FBQStCLEtBQUFxUCxPQUFBMUssRUFBQSxLQUNBZ04sRUFBQTFULEtBQUErQixLQUFBb1AsWUFBQXpLLEVBQUEsS0FJQThNLEVBQUEvRyxLQUFBOEcsR0FDQUUsRUFBQWhILEtBQUE4RyxHQUNBRyxFQUFBakgsS0FBQThHLEdBQ0EsSUFBQXpULEVBQUEsRUFBb0JBLEVBQUEsR0FBUUEsSUFBQSxDQUM1QjBULEVBQUExVCxHQUFBeVAsRUFBQWlFLEVBQUExVCxJQUNBMlQsRUFBQTNULEdBQUF5UCxFQUFBa0UsRUFBQTNULElBRUEsSUFBQUEsRUFBQSxFQUFvQkEsRUFBQSxHQUFRQSxJQUM1QjRULEVBQUE1VCxHQUFBeVAsRUFBQW1FLEVBQUE1VCxJQUdBaUMsS0FBQXVSLGFBQUEsSUFBQTVOLE9BQUEsS0FBQWdPLEVBQUExTyxLQUFBLEtBQUEsSUFBQSxLQUNBakQsS0FBQXFSLGtCQUFBclIsS0FBQXVSLGFBQ0F2UixLQUFBc1IsbUJBQUEsSUFBQTNOLE9BQ0EsS0FBQStOLEVBQUF6TyxLQUFBLEtBQUEsSUFDQSxLQUVBakQsS0FBQW9SLHdCQUFBLElBQUF6TixPQUNBLEtBQUE4TixFQUFBeE8sS0FBQSxLQUFBLElBQ0EsS0FpREEsU0FBQTJPLEdBQUFoSCxHQUNBLE9BQUFELEdBQUFDLEdBQUEsSUFBQSxJQTVDQTdFLEVBQUEsSUFBQSxFQUFBLEVBQUEsV0FDQSxJQUFBZ0QsRUFBQS9JLEtBQUE0SyxPQUNBLE9BQUE3QixHQUFBLEtBQUFoRSxFQUFBZ0UsRUFBQSxHQUFBLElBQUFBLElBR0FoRCxFQUFBLEVBQUEsQ0FBQSxLQUFBLEdBQUEsRUFBQSxXQUNBLE9BQUEvRixLQUFBNEssT0FBQSxNQUdBN0UsRUFBQSxFQUFBLENBQUEsT0FBQSxHQUFBLEVBQUEsUUFDQUEsRUFBQSxFQUFBLENBQUEsUUFBQSxHQUFBLEVBQUEsUUFDQUEsRUFBQSxFQUFBLENBQUEsU0FBQSxFQUFBLE1BQUEsRUFBQSxRQUlBMEQsRUFBQSxPQUFBLEtBSUFZLEVBQUEsT0FBQSxHQUlBNkMsRUFBQSxJQUFBTixJQUNBTSxFQUFBLEtBQUFiLEVBQUFKLEdBQ0FpQixFQUFBLE9BQUFULEdBQUFOLElBQ0FlLEVBQUEsUUFBQVIsR0FBQU4sSUFDQWMsRUFBQSxTQUFBUixHQUFBTixJQUVBMkIsRUFBQSxDQUFBLFFBQUEsVUFBQU0sR0FDQU4sRUFBQSxPQUFBLFNBQUF4UixFQUFBa0ssR0FDQUEsRUFBQTRILEdBQ0E5UixFQUFBYyxTQUFBLEVBQUFwQixFQUFBNFYsa0JBQUF0VixHQUFBeU8sRUFBQXpPLEtBRUF3UixFQUFBLEtBQUEsU0FBQXhSLEVBQUFrSyxHQUNBQSxFQUFBNEgsR0FBQXBTLEVBQUE0VixrQkFBQXRWLEtBRUF3UixFQUFBLElBQUEsU0FBQXhSLEVBQUFrSyxHQUNBQSxFQUFBNEgsR0FBQXlELFNBQUF2VixFQUFBLE1BV0FOLEVBQUE0VixrQkFBQSxTQUFBdFYsR0FDQSxPQUFBeU8sRUFBQXpPLElBQUF5TyxFQUFBek8sR0FBQSxHQUFBLEtBQUEsTUFLQSxJQUFBd1YsR0FBQTFHLEdBQUEsV0FBQSxNQUVBLFNBQUEyRyxLQUNBLE9BQUFySCxHQUFBM0ssS0FBQTRLLFFBR0EsU0FBQXFILEdBQUFsSixFQUFBbkosRUFBQTZJLEVBQUFGLEVBQUFNLEVBQUFULEVBQUE4SixHQUdBLElBQUF4RyxFQUVBLEdBQUEzQyxFQUFBLEtBQUFBLEdBQUEsRUFBQSxDQUVBMkMsRUFBQSxJQUFBaE8sS0FBQXFMLEVBQUEsSUFBQW5KLEVBQUE2SSxFQUFBRixFQUFBTSxFQUFBVCxFQUFBOEosR0FDQSxHQUFBOUcsU0FBQU0sRUFBQXlHLGVBQ0F6RyxFQUFBMEcsWUFBQXJKLFFBR0EyQyxFQUFBLElBQUFoTyxLQUFBcUwsRUFBQW5KLEVBQUE2SSxFQUFBRixFQUFBTSxFQUFBVCxFQUFBOEosR0FHQSxPQUFBeEcsRUFHQSxTQUFBMkcsR0FBQXRKLEdBQ0EsSUFBQTJDLEVBQUE5SSxFQUVBLEdBQUFtRyxFQUFBLEtBQUFBLEdBQUEsRUFBQSxDQUNBbkcsRUFBQXBHLE1BQUFFLFVBQUFzRyxNQUFBcEcsS0FBQVQsV0FFQXlHLEVBQUEsR0FBQW1HLEVBQUEsSUFDQTJDLEVBQUEsSUFBQWhPLEtBQUFBLEtBQUE0VSxJQUFBcFcsTUFBQSxLQUFBMEcsSUFDQSxHQUFBd0ksU0FBQU0sRUFBQTZHLGtCQUNBN0csRUFBQThHLGVBQUF6SixRQUdBMkMsRUFBQSxJQUFBaE8sS0FBQUEsS0FBQTRVLElBQUFwVyxNQUFBLEtBQUFDLFlBR0EsT0FBQXVQLEVBSUEsU0FBQStHLEdBQUE3SCxFQUFBOEgsRUFBQUMsR0FDQSxJQUNBQyxFQUFBLEVBQUFGLEVBQUFDLEVBRUFFLEdBQUEsRUFBQVIsR0FBQXpILEVBQUEsRUFBQWdJLEdBQUFFLFlBQUFKLEdBQUEsRUFFQSxPQUFBRyxFQUFBRCxFQUFBLEVBSUEsU0FBQUcsR0FBQW5JLEVBQUFvSSxFQUFBQyxFQUFBUCxFQUFBQyxHQUNBLElBQUFPLEdBQUEsRUFBQUQsRUFBQVAsR0FBQSxFQUNBUyxFQUFBVixHQUFBN0gsRUFBQThILEVBQUFDLEdBQ0FTLEVBQUEsRUFBQSxHQUFBSixFQUFBLEdBQUFFLEVBQUFDLEVBQ0FFLEVBQ0FDLEVBRUEsR0FBQUYsR0FBQSxFQUFBLENBQ0FDLEVBQUF6SSxFQUFBLEVBQ0EwSSxFQUFBMUIsR0FBQXlCLEdBQUFELE9BQ1UsR0FBQUEsRUFBQXhCLEdBQUFoSCxHQUFBLENBQ1Z5SSxFQUFBekksRUFBQSxFQUNBMEksRUFBQUYsRUFBQXhCLEdBQUFoSCxPQUNVLENBQ1Z5SSxFQUFBekksRUFDQTBJLEVBQUFGLEVBR0EsTUFBQSxDQUNBeEksS0FBQXlJLEVBQ0FELFVBQUFFLEdBSUEsU0FBQUMsR0FBQTVPLEVBQUErTixFQUFBQyxHQUNBLElBQUFRLEVBQUFWLEdBQUE5TixFQUFBaUcsT0FBQThILEVBQUFDLEdBQ0FLLEVBQUE1TixLQUFBMkYsT0FBQXBHLEVBQUF5TyxZQUFBRCxFQUFBLEdBQUEsR0FBQSxFQUNBSyxFQUNBSCxFQUVBLEdBQUFMLEVBQUEsRUFBQSxDQUNBSyxFQUFBMU8sRUFBQWlHLE9BQUEsRUFDQTRJLEVBQUFSLEVBQUFTLEVBQUFKLEVBQUFYLEVBQUFDLFFBQ1UsR0FBQUssRUFBQVMsRUFBQTlPLEVBQUFpRyxPQUFBOEgsRUFBQUMsR0FBQSxDQUNWYSxFQUFBUixFQUFBUyxFQUFBOU8sRUFBQWlHLE9BQUE4SCxFQUFBQyxHQUNBVSxFQUFBMU8sRUFBQWlHLE9BQUEsTUFDVSxDQUNWeUksRUFBQTFPLEVBQUFpRyxPQUNBNEksRUFBQVIsRUFHQSxNQUFBLENBQ0FBLEtBQUFRLEVBQ0E1SSxLQUFBeUksR0FJQSxTQUFBSSxFQUFBN0ksRUFBQThILEVBQUFDLEdBQ0EsSUFBQVEsRUFBQVYsR0FBQTdILEVBQUE4SCxFQUFBQyxHQUNBZSxFQUFBakIsR0FBQTdILEVBQUEsRUFBQThILEVBQUFDLEdBQ0EsT0FBQWYsR0FBQWhILEdBQUF1SSxFQUFBTyxHQUFBLEVBb0NBLFNBQUFDLEdBQUFoUCxHQUNBLE9BQUE0TyxHQUFBNU8sRUFBQTNFLEtBQUE0VCxNQUFBbEIsSUFBQTFTLEtBQUE0VCxNQUFBakIsS0FBQUssS0FoQ0FqTixFQUFBLElBQUEsQ0FBQSxLQUFBLEdBQUEsS0FBQSxRQUNBQSxFQUFBLElBQUEsQ0FBQSxLQUFBLEdBQUEsS0FBQSxXQUlBMEQsRUFBQSxPQUFBLEtBQ0FBLEVBQUEsVUFBQSxLQUlBWSxFQUFBLE9BQUEsR0FDQUEsRUFBQSxVQUFBLEdBSUE2QyxFQUFBLElBQUFiLEdBQ0FhLEVBQUEsS0FBQWIsRUFBQUosR0FDQWlCLEVBQUEsSUFBQWIsR0FDQWEsRUFBQSxLQUFBYixFQUFBSixHQUVBZ0MsR0FDQSxDQUFBLElBQUEsS0FBQSxJQUFBLE1BQ0EsU0FBQTFSLEVBQUF5VyxFQUFBOVEsRUFBQThELEdBQ0FnTixFQUFBaE4sRUFBQU4sT0FBQSxFQUFBLElBQUFzRixFQUFBek8sS0FZQSxJQUFBc1gsR0FBQSxDQUNBbkIsSUFBQSxFQUNBQyxJQUFBLEdBR0EsU0FBQW1CLEtBQ0EsT0FBQTlULEtBQUE0VCxNQUFBbEIsSUFHQSxTQUFBcUIsS0FDQSxPQUFBL1QsS0FBQTRULE1BQUFqQixJQUtBLFNBQUFxQixHQUFBelgsR0FDQSxJQUFBeVcsRUFBQWhULEtBQUFvRyxhQUFBNE0sS0FBQWhULE1BQ0EsT0FBQXpELEdBQUEsS0FBQXlXLEVBQUFoVCxLQUFBaVUsS0FBQTFYLEVBQUF5VyxHQUFBLEVBQUEsS0FHQSxTQUFBa0IsR0FBQTNYLEdBQ0EsSUFBQXlXLEVBQUFPLEdBQUF2VCxLQUFBLEVBQUEsR0FBQWdULEtBQ0EsT0FBQXpXLEdBQUEsS0FBQXlXLEVBQUFoVCxLQUFBaVUsS0FBQTFYLEVBQUF5VyxHQUFBLEVBQUEsS0FnRUEsU0FBQW1CLEdBQUE1WCxFQUFBK0IsR0FDQSxVQUFBL0IsSUFBQSxTQUNBLE9BQUFBLEVBR0EsSUFBQWdFLE1BQUFoRSxHQUNBLE9BQUF1VixTQUFBdlYsRUFBQSxJQUdBQSxFQUFBK0IsRUFBQThWLGNBQUE3WCxHQUNBLFVBQUFBLElBQUEsU0FDQSxPQUFBQSxFQUdBLE9BQUEsS0FHQSxTQUFBOFgsR0FBQTlYLEVBQUErQixHQUNBLFVBQUEvQixJQUFBLFNBQ0EsT0FBQStCLEVBQUE4VixjQUFBN1gsR0FBQSxHQUFBLEVBRUEsT0FBQWdFLE1BQUFoRSxHQUFBLEtBQUFBLEVBSUEsU0FBQStYLEdBQUFDLEVBQUF2RixHQUNBLE9BQUF1RixFQUFBdlIsTUFBQWdNLEVBQUEsR0FBQXdGLE9BQUFELEVBQUF2UixNQUFBLEVBQUFnTSxJQXJGQWpKLEVBQUEsSUFBQSxFQUFBLEtBQUEsT0FFQUEsRUFBQSxLQUFBLEVBQUEsRUFBQSxTQUFBMUgsR0FDQSxPQUFBMkIsS0FBQW9HLGFBQUFxTyxZQUFBelUsS0FBQTNCLEtBR0EwSCxFQUFBLE1BQUEsRUFBQSxFQUFBLFNBQUExSCxHQUNBLE9BQUEyQixLQUFBb0csYUFBQXNPLGNBQUExVSxLQUFBM0IsS0FHQTBILEVBQUEsT0FBQSxFQUFBLEVBQUEsU0FBQTFILEdBQ0EsT0FBQTJCLEtBQUFvRyxhQUFBdU8sU0FBQTNVLEtBQUEzQixLQUdBMEgsRUFBQSxJQUFBLEVBQUEsRUFBQSxXQUNBQSxFQUFBLElBQUEsRUFBQSxFQUFBLGNBSUEwRCxFQUFBLE1BQUEsS0FDQUEsRUFBQSxVQUFBLEtBQ0FBLEVBQUEsYUFBQSxLQUdBWSxFQUFBLE1BQUEsSUFDQUEsRUFBQSxVQUFBLElBQ0FBLEVBQUEsYUFBQSxJQUlBNkMsRUFBQSxJQUFBYixHQUNBYSxFQUFBLElBQUFiLEdBQ0FhLEVBQUEsSUFBQWIsR0FDQWEsRUFBQSxLQUFBLFNBQUFHLEVBQUEvTyxHQUNBLE9BQUFBLEVBQUFzVyxpQkFBQXZILEtBRUFILEVBQUEsTUFBQSxTQUFBRyxFQUFBL08sR0FDQSxPQUFBQSxFQUFBdVcsbUJBQUF4SCxLQUVBSCxFQUFBLE9BQUEsU0FBQUcsRUFBQS9PLEdBQ0EsT0FBQUEsRUFBQXdXLGNBQUF6SCxLQUdBWSxHQUFBLENBQUEsS0FBQSxNQUFBLFFBQUEsU0FBQTFSLEVBQUF5VyxFQUFBOVEsRUFBQThELEdBQ0EsSUFBQWlOLEVBQUEvUSxFQUFBRixRQUFBb1MsY0FBQTdYLEVBQUF5SixFQUFBOUQsRUFBQXZCLFNBRUEsR0FBQXNTLEdBQUEsS0FDQUQsRUFBQXZLLEVBQUF3SyxPQUVBdFQsRUFBQXVDLEdBQUF4QixlQUFBbkUsSUFJQTBSLEdBQUEsQ0FBQSxJQUFBLElBQUEsS0FBQSxTQUFBMVIsRUFBQXlXLEVBQUE5USxFQUFBOEQsR0FDQWdOLEVBQUFoTixHQUFBZ0YsRUFBQXpPLEtBa0NBLElBQUF3WSxHQUNBLDJEQUFBckYsTUFBQSxLQUNBc0YsR0FBQSw4QkFBQXRGLE1BQUEsS0FDQXVGLEdBQUEsdUJBQUF2RixNQUFBLEtBQ0F3RixHQUFBbEksR0FDQW1JLEdBQUFuSSxHQUNBb0ksR0FBQXBJLEdBRUEsU0FBQXFJLEdBQUF6VixFQUFBdkIsR0FDQSxJQUFBc1csRUFBQXJZLEVBQUEwRCxLQUFBc1YsV0FDQXRWLEtBQUFzVixVQUNBdFYsS0FBQXNWLFVBQ0ExVixHQUFBQSxJQUFBLE1BQUFJLEtBQUFzVixVQUFBckYsU0FBQWpKLEtBQUEzSSxHQUNBLFNBQ0EsY0FFQSxPQUFBdUIsSUFBQSxLQUNBMFUsR0FBQUssRUFBQTNVLEtBQUE0VCxNQUFBbEIsS0FDQTlTLEVBQ0ErVSxFQUFBL1UsRUFBQTJWLE9BQ0FaLEVBR0EsU0FBQWEsR0FBQTVWLEdBQ0EsT0FBQUEsSUFBQSxLQUNBMFUsR0FBQXRVLEtBQUF5VixlQUFBelYsS0FBQTRULE1BQUFsQixLQUNBOVMsRUFDQUksS0FBQXlWLGVBQUE3VixFQUFBMlYsT0FDQXZWLEtBQUF5VixlQUdBLFNBQUFDLEdBQUE5VixHQUNBLE9BQUFBLElBQUEsS0FDQTBVLEdBQUF0VSxLQUFBMlYsYUFBQTNWLEtBQUE0VCxNQUFBbEIsS0FDQTlTLEVBQ0FJLEtBQUEyVixhQUFBL1YsRUFBQTJWLE9BQ0F2VixLQUFBMlYsYUFHQSxTQUFBQyxHQUFBQyxFQUFBeFgsRUFBQUUsR0FDQSxJQUFBUixFQUNBdVMsRUFDQTNMLEVBQ0E0TCxFQUFBc0YsRUFBQXJGLG9CQUNBLElBQUF4USxLQUFBOFYsZUFBQSxDQUNBOVYsS0FBQThWLGVBQUEsR0FDQTlWLEtBQUErVixvQkFBQSxHQUNBL1YsS0FBQWdXLGtCQUFBLEdBRUEsSUFBQWpZLEVBQUEsRUFBd0JBLEVBQUEsSUFBT0EsRUFBQSxDQUMvQjRHLEVBQUF2RyxFQUFBLENBQUEsSUFBQSxJQUFBbVgsSUFBQXhYLEdBQ0FpQyxLQUFBZ1csa0JBQUFqWSxHQUFBaUMsS0FBQXlVLFlBQ0E5UCxFQUNBLElBQ0E2TCxvQkFDQXhRLEtBQUErVixvQkFBQWhZLEdBQUFpQyxLQUFBMFUsY0FDQS9QLEVBQ0EsSUFDQTZMLG9CQUNBeFEsS0FBQThWLGVBQUEvWCxHQUFBaUMsS0FBQTJVLFNBQUFoUSxFQUFBLElBQUE2TCxxQkFJQSxHQUFBalMsRUFDQSxHQUFBRixJQUFBLE9BQUEsQ0FDQWlTLEVBQUF4QixFQUFBbFMsS0FBQW9ELEtBQUE4VixlQUFBdkYsR0FDQSxPQUFBRCxLQUFBLEVBQUFBLEVBQUEsVUFDYyxHQUFBalMsSUFBQSxNQUFBLENBQ2RpUyxFQUFBeEIsRUFBQWxTLEtBQUFvRCxLQUFBK1Ysb0JBQUF4RixHQUNBLE9BQUFELEtBQUEsRUFBQUEsRUFBQSxTQUNjLENBQ2RBLEVBQUF4QixFQUFBbFMsS0FBQW9ELEtBQUFnVyxrQkFBQXpGLEdBQ0EsT0FBQUQsS0FBQSxFQUFBQSxFQUFBLFVBR0EsR0FBQWpTLElBQUEsT0FBQSxDQUNBaVMsRUFBQXhCLEVBQUFsUyxLQUFBb0QsS0FBQThWLGVBQUF2RixHQUNBLEdBQUFELEtBQUEsRUFDQSxPQUFBQSxFQUVBQSxFQUFBeEIsRUFBQWxTLEtBQUFvRCxLQUFBK1Ysb0JBQUF4RixHQUNBLEdBQUFELEtBQUEsRUFDQSxPQUFBQSxFQUVBQSxFQUFBeEIsRUFBQWxTLEtBQUFvRCxLQUFBZ1csa0JBQUF6RixHQUNBLE9BQUFELEtBQUEsRUFBQUEsRUFBQSxVQUNjLEdBQUFqUyxJQUFBLE1BQUEsQ0FDZGlTLEVBQUF4QixFQUFBbFMsS0FBQW9ELEtBQUErVixvQkFBQXhGLEdBQ0EsR0FBQUQsS0FBQSxFQUNBLE9BQUFBLEVBRUFBLEVBQUF4QixFQUFBbFMsS0FBQW9ELEtBQUE4VixlQUFBdkYsR0FDQSxHQUFBRCxLQUFBLEVBQ0EsT0FBQUEsRUFFQUEsRUFBQXhCLEVBQUFsUyxLQUFBb0QsS0FBQWdXLGtCQUFBekYsR0FDQSxPQUFBRCxLQUFBLEVBQUFBLEVBQUEsU0FDYyxDQUNkQSxFQUFBeEIsRUFBQWxTLEtBQUFvRCxLQUFBZ1csa0JBQUF6RixHQUNBLEdBQUFELEtBQUEsRUFDQSxPQUFBQSxFQUVBQSxFQUFBeEIsRUFBQWxTLEtBQUFvRCxLQUFBOFYsZUFBQXZGLEdBQ0EsR0FBQUQsS0FBQSxFQUNBLE9BQUFBLEVBRUFBLEVBQUF4QixFQUFBbFMsS0FBQW9ELEtBQUErVixvQkFBQXhGLEdBQ0EsT0FBQUQsS0FBQSxFQUFBQSxFQUFBLE1BS0EsU0FBQTJGLEdBQUFKLEVBQUF4WCxFQUFBRSxHQUNBLElBQUFSLEVBQUE0RyxFQUFBd0ksRUFFQSxHQUFBbk4sS0FBQWtXLG9CQUNBLE9BQUFOLEdBQUFoWixLQUFBb0QsS0FBQTZWLEVBQUF4WCxFQUFBRSxHQUdBLElBQUF5QixLQUFBOFYsZUFBQSxDQUNBOVYsS0FBQThWLGVBQUEsR0FDQTlWLEtBQUFnVyxrQkFBQSxHQUNBaFcsS0FBQStWLG9CQUFBLEdBQ0EvVixLQUFBbVcsbUJBQUEsR0FHQSxJQUFBcFksRUFBQSxFQUFvQkEsRUFBQSxFQUFPQSxJQUFBLENBRzNCNEcsRUFBQXZHLEVBQUEsQ0FBQSxJQUFBLElBQUFtWCxJQUFBeFgsR0FDQSxHQUFBUSxJQUFBeUIsS0FBQW1XLG1CQUFBcFksR0FBQSxDQUNBaUMsS0FBQW1XLG1CQUFBcFksR0FBQSxJQUFBNEYsT0FDQSxJQUFBM0QsS0FBQTJVLFNBQUFoUSxFQUFBLElBQUE0QixRQUFBLElBQUEsUUFBQSxJQUNBLEtBRUF2RyxLQUFBK1Ysb0JBQUFoWSxHQUFBLElBQUE0RixPQUNBLElBQUEzRCxLQUFBMFUsY0FBQS9QLEVBQUEsSUFBQTRCLFFBQUEsSUFBQSxRQUFBLElBQ0EsS0FFQXZHLEtBQUFnVyxrQkFBQWpZLEdBQUEsSUFBQTRGLE9BQ0EsSUFBQTNELEtBQUF5VSxZQUFBOVAsRUFBQSxJQUFBNEIsUUFBQSxJQUFBLFFBQUEsSUFDQSxLQUdBLElBQUF2RyxLQUFBOFYsZUFBQS9YLEdBQUEsQ0FDQW9QLEVBQ0EsSUFDQW5OLEtBQUEyVSxTQUFBaFEsRUFBQSxJQUNBLEtBQ0EzRSxLQUFBMFUsY0FBQS9QLEVBQUEsSUFDQSxLQUNBM0UsS0FBQXlVLFlBQUE5UCxFQUFBLElBQ0EzRSxLQUFBOFYsZUFBQS9YLEdBQUEsSUFBQTRGLE9BQUF3SixFQUFBNUcsUUFBQSxJQUFBLElBQUEsS0FHQSxHQUNBaEksR0FDQUYsSUFBQSxRQUNBMkIsS0FBQW1XLG1CQUFBcFksR0FBQWlKLEtBQUE2TyxHQUVBLE9BQUE5WCxPQUNjLEdBQ2RRLEdBQ0FGLElBQUEsT0FDQTJCLEtBQUErVixvQkFBQWhZLEdBQUFpSixLQUFBNk8sR0FFQSxPQUFBOVgsT0FDYyxHQUNkUSxHQUNBRixJQUFBLE1BQ0EyQixLQUFBZ1csa0JBQUFqWSxHQUFBaUosS0FBQTZPLEdBRUEsT0FBQTlYLE9BQ2MsSUFBQVEsR0FBQXlCLEtBQUE4VixlQUFBL1gsR0FBQWlKLEtBQUE2TyxHQUNkLE9BQUE5WCxHQU9BLFNBQUFxWSxHQUFBN1osR0FDQSxJQUFBeUQsS0FBQUUsVUFDQSxPQUFBM0QsR0FBQSxLQUFBeUQsS0FBQWdCLElBRUEsSUFBQXVVLEVBQUF2VixLQUFBOEIsT0FBQTlCLEtBQUFRLEdBQUFzUyxZQUFBOVMsS0FBQVEsR0FBQTZWLFNBQ0EsR0FBQTlaLEdBQUEsS0FBQSxDQUNBQSxFQUFBNFgsR0FBQTVYLEVBQUF5RCxLQUFBb0csY0FDQSxPQUFBcEcsS0FBQWlVLElBQUExWCxFQUFBZ1osRUFBQSxVQUVBLE9BQUFBLEVBSUEsU0FBQWUsR0FBQS9aLEdBQ0EsSUFBQXlELEtBQUFFLFVBQ0EsT0FBQTNELEdBQUEsS0FBQXlELEtBQUFnQixJQUVBLElBQUFpUyxHQUFBalQsS0FBQXVWLE1BQUEsRUFBQXZWLEtBQUFvRyxhQUFBd04sTUFBQWxCLEtBQUEsRUFDQSxPQUFBblcsR0FBQSxLQUFBMFcsRUFBQWpULEtBQUFpVSxJQUFBMVgsRUFBQTBXLEVBQUEsS0FHQSxTQUFBc0QsR0FBQWhhLEdBQ0EsSUFBQXlELEtBQUFFLFVBQ0EsT0FBQTNELEdBQUEsS0FBQXlELEtBQUFnQixJQU9BLEdBQUF6RSxHQUFBLEtBQUEsQ0FDQSxJQUFBMFcsRUFBQW9CLEdBQUE5WCxFQUFBeUQsS0FBQW9HLGNBQ0EsT0FBQXBHLEtBQUF1VixJQUFBdlYsS0FBQXVWLE1BQUEsRUFBQXRDLEVBQUFBLEVBQUEsUUFFQSxPQUFBalQsS0FBQXVWLE9BQUEsRUFJQSxTQUFBVCxHQUFBekgsR0FDQSxHQUFBck4sS0FBQWtXLG9CQUFBLENBQ0EsSUFBQXBaLEVBQUFrRCxLQUFBLGtCQUNBd1csR0FBQTVaLEtBQUFvRCxNQUVBLEdBQUFxTixFQUNBLE9BQUFyTixLQUFBeVcsMEJBRUEsT0FBQXpXLEtBQUEwVyxtQkFFVSxDQUNWLElBQUE1WixFQUFBa0QsS0FBQSxrQkFDQUEsS0FBQTBXLGVBQUF4QixHQUVBLE9BQUFsVixLQUFBeVcsc0JBQUFwSixFQUNBck4sS0FBQXlXLHFCQUNBelcsS0FBQTBXLGdCQUlBLFNBQUE3QixHQUFBeEgsR0FDQSxHQUFBck4sS0FBQWtXLG9CQUFBLENBQ0EsSUFBQXBaLEVBQUFrRCxLQUFBLGtCQUNBd1csR0FBQTVaLEtBQUFvRCxNQUVBLEdBQUFxTixFQUNBLE9BQUFyTixLQUFBMlcsK0JBRUEsT0FBQTNXLEtBQUE0Vyx3QkFFVSxDQUNWLElBQUE5WixFQUFBa0QsS0FBQSx1QkFDQUEsS0FBQTRXLG9CQUFBekIsR0FFQSxPQUFBblYsS0FBQTJXLDJCQUFBdEosRUFDQXJOLEtBQUEyVywwQkFDQTNXLEtBQUE0VyxxQkFJQSxTQUFBaEMsR0FBQXZILEdBQ0EsR0FBQXJOLEtBQUFrVyxvQkFBQSxDQUNBLElBQUFwWixFQUFBa0QsS0FBQSxrQkFDQXdXLEdBQUE1WixLQUFBb0QsTUFFQSxHQUFBcU4sRUFDQSxPQUFBck4sS0FBQTZXLDZCQUVBLE9BQUE3VyxLQUFBOFcsc0JBRVUsQ0FDVixJQUFBaGEsRUFBQWtELEtBQUEscUJBQ0FBLEtBQUE4VyxrQkFBQTFCLEdBRUEsT0FBQXBWLEtBQUE2Vyx5QkFBQXhKLEVBQ0FyTixLQUFBNlcsd0JBQ0E3VyxLQUFBOFcsbUJBSUEsU0FBQU4sS0FDQSxTQUFBaEYsRUFBQXpVLEVBQUFDLEdBQ0EsT0FBQUEsRUFBQUssT0FBQU4sRUFBQU0sT0FHQSxJQUFBMFosRUFBQSxHQUNBdEYsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQTVULEVBQ0E0RyxFQUNBcVMsRUFDQUMsRUFDQUMsRUFDQSxJQUFBblosRUFBQSxFQUFvQkEsRUFBQSxFQUFPQSxJQUFBLENBRTNCNEcsRUFBQXZHLEVBQUEsQ0FBQSxJQUFBLElBQUFtWCxJQUFBeFgsR0FDQWlaLEVBQUF4SixFQUFBeE4sS0FBQXlVLFlBQUE5UCxFQUFBLEtBQ0FzUyxFQUFBekosRUFBQXhOLEtBQUEwVSxjQUFBL1AsRUFBQSxLQUNBdVMsRUFBQTFKLEVBQUF4TixLQUFBMlUsU0FBQWhRLEVBQUEsS0FDQW9TLEVBQUE5WSxLQUFBK1ksR0FDQXZGLEVBQUF4VCxLQUFBZ1osR0FDQXZGLEVBQUF6VCxLQUFBaVosR0FDQXZGLEVBQUExVCxLQUFBK1ksR0FDQXJGLEVBQUExVCxLQUFBZ1osR0FDQXRGLEVBQUExVCxLQUFBaVosR0FJQUgsRUFBQXJNLEtBQUE4RyxHQUNBQyxFQUFBL0csS0FBQThHLEdBQ0FFLEVBQUFoSCxLQUFBOEcsR0FDQUcsRUFBQWpILEtBQUE4RyxHQUVBeFIsS0FBQTBXLGVBQUEsSUFBQS9TLE9BQUEsS0FBQWdPLEVBQUExTyxLQUFBLEtBQUEsSUFBQSxLQUNBakQsS0FBQTRXLG9CQUFBNVcsS0FBQTBXLGVBQ0ExVyxLQUFBOFcsa0JBQUE5VyxLQUFBMFcsZUFFQTFXLEtBQUF5VyxxQkFBQSxJQUFBOVMsT0FDQSxLQUFBK04sRUFBQXpPLEtBQUEsS0FBQSxJQUNBLEtBRUFqRCxLQUFBMlcsMEJBQUEsSUFBQWhULE9BQ0EsS0FBQThOLEVBQUF4TyxLQUFBLEtBQUEsSUFDQSxLQUVBakQsS0FBQTZXLHdCQUFBLElBQUFsVCxPQUNBLEtBQUFvVCxFQUFBOVQsS0FBQSxLQUFBLElBQ0EsS0FNQSxTQUFBa1UsS0FDQSxPQUFBblgsS0FBQW9YLFFBQUEsSUFBQSxHQUdBLFNBQUFDLEtBQ0EsT0FBQXJYLEtBQUFvWCxTQUFBLEdBaUNBLFNBQUE1WCxHQUFBd0csRUFBQXNSLEdBQ0F2UixFQUFBQyxFQUFBLEVBQUEsRUFBQSxXQUNBLE9BQUFoRyxLQUFBb0csYUFBQTVHLFNBQ0FRLEtBQUFvWCxRQUNBcFgsS0FBQXVYLFVBQ0FELEtBaUJBLFNBQUFFLEdBQUFuSyxFQUFBL08sR0FDQSxPQUFBQSxFQUFBbVosZUEyREEsU0FBQUMsR0FBQW5iLEdBR0EsT0FBQUEsRUFBQSxJQUFBc04sY0FBQThOLE9BQUEsS0FBQSxJQW5IQTVSLEVBQUEsSUFBQSxDQUFBLEtBQUEsR0FBQSxFQUFBLFFBQ0FBLEVBQUEsSUFBQSxDQUFBLEtBQUEsR0FBQSxFQUFBb1IsSUFDQXBSLEVBQUEsSUFBQSxDQUFBLEtBQUEsR0FBQSxFQUFBc1IsSUFFQXRSLEVBQUEsTUFBQSxFQUFBLEVBQUEsV0FDQSxNQUFBLEdBQUFvUixHQUFBamIsTUFBQThELE1BQUErRSxFQUFBL0UsS0FBQXVYLFVBQUEsS0FHQXhSLEVBQUEsUUFBQSxFQUFBLEVBQUEsV0FDQSxNQUNBLEdBQ0FvUixHQUFBamIsTUFBQThELE1BQ0ErRSxFQUFBL0UsS0FBQXVYLFVBQUEsR0FDQXhTLEVBQUEvRSxLQUFBNFgsVUFBQSxLQUlBN1IsRUFBQSxNQUFBLEVBQUEsRUFBQSxXQUNBLE1BQUEsR0FBQS9GLEtBQUFvWCxRQUFBclMsRUFBQS9FLEtBQUF1WCxVQUFBLEtBR0F4UixFQUFBLFFBQUEsRUFBQSxFQUFBLFdBQ0EsTUFDQSxHQUNBL0YsS0FBQW9YLFFBQ0FyUyxFQUFBL0UsS0FBQXVYLFVBQUEsR0FDQXhTLEVBQUEvRSxLQUFBNFgsVUFBQSxLQWNBcFksR0FBQSxJQUFBLE1BQ0FBLEdBQUEsSUFBQSxPQUlBaUssRUFBQSxPQUFBLEtBR0FZLEVBQUEsT0FBQSxJQVFBNkMsRUFBQSxJQUFBc0ssSUFDQXRLLEVBQUEsSUFBQXNLLElBQ0F0SyxFQUFBLElBQUFiLEdBQ0FhLEVBQUEsSUFBQWIsR0FDQWEsRUFBQSxJQUFBYixHQUNBYSxFQUFBLEtBQUFiLEVBQUFKLEdBQ0FpQixFQUFBLEtBQUFiLEVBQUFKLEdBQ0FpQixFQUFBLEtBQUFiLEVBQUFKLEdBRUFpQixFQUFBLE1BQUFaLElBQ0FZLEVBQUEsUUFBQVgsSUFDQVcsRUFBQSxNQUFBWixJQUNBWSxFQUFBLFFBQUFYLElBRUF3QixFQUFBLENBQUEsSUFBQSxNQUFBUyxHQUNBVCxFQUFBLENBQUEsSUFBQSxNQUFBLFNBQUF4UixFQUFBa0ssRUFBQXZFLEdBQ0EsSUFBQTJWLEVBQUE3TSxFQUFBek8sR0FDQWtLLEVBQUErSCxHQUFBcUosSUFBQSxHQUFBLEVBQUFBLElBRUE5SixFQUFBLENBQUEsSUFBQSxLQUFBLFNBQUF4UixFQUFBa0ssRUFBQXZFLEdBQ0FBLEVBQUE0VixNQUFBNVYsRUFBQUYsUUFBQStWLEtBQUF4YixHQUNBMkYsRUFBQThWLFVBQUF6YixJQUVBd1IsRUFBQSxDQUFBLElBQUEsTUFBQSxTQUFBeFIsRUFBQWtLLEVBQUF2RSxHQUNBdUUsRUFBQStILEdBQUF4RCxFQUFBek8sR0FDQW9ELEVBQUF1QyxHQUFBdEIsUUFBQSxPQUVBbU4sRUFBQSxNQUFBLFNBQUF4UixFQUFBa0ssRUFBQXZFLEdBQ0EsSUFBQStWLEVBQUExYixFQUFBYyxPQUFBLEVBQ0FvSixFQUFBK0gsR0FBQXhELEVBQUF6TyxFQUFBbUosT0FBQSxFQUFBdVMsSUFDQXhSLEVBQUFnSSxHQUFBekQsRUFBQXpPLEVBQUFtSixPQUFBdVMsSUFDQXRZLEVBQUF1QyxHQUFBdEIsUUFBQSxPQUVBbU4sRUFBQSxRQUFBLFNBQUF4UixFQUFBa0ssRUFBQXZFLEdBQ0EsSUFBQWdXLEVBQUEzYixFQUFBYyxPQUFBLEVBQ0E4YSxFQUFBNWIsRUFBQWMsT0FBQSxFQUNBb0osRUFBQStILEdBQUF4RCxFQUFBek8sRUFBQW1KLE9BQUEsRUFBQXdTLElBQ0F6UixFQUFBZ0ksR0FBQXpELEVBQUF6TyxFQUFBbUosT0FBQXdTLEVBQUEsSUFDQXpSLEVBQUFpSSxHQUFBMUQsRUFBQXpPLEVBQUFtSixPQUFBeVMsSUFDQXhZLEVBQUF1QyxHQUFBdEIsUUFBQSxPQUVBbU4sRUFBQSxNQUFBLFNBQUF4UixFQUFBa0ssRUFBQXZFLEdBQ0EsSUFBQStWLEVBQUExYixFQUFBYyxPQUFBLEVBQ0FvSixFQUFBK0gsR0FBQXhELEVBQUF6TyxFQUFBbUosT0FBQSxFQUFBdVMsSUFDQXhSLEVBQUFnSSxHQUFBekQsRUFBQXpPLEVBQUFtSixPQUFBdVMsTUFFQWxLLEVBQUEsUUFBQSxTQUFBeFIsRUFBQWtLLEVBQUF2RSxHQUNBLElBQUFnVyxFQUFBM2IsRUFBQWMsT0FBQSxFQUNBOGEsRUFBQTViLEVBQUFjLE9BQUEsRUFDQW9KLEVBQUErSCxHQUFBeEQsRUFBQXpPLEVBQUFtSixPQUFBLEVBQUF3UyxJQUNBelIsRUFBQWdJLEdBQUF6RCxFQUFBek8sRUFBQW1KLE9BQUF3UyxFQUFBLElBQ0F6UixFQUFBaUksR0FBQTFELEVBQUF6TyxFQUFBbUosT0FBQXlTLE1BV0EsSUFBQUMsR0FLQUMsR0FBQWhOLEdBQUEsUUFBQSxNQUVBLFNBQUFpTixHQUFBbEIsRUFBQUcsRUFBQWdCLEdBQ0EsR0FBQW5CLEVBQUEsR0FDQSxPQUFBbUIsRUFBQSxLQUFBLFVBRUEsT0FBQUEsRUFBQSxLQUFBLEtBSUEsSUFBQUMsR0FBQSxDQUNBOVQsU0FBQVAsR0FDQTJDLGVBQUFHLEdBQ0FOLFlBQUFpQixHQUNBMUIsUUFBQTRCLEdBQ0EyUSx1QkFBQTFRLEdBQ0FrQixhQUFBaEIsR0FFQW9ILE9BQUFJLEdBQ0FMLFlBQUFPLEdBRUFxRCxLQUFBYSxHQUVBYyxTQUFBSSxHQUNBTixZQUFBUSxHQUNBUCxjQUFBTSxHQUVBMEQsY0FoQ0EsaUJBb0NBQyxFQUFBLEdBQ0FDLEdBQUEsR0FDQUMsR0FFQSxTQUFBQyxHQUFBQyxFQUFBQyxHQUNBLElBQUFqYixFQUNBa2IsRUFBQTdULEtBQUE0TCxJQUFBK0gsRUFBQTFiLE9BQUEyYixFQUFBM2IsUUFDQSxJQUFBVSxFQUFBLEVBQW9CQSxFQUFBa2IsRUFBVWxiLEdBQUEsRUFDOUIsR0FBQWdiLEVBQUFoYixLQUFBaWIsRUFBQWpiLEdBQ0EsT0FBQUEsRUFHQSxPQUFBa2IsRUFHQSxTQUFBQyxHQUFBcFcsR0FDQSxPQUFBQSxFQUFBQSxFQUFBK0csY0FBQXRELFFBQUEsSUFBQSxLQUFBekQsRUFNQSxTQUFBcVcsR0FBQUMsR0FDQSxJQUFBcmIsRUFBQSxFQUNBc2IsRUFDQUMsRUFDQWhiLEVBQ0FvUixFQUVBLE1BQUEzUixFQUFBcWIsRUFBQS9iLE9BQUEsQ0FDQXFTLEVBQUF3SixHQUFBRSxFQUFBcmIsSUFBQTJSLE1BQUEsS0FDQTJKLEVBQUEzSixFQUFBclMsT0FDQWljLEVBQUFKLEdBQUFFLEVBQUFyYixFQUFBLElBQ0F1YixFQUFBQSxFQUFBQSxFQUFBNUosTUFBQSxLQUFBLEtBQ0EsTUFBQTJKLEVBQUEsRUFBQSxDQUNBL2EsRUFBQWliLEdBQUE3SixFQUFBMU0sTUFBQSxFQUFBcVcsR0FBQXBXLEtBQUEsTUFDQSxHQUFBM0UsRUFDQSxPQUFBQSxFQUVBLEdBQ0FnYixHQUNBQSxFQUFBamMsUUFBQWdjLEdBQ0FQLEdBQUFwSixFQUFBNEosSUFBQUQsRUFBQSxFQUdBLE1BRUFBLElBRUF0YixJQUVBLE9BQUE4YSxHQUdBLFNBQUFXLEdBQUFuVyxHQUVBLE9BQUFBLEVBQUFpRCxNQUFBLGdCQUFBLEtBR0EsU0FBQWlULEdBQUFsVyxHQUNBLElBQUFvVyxFQUFBLEtBQ0FDLEVBRUEsR0FDQWYsRUFBQXRWLEtBQUF4QyxXQUNZLFdBQWEsYUFDekJoRixJQUNBQSxHQUFBQyxTQUNBMGQsR0FBQW5XLEdBRUEsSUFDQW9XLEVBQUFaLEdBQUFjLE1BQ0FELEVBQWlDN1ksVUFDakIrWSxHQUFBLHFEQUFBQSxDQUFlLEtBQVd2VyxHQUMxQ3dXLEdBQUFKLEdBQ2MsTUFBQWxlLEdBR2RvZCxFQUFBdFYsR0FBQSxLQUdBLE9BQUFzVixFQUFBdFYsR0FNQSxTQUFBd1csR0FBQS9XLEVBQUFnWCxHQUNBLElBQUFDLEVBQ0EsR0FBQWpYLEVBQUEsQ0FDQSxHQUFBdkYsRUFBQXVjLEdBQ0FDLEVBQUFDLEdBQUFsWCxRQUVBaVgsRUFBQUUsR0FBQW5YLEVBQUFnWCxHQUdBLEdBQUFDLEVBRUFsQixHQUFBa0IsT0FFQSxVQUFBdlgsVUFBQSxhQUFBQSxRQUFBSCxLQUVBRyxRQUFBSCxLQUNBLFVBQUFTLEVBQUEsMENBTUEsT0FBQStWLEdBQUFjLE1BR0EsU0FBQU0sR0FBQTVXLEVBQUFuQixHQUNBLEdBQUFBLElBQUEsS0FBQSxDQUNBLElBQUE1RCxFQUNBMEYsRUFBQXdVLEdBQ0F0VyxFQUFBZ1ksS0FBQTdXLEVBQ0EsR0FBQXNWLEVBQUF0VixJQUFBLEtBQUEsQ0FDQUQsR0FDQSx1QkFDQSx5REFDQSx1REFDQSx5REFDQSwyRUFFQVksRUFBQTJVLEVBQUF0VixHQUFBSSxhQUNjLEdBQUF2QixFQUFBaVksY0FBQSxLQUNkLEdBQUF4QixFQUFBelcsRUFBQWlZLGVBQUEsS0FDQW5XLEVBQUEyVSxFQUFBelcsRUFBQWlZLGNBQUExVyxZQUNrQixDQUNsQm5GLEVBQUFpYixHQUFBclgsRUFBQWlZLGNBQ0EsR0FBQTdiLEdBQUEsS0FDQTBGLEVBQUExRixFQUFBbUYsWUFDc0IsQ0FDdEIsSUFBQW1WLEdBQUExVyxFQUFBaVksY0FDQXZCLEdBQUExVyxFQUFBaVksY0FBQSxHQUVBdkIsR0FBQTFXLEVBQUFpWSxjQUFBbGMsS0FBQSxDQUNBb0YsS0FBQUEsRUFDQW5CLE9BQUFBLElBRUEsT0FBQSxNQUlBeVcsRUFBQXRWLEdBQUEsSUFBQWEsR0FBQUgsR0FBQUMsRUFBQTlCLElBRUEsR0FBQTBXLEdBQUF2VixHQUNBdVYsR0FBQXZWLEdBQUErVyxRQUFBLFNBQUFuTCxHQUNBZ0wsR0FBQWhMLEVBQUE1TCxLQUFBNEwsRUFBQS9NLFVBT0EyWCxHQUFBeFcsR0FFQSxPQUFBc1YsRUFBQXRWLE9BQ1UsUUFFVnNWLEVBQUF0VixHQUNBLE9BQUEsTUFJQSxTQUFBZ1gsR0FBQWhYLEVBQUFuQixHQUNBLEdBQUFBLEdBQUEsS0FBQSxDQUNBLElBQUE1RCxFQUNBZ2MsRUFDQXRXLEVBQUF3VSxHQUVBLEdBQUFHLEVBQUF0VixJQUFBLE1BQUFzVixFQUFBdFYsR0FBQThXLGNBQUEsS0FFQXhCLEVBQUF0VixHQUFBRyxJQUFBTyxHQUFBNFUsRUFBQXRWLEdBQUFJLFFBQUF2QixRQUNjLENBRWRvWSxFQUFBZixHQUFBbFcsR0FDQSxHQUFBaVgsR0FBQSxLQUNBdFcsRUFBQXNXLEVBQUE3VyxRQUVBdkIsRUFBQTZCLEdBQUFDLEVBQUE5QixHQUNBLEdBQUFvWSxHQUFBLEtBSUFwWSxFQUFBZ1ksS0FBQTdXLEVBRUEvRSxFQUFBLElBQUE0RixHQUFBaEMsR0FDQTVELEVBQUE2YixhQUFBeEIsRUFBQXRWLEdBQ0FzVixFQUFBdFYsR0FBQS9FLEVBSUF1YixHQUFBeFcsUUFHQSxHQUFBc1YsRUFBQXRWLElBQUEsS0FDQSxHQUFBc1YsRUFBQXRWLEdBQUE4VyxjQUFBLEtBQUEsQ0FDQXhCLEVBQUF0VixHQUFBc1YsRUFBQXRWLEdBQUE4VyxhQUNBLEdBQUE5VyxJQUFBd1csS0FDQUEsR0FBQXhXLFFBRWtCLEdBQUFzVixFQUFBdFYsSUFBQSxZQUNsQnNWLEVBQUF0VixHQUlBLE9BQUFzVixFQUFBdFYsR0FJQSxTQUFBMlcsR0FBQWxYLEdBQ0EsSUFBQXhFLEVBRUEsR0FBQXdFLEdBQUFBLEVBQUFkLFNBQUFjLEVBQUFkLFFBQUEyWCxNQUNBN1csRUFBQUEsRUFBQWQsUUFBQTJYLE1BR0EsSUFBQTdXLEVBQ0EsT0FBQStWLEdBR0EsSUFBQXZjLEVBQUF3RyxHQUFBLENBRUF4RSxFQUFBaWIsR0FBQXpXLEdBQ0EsR0FBQXhFLEVBQ0EsT0FBQUEsRUFFQXdFLEVBQUEsQ0FBQUEsR0FHQSxPQUFBcVcsR0FBQXJXLEdBR0EsU0FBQXlYLEtBQ0EsT0FBQTdlLEVBQUFpZCxHQUdBLFNBQUE2QixHQUFBNWEsR0FDQSxJQUFBZCxFQUNBL0IsRUFBQTZDLEVBQUF3TyxHQUVBLEdBQUFyUixHQUFBNEMsRUFBQUMsR0FBQWQsWUFBQSxFQUFBLENBQ0FBLEVBQ0EvQixFQUFBdVIsR0FBQSxHQUFBdlIsRUFBQXVSLEdBQUEsR0FDQUEsRUFDQXZSLEVBQUF3UixHQUFBLEdBQUF4UixFQUFBd1IsR0FBQTVDLEdBQUE1TyxFQUFBc1IsR0FBQXRSLEVBQUF1UixJQUNBQyxFQUNBeFIsRUFBQXlSLEdBQUEsR0FDQXpSLEVBQUF5UixHQUFBLElBQ0F6UixFQUFBeVIsS0FBQSxLQUNBelIsRUFBQTBSLEtBQUEsR0FDQTFSLEVBQUEyUixLQUFBLEdBQ0EzUixFQUFBNFIsTUFBQSxHQUNBSCxFQUNBelIsRUFBQTBSLEdBQUEsR0FBQTFSLEVBQUEwUixHQUFBLEdBQ0FBLEVBQ0ExUixFQUFBMlIsR0FBQSxHQUFBM1IsRUFBQTJSLEdBQUEsR0FDQUEsRUFDQTNSLEVBQUE0UixJQUFBLEdBQUE1UixFQUFBNFIsSUFBQSxJQUNBQSxJQUNBLEVBRUEsR0FDQWhQLEVBQUFDLEdBQUE2YSxxQkFDQTNiLEVBQUF1UCxHQUFBdlAsRUFBQXlQLEdBRUF6UCxFQUFBeVAsRUFFQSxHQUFBNU8sRUFBQUMsR0FBQThhLGdCQUFBNWIsS0FBQSxFQUNBQSxFQUFBOFAsR0FFQSxHQUFBalAsRUFBQUMsR0FBQSthLGtCQUFBN2IsS0FBQSxFQUNBQSxFQUFBK1AsR0FHQWxQLEVBQUFDLEdBQUFkLFNBQUFBLEVBR0EsT0FBQWMsRUFLQSxJQUFBZ2IsR0FDQSxpSkFDQUMsR0FDQSw2SUFDQUMsR0FBQSx3QkFDQUMsR0FBQSxDQUNBLENBQUEsZUFBQSx1QkFDQSxDQUFBLGFBQUEsbUJBQ0EsQ0FBQSxlQUFBLGtCQUNBLENBQUEsYUFBQSxjQUFpQyxPQUNqQyxDQUFBLFdBQUEsZUFDQSxDQUFBLFVBQUEsYUFBOEIsT0FDOUIsQ0FBQSxhQUFBLGNBQ0EsQ0FBQSxXQUFBLFNBQ0EsQ0FBQSxhQUFBLGVBQ0EsQ0FBQSxZQUFBLGNBQXNDLE9BQ3RDLENBQUEsVUFBQSxTQUNBLENBQUEsU0FBQSxRQUE2QixPQUM3QixDQUFBLE9BQUEsUUFBMkIsUUFHM0JDLEdBQUEsQ0FDQSxDQUFBLGdCQUFBLHVCQUNBLENBQUEsZ0JBQUEsc0JBQ0EsQ0FBQSxXQUFBLGtCQUNBLENBQUEsUUFBQSxhQUNBLENBQUEsY0FBQSxxQkFDQSxDQUFBLGNBQUEsb0JBQ0EsQ0FBQSxTQUFBLGdCQUNBLENBQUEsT0FBQSxZQUNBLENBQUEsS0FBQSxTQUVBQyxHQUFBLHFCQUVBeGIsR0FDQSwwTEFDQXliLEdBQUEsQ0FDQUMsR0FBQSxFQUNBQyxJQUFBLEVBQ0FDLEtBQUEsRUFBQSxHQUNBQyxLQUFBLEVBQUEsR0FDQUMsS0FBQSxFQUFBLEdBQ0FDLEtBQUEsRUFBQSxHQUNBQyxLQUFBLEVBQUEsR0FDQUMsS0FBQSxFQUFBLEdBQ0FDLEtBQUEsRUFBQSxHQUNBQyxLQUFBLEVBQUEsSUFJQSxTQUFBQyxHQUFBM1osR0FDQSxJQUFBbkUsRUFDQStkLEVBQ0EzUyxFQUFBakgsRUFBQVIsR0FDQTRFLEVBQUFzVSxHQUFBbUIsS0FBQTVTLElBQUEwUixHQUFBa0IsS0FBQTVTLEdBQ0E2UyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUFBckIsR0FBQTFkLE9BQ0FnZixFQUFBckIsR0FBQTNkLE9BRUEsR0FBQWlKLEVBQUEsQ0FDQTNHLEVBQUF1QyxHQUFBN0MsSUFBQSxLQUNBLElBQUF0QixFQUFBLEVBQUErZCxFQUFBTSxFQUF5Q3JlLEVBQUErZCxFQUFPL2QsSUFDaEQsR0FBQWdkLEdBQUFoZCxHQUFBLEdBQUFnZSxLQUFBelYsRUFBQSxJQUFBLENBQ0EyVixFQUFBbEIsR0FBQWhkLEdBQUEsR0FDQWllLEVBQUFqQixHQUFBaGQsR0FBQSxLQUFBLE1BQ0EsTUFHQSxHQUFBa2UsR0FBQSxLQUFBLENBQ0EvWixFQUFBL0IsU0FBQSxNQUNBLE9BRUEsR0FBQW1HLEVBQUEsR0FBQSxDQUNBLElBQUF2SSxFQUFBLEVBQUErZCxFQUFBTyxFQUE2Q3RlLEVBQUErZCxFQUFPL2QsSUFDcEQsR0FBQWlkLEdBQUFqZCxHQUFBLEdBQUFnZSxLQUFBelYsRUFBQSxJQUFBLENBRUE0VixHQUFBNVYsRUFBQSxJQUFBLEtBQUEwVSxHQUFBamQsR0FBQSxHQUNBLE1BR0EsR0FBQW1lLEdBQUEsS0FBQSxDQUNBaGEsRUFBQS9CLFNBQUEsTUFDQSxRQUdBLElBQUE2YixHQUFBRSxHQUFBLEtBQUEsQ0FDQWhhLEVBQUEvQixTQUFBLE1BQ0EsT0FFQSxHQUFBbUcsRUFBQSxHQUNBLEdBQUF3VSxHQUFBaUIsS0FBQXpWLEVBQUEsSUFDQTZWLEVBQUEsUUFDa0IsQ0FDbEJqYSxFQUFBL0IsU0FBQSxNQUNBLE9BR0ErQixFQUFBUCxHQUFBc2EsR0FBQUMsR0FBQSxLQUFBQyxHQUFBLElBQ0FHLEdBQUFwYSxRQUVBQSxFQUFBL0IsU0FBQSxNQUlBLFNBQUFvYyxHQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxHQUVBLElBQUFDLEVBQUEsQ0FDQUMsR0FBQVAsR0FDQTdNLEdBQUFiLFFBQUEyTixHQUNBM0ssU0FBQTRLLEVBQUEsSUFDQTVLLFNBQUE2SyxFQUFBLElBQ0E3SyxTQUFBOEssRUFBQSxLQUdBLEdBQUFDLEVBQ0FDLEVBQUE3ZSxLQUFBNlQsU0FBQStLLEVBQUEsS0FHQSxPQUFBQyxFQUdBLFNBQUFDLEdBQUFQLEdBQ0EsSUFBQTVSLEVBQUFrSCxTQUFBMEssRUFBQSxJQUNBLEdBQUE1UixHQUFBLEdBQ0EsT0FBQSxJQUFBQSxPQUNVLEdBQUFBLEdBQUEsSUFDVixPQUFBLEtBQUFBLEVBRUEsT0FBQUEsRUFHQSxTQUFBb1MsR0FBQTVVLEdBRUEsT0FBQUEsRUFDQTdCLFFBQUEscUJBQUEsS0FDQUEsUUFBQSxXQUFBLEtBQ0FBLFFBQUEsU0FBQSxJQUNBQSxRQUFBLFNBQUEsSUFHQSxTQUFBMFcsR0FBQUMsRUFBQUMsRUFBQWpiLEdBQ0EsR0FBQWdiLEVBQUEsQ0FFQSxJQUFBRSxFQUFBcEksR0FBQWxHLFFBQUFvTyxHQUNBRyxFQUFBLElBQUEzZixLQUNBeWYsRUFBQSxHQUNBQSxFQUFBLEdBQ0FBLEVBQUEsSUFDQTlHLFNBQ0EsR0FBQStHLElBQUFDLEVBQUEsQ0FDQTFkLEVBQUF1QyxHQUFBeEMsZ0JBQUEsS0FDQXdDLEVBQUEvQixTQUFBLE1BQ0EsT0FBQSxPQUdBLE9BQUEsS0FHQSxTQUFBbWQsR0FBQUMsRUFBQUMsRUFBQUMsR0FDQSxHQUFBRixFQUNBLE9BQUFyQyxHQUFBcUMsUUFDVSxHQUFBQyxFQUVWLE9BQUEsTUFDVSxDQUNWLElBQUFFLEVBQUE1TCxTQUFBMkwsRUFBQSxJQUNBN2QsRUFBQThkLEVBQUEsSUFDQW5WLEdBQUFtVixFQUFBOWQsR0FBQSxJQUNBLE9BQUEySSxFQUFBLEdBQUEzSSxHQUtBLFNBQUErZCxHQUFBemIsR0FDQSxJQUFBb0UsRUFBQTdHLEdBQUFzYyxLQUFBaUIsR0FBQTlhLEVBQUFSLEtBQ0FrYyxFQUNBLEdBQUF0WCxFQUFBLENBQ0FzWCxFQUFBckIsR0FDQWpXLEVBQUEsR0FDQUEsRUFBQSxHQUNBQSxFQUFBLEdBQ0FBLEVBQUEsR0FDQUEsRUFBQSxHQUNBQSxFQUFBLElBRUEsSUFBQTJXLEdBQUEzVyxFQUFBLEdBQUFzWCxFQUFBMWIsR0FDQSxPQUdBQSxFQUFBa00sR0FBQXdQLEVBQ0ExYixFQUFBTCxLQUFBeWIsR0FBQWhYLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEtBRUFwRSxFQUFBMUIsR0FBQTZSLEdBQUFuVyxNQUFBLEtBQUFnRyxFQUFBa00sSUFDQWxNLEVBQUExQixHQUFBcWQsY0FBQTNiLEVBQUExQixHQUFBc2QsZ0JBQUE1YixFQUFBTCxNQUVBbEMsRUFBQXVDLEdBQUF6QyxRQUFBLFVBRUF5QyxFQUFBL0IsU0FBQSxNQUtBLFNBQUE0ZCxHQUFBN2IsR0FDQSxJQUFBdUwsRUFBQXdOLEdBQUFjLEtBQUE3WixFQUFBUixJQUNBLEdBQUErTCxJQUFBLEtBQUEsQ0FDQXZMLEVBQUExQixHQUFBLElBQUE5QyxNQUFBK1AsRUFBQSxJQUNBLE9BR0FvTyxHQUFBM1osR0FDQSxHQUFBQSxFQUFBL0IsV0FBQSxhQUNBK0IsRUFBQS9CLGNBRUEsT0FHQXdkLEdBQUF6YixHQUNBLEdBQUFBLEVBQUEvQixXQUFBLGFBQ0ErQixFQUFBL0IsY0FFQSxPQUdBLEdBQUErQixFQUFBdkIsUUFDQXVCLEVBQUEvQixTQUFBLFdBR0FsRSxFQUFBK2hCLHdCQUFBOWIsR0FjQSxTQUFBK2IsR0FBQWxoQixFQUFBQyxFQUFBa2hCLEdBQ0EsR0FBQW5oQixHQUFBLEtBQ0EsT0FBQUEsRUFFQSxHQUFBQyxHQUFBLEtBQ0EsT0FBQUEsRUFFQSxPQUFBa2hCLEVBR0EsU0FBQUMsR0FBQWpjLEdBRUEsSUFBQWtjLEVBQUEsSUFBQTFnQixLQUFBekIsRUFBQTJJLE9BQ0EsR0FBQTFDLEVBQUFtYyxRQUNBLE1BQUEsQ0FDQUQsRUFBQTdMLGlCQUNBNkwsRUFBQUUsY0FDQUYsRUFBQUcsY0FHQSxNQUFBLENBQUFILEVBQUFqTSxjQUFBaU0sRUFBQUksV0FBQUosRUFBQUssV0FPQSxTQUFBQyxHQUFBeGMsR0FDQSxJQUFBbkUsRUFDQTJOLEVBQ0FuUCxFQUFBLEdBQ0FvaUIsRUFDQUMsRUFDQUMsRUFFQSxHQUFBM2MsRUFBQTFCLEdBQ0EsT0FHQW1lLEVBQUFSLEdBQUFqYyxHQUdBLEdBQUFBLEVBQUFnTSxJQUFBaE0sRUFBQWtNLEdBQUFHLElBQUEsTUFBQXJNLEVBQUFrTSxHQUFBRSxJQUFBLEtBQ0F3USxHQUFBNWMsR0FJQSxHQUFBQSxFQUFBNmMsWUFBQSxLQUFBLENBQ0FGLEVBQUFaLEdBQUEvYixFQUFBa00sR0FBQUMsR0FBQXNRLEVBQUF0USxJQUVBLEdBQ0FuTSxFQUFBNmMsV0FBQW5OLEdBQUFpTixJQUNBM2MsRUFBQTZjLGFBQUEsRUFFQXBmLEVBQUF1QyxHQUFBdVksbUJBQUEsS0FHQS9PLEVBQUEyRyxHQUFBd00sRUFBQSxFQUFBM2MsRUFBQTZjLFlBQ0E3YyxFQUFBa00sR0FBQUUsR0FBQTVDLEVBQUE0UyxjQUNBcGMsRUFBQWtNLEdBQUFHLEdBQUE3QyxFQUFBNlMsYUFRQSxJQUFBeGdCLEVBQUEsRUFBb0JBLEVBQUEsR0FBQW1FLEVBQUFrTSxHQUFBclEsSUFBQSxPQUErQkEsRUFDbkRtRSxFQUFBa00sR0FBQXJRLEdBQUF4QixFQUFBd0IsR0FBQTRnQixFQUFBNWdCLEdBSUEsS0FBZUEsRUFBQSxFQUFPQSxJQUN0Qm1FLEVBQUFrTSxHQUFBclEsR0FBQXhCLEVBQUF3QixHQUNBbUUsRUFBQWtNLEdBQUFyUSxJQUFBLEtBQUFBLElBQUEsRUFBQSxFQUFBLEVBQUFtRSxFQUFBa00sR0FBQXJRLEdBSUEsR0FDQW1FLEVBQUFrTSxHQUFBSSxLQUFBLElBQ0F0TSxFQUFBa00sR0FBQUssS0FBQSxHQUNBdk0sRUFBQWtNLEdBQUFNLEtBQUEsR0FDQXhNLEVBQUFrTSxHQUFBTyxNQUFBLEVBQ0EsQ0FDQXpNLEVBQUE4YyxTQUFBLEtBQ0E5YyxFQUFBa00sR0FBQUksR0FBQSxFQUdBdE0sRUFBQTFCLElBQUEwQixFQUFBbWMsUUFBQWhNLEdBQUFKLElBQUEvVixNQUNBLEtBQ0FLLEdBRUFxaUIsRUFBQTFjLEVBQUFtYyxRQUNBbmMsRUFBQTFCLEdBQUFzUyxZQUNBNVEsRUFBQTFCLEdBQUE2VixTQUlBLEdBQUFuVSxFQUFBTCxNQUFBLEtBQ0FLLEVBQUExQixHQUFBcWQsY0FBQTNiLEVBQUExQixHQUFBc2QsZ0JBQUE1YixFQUFBTCxNQUdBLEdBQUFLLEVBQUE4YyxTQUNBOWMsRUFBQWtNLEdBQUFJLEdBQUEsR0FJQSxHQUNBdE0sRUFBQWdNLFdBQ0FoTSxFQUFBZ00sR0FBQXpGLElBQUEsYUFDQXZHLEVBQUFnTSxHQUFBekYsSUFBQW1XLEVBRUFqZixFQUFBdUMsR0FBQXhDLGdCQUFBLEtBSUEsU0FBQW9mLEdBQUE1YyxHQUNBLElBQUF5RyxFQUFBc1csRUFBQWpNLEVBQUFDLEVBQUFQLEVBQUFDLEVBQUF1TSxFQUFBQyxFQUFBQyxFQUVBelcsRUFBQXpHLEVBQUFnTSxHQUNBLEdBQUF2RixFQUFBMFcsSUFBQSxNQUFBMVcsRUFBQTJXLEdBQUEsTUFBQTNXLEVBQUE0VyxHQUFBLEtBQUEsQ0FDQTdNLEVBQUEsRUFDQUMsRUFBQSxFQU1Bc00sRUFBQWhCLEdBQ0F0VixFQUFBMFcsR0FDQW5kLEVBQUFrTSxHQUFBQyxHQUNBa0YsR0FBQWlNLElBQUEsRUFBQSxHQUFBNVUsTUFFQW9JLEVBQUFpTCxHQUFBdFYsRUFBQTJXLEVBQUEsR0FDQXJNLEVBQUFnTCxHQUFBdFYsRUFBQTRXLEVBQUEsR0FDQSxHQUFBdE0sRUFBQSxHQUFBQSxFQUFBLEVBQ0FrTSxFQUFBLFNBRVUsQ0FDVnpNLEVBQUF4USxFQUFBRixRQUFBNFIsTUFBQWxCLElBQ0FDLEVBQUF6USxFQUFBRixRQUFBNFIsTUFBQWpCLElBRUF5TSxFQUFBN0wsR0FBQWlNLElBQUE5TSxFQUFBQyxHQUVBc00sRUFBQWhCLEdBQUF0VixFQUFBOFcsR0FBQXZkLEVBQUFrTSxHQUFBQyxHQUFBK1EsRUFBQXhVLE1BR0FvSSxFQUFBaUwsR0FBQXRWLEVBQUFBLEVBQUF5VyxFQUFBcE0sTUFFQSxHQUFBckssRUFBQUYsR0FBQSxLQUFBLENBRUF3SyxFQUFBdEssRUFBQUYsRUFDQSxHQUFBd0ssRUFBQSxHQUFBQSxFQUFBLEVBQ0FrTSxFQUFBLFVBRWMsR0FBQXhXLEVBQUFwTixHQUFBLEtBQUEsQ0FFZDBYLEVBQUF0SyxFQUFBcE4sRUFBQW1YLEVBQ0EsR0FBQS9KLEVBQUFwTixFQUFBLEdBQUFvTixFQUFBcE4sRUFBQSxFQUNBNGpCLEVBQUEsVUFJQWxNLEVBQUFQLEVBR0EsR0FBQU0sRUFBQSxHQUFBQSxFQUFBUyxFQUFBd0wsRUFBQXZNLEVBQUFDLEdBQ0FoVCxFQUFBdUMsR0FBQXdZLGVBQUEsVUFDVSxHQUFBeUUsR0FBQSxLQUNWeGYsRUFBQXVDLEdBQUF5WSxpQkFBQSxTQUNVLENBQ1Z1RSxFQUFBbk0sR0FBQWtNLEVBQUFqTSxFQUFBQyxFQUFBUCxFQUFBQyxHQUNBelEsRUFBQWtNLEdBQUFDLEdBQUE2USxFQUFBdFUsS0FDQTFJLEVBQUE2YyxXQUFBRyxFQUFBOUwsV0FXQSxTQUFBa0osR0FBQXBhLEdBRUEsR0FBQUEsRUFBQVAsS0FBQTFGLEVBQUF5akIsU0FBQSxDQUNBN0QsR0FBQTNaLEdBQ0EsT0FFQSxHQUFBQSxFQUFBUCxLQUFBMUYsRUFBQTBqQixTQUFBLENBQ0FoQyxHQUFBemIsR0FDQSxPQUVBQSxFQUFBa00sR0FBQSxHQUNBek8sRUFBQXVDLEdBQUF2RCxNQUFBLEtBR0EsSUFBQXdLLEVBQUEsR0FBQWpILEVBQUFSLEdBQ0EzRCxFQUNBb2YsRUFDQXJQLEVBQ0E5SCxFQUNBNFosRUFDQUMsRUFBQTFXLEVBQUE5TCxPQUNBeWlCLEVBQUEsRUFDQXZnQixFQUNBeU8sRUFFQUYsRUFDQWxILEdBQUExRSxFQUFBUCxHQUFBTyxFQUFBRixTQUFBc0UsTUFBQVgsS0FBQSxHQUNBcUksRUFBQUYsRUFBQXpRLE9BQ0EsSUFBQVUsRUFBQSxFQUFvQkEsRUFBQWlRLEVBQWNqUSxJQUFBLENBQ2xDaUksRUFBQThILEVBQUEvUCxHQUNBb2YsR0FBQWhVLEVBQUE3QyxNQUFBZ0gsR0FBQXRILEVBQUE5RCxLQUNBLElBQUEsR0FDQSxHQUFBaWIsRUFBQSxDQUNBeUMsRUFBQXpXLEVBQUF6RCxPQUFBLEVBQUF5RCxFQUFBMkYsUUFBQXFPLElBQ0EsR0FBQXlDLEVBQUF2aUIsT0FBQSxFQUNBc0MsRUFBQXVDLEdBQUFyRCxZQUFBWixLQUFBMmhCLEdBRUF6VyxFQUFBQSxFQUFBbkcsTUFDQW1HLEVBQUEyRixRQUFBcU8sR0FBQUEsRUFBQTlmLFFBRUF5aUIsR0FBQTNDLEVBQUE5ZixPQUdBLEdBQUF5SSxHQUFBRSxHQUFBLENBQ0EsR0FBQW1YLEVBQ0F4ZCxFQUFBdUMsR0FBQXZELE1BQUEsV0FFQWdCLEVBQUF1QyxHQUFBdEQsYUFBQVgsS0FBQStILEdBRUFtSSxHQUFBbkksRUFBQW1YLEVBQUFqYixRQUNjLEdBQUFBLEVBQUF2QixVQUFBd2MsRUFDZHhkLEVBQUF1QyxHQUFBdEQsYUFBQVgsS0FBQStILEdBS0FyRyxFQUFBdUMsR0FBQW5ELGNBQ0E4Z0IsRUFBQUMsRUFDQSxHQUFBM1csRUFBQTlMLE9BQUEsRUFDQXNDLEVBQUF1QyxHQUFBckQsWUFBQVosS0FBQWtMLEdBSUEsR0FDQWpILEVBQUFrTSxHQUFBSSxJQUFBLElBQ0E3TyxFQUFBdUMsR0FBQXRCLFVBQUEsTUFDQXNCLEVBQUFrTSxHQUFBSSxHQUFBLEVBRUE3TyxFQUFBdUMsR0FBQXRCLFFBQUFDLFVBR0FsQixFQUFBdUMsR0FBQTVDLGdCQUFBNEMsRUFBQWtNLEdBQUFwTCxNQUFBLEdBQ0FyRCxFQUFBdUMsR0FBQTFDLFNBQUEwQyxFQUFBOFYsVUFFQTlWLEVBQUFrTSxHQUFBSSxHQUFBdVIsR0FDQTdkLEVBQUFGLFFBQ0FFLEVBQUFrTSxHQUFBSSxHQUNBdE0sRUFBQThWLFdBSUF6WSxFQUFBSSxFQUFBdUMsR0FBQTNDLElBQ0EsR0FBQUEsSUFBQSxLQUNBMkMsRUFBQWtNLEdBQUFDLEdBQUFuTSxFQUFBRixRQUFBZ2UsZ0JBQUF6Z0IsRUFBQTJDLEVBQUFrTSxHQUFBQyxJQUdBcVEsR0FBQXhjLEdBQ0FzWSxHQUFBdFksR0FHQSxTQUFBNmQsR0FBQXpoQixFQUFBMmhCLEVBQUF6Z0IsR0FDQSxJQUFBMGdCLEVBRUEsR0FBQTFnQixHQUFBLEtBRUEsT0FBQXlnQixFQUVBLEdBQUEzaEIsRUFBQTZoQixjQUFBLEtBQ0EsT0FBQTdoQixFQUFBNmhCLGFBQUFGLEVBQUF6Z0IsUUFDVSxHQUFBbEIsRUFBQXlaLE1BQUEsS0FBQSxDQUVWbUksRUFBQTVoQixFQUFBeVosS0FBQXZZLEdBQ0EsR0FBQTBnQixHQUFBRCxFQUFBLEdBQ0FBLEdBQUEsR0FFQSxJQUFBQyxHQUFBRCxJQUFBLEdBQ0FBLEVBQUEsRUFFQSxPQUFBQSxPQUdBLE9BQUFBLEVBS0EsU0FBQUcsR0FBQWxlLEdBQ0EsSUFBQW1lLEVBQ0FDLEVBQ0FDLEVBQ0F4aUIsRUFDQXlpQixFQUNBQyxFQUNBQyxFQUFBLE1BQ0FDLEVBQUF6ZSxFQUFBUCxHQUFBdEUsT0FFQSxHQUFBc2pCLElBQUEsRUFBQSxDQUNBaGhCLEVBQUF1QyxHQUFBL0MsY0FBQSxLQUNBK0MsRUFBQTFCLEdBQUEsSUFBQTlDLEtBQUFzRCxLQUNBLE9BR0EsSUFBQWpELEVBQUEsRUFBb0JBLEVBQUE0aUIsRUFBZ0I1aUIsSUFBQSxDQUNwQ3lpQixFQUFBLEVBQ0FDLEVBQUEsTUFDQUosRUFBQWxmLEVBQUEsR0FBc0NlLEdBQ3RDLEdBQUFBLEVBQUFtYyxTQUFBLEtBQ0FnQyxFQUFBaEMsUUFBQW5jLEVBQUFtYyxRQUVBZ0MsRUFBQTFlLEdBQUFPLEVBQUFQLEdBQUE1RCxHQUNBdWUsR0FBQStELEdBRUEsR0FBQW5nQixFQUFBbWdCLEdBQ0FJLEVBQUEsS0FJQUQsR0FBQTdnQixFQUFBMGdCLEdBQUF0aEIsY0FHQXloQixHQUFBN2dCLEVBQUEwZ0IsR0FBQXpoQixhQUFBdkIsT0FBQSxHQUVBc0MsRUFBQTBnQixHQUFBTyxNQUFBSixFQUVBLElBQUFFLEdBQ0EsR0FDQUgsR0FBQSxNQUNBQyxFQUFBRCxHQUNBRSxFQUNBLENBQ0FGLEVBQUFDLEVBQ0FGLEVBQUFELEVBQ0EsR0FBQUksRUFDQUMsRUFBQSxXQUlBLEdBQUFGLEVBQUFELEVBQUEsQ0FDQUEsRUFBQUMsRUFDQUYsRUFBQUQsR0FLQW5pQixFQUFBZ0UsRUFBQW9lLEdBQUFELEdBR0EsU0FBQVEsR0FBQTNlLEdBQ0EsR0FBQUEsRUFBQTFCLEdBQ0EsT0FHQSxJQUFBekMsRUFBQWlNLEdBQUE5SCxFQUFBUixJQUNBb2YsRUFBQS9pQixFQUFBd1gsTUFBQTFVLFVBQUE5QyxFQUFBMk4sS0FBQTNOLEVBQUF3WCxJQUNBclQsRUFBQWtNLEdBQUF6USxFQUNBLENBQUFJLEVBQUE2TSxLQUFBN00sRUFBQTBOLE1BQUFxVixFQUFBL2lCLEVBQUFraUIsS0FBQWxpQixFQUFBZ2pCLE9BQUFoakIsRUFBQWlqQixPQUFBampCLEVBQUFrakIsYUFDQSxTQUFBOWpCLEdBQ0EsT0FBQUEsR0FBQTJVLFNBQUEzVSxFQUFBLE1BSUF1aEIsR0FBQXhjLEdBR0EsU0FBQWdmLEdBQUFoZixHQUNBLElBQUFwRSxFQUFBLElBQUFtRSxFQUFBdVksR0FBQTJHLEdBQUFqZixLQUNBLEdBQUFwRSxFQUFBa2hCLFNBQUEsQ0FFQWxoQixFQUFBbVcsSUFBQSxFQUFBLEtBQ0FuVyxFQUFBa2hCLFNBQUFuZSxVQUdBLE9BQUEvQyxFQUdBLFNBQUFxakIsR0FBQWpmLEdBQ0EsSUFBQTNGLEVBQUEyRixFQUFBUixHQUNBckQsRUFBQTZELEVBQUFQLEdBRUFPLEVBQUFGLFFBQUFFLEVBQUFGLFNBQUFnWSxHQUFBOVgsRUFBQU4sSUFFQSxHQUFBckYsSUFBQSxNQUFBOEIsSUFBQXdDLFdBQUF0RSxJQUFBLEdBQ0EsT0FBQXdFLEVBQUEsQ0FBbUMvQixVQUFBLE9BR25DLFVBQUF6QyxJQUFBLFNBQ0EyRixFQUFBUixHQUFBbkYsRUFBQTJGLEVBQUFGLFFBQUFvZixTQUFBN2tCLEdBR0EsR0FBQTZGLEVBQUE3RixHQUNBLE9BQUEsSUFBQTBGLEVBQUF1WSxHQUFBamUsU0FDVSxHQUFBa0IsRUFBQWxCLEdBQ1YyRixFQUFBMUIsR0FBQWpFLE9BQ1UsR0FBQUQsRUFBQStCLEdBQ1YraEIsR0FBQWxlLFFBQ1UsR0FBQTdELEVBQ1ZpZSxHQUFBcGEsUUFFQW1mLEdBQUFuZixHQUdBLElBQUFoQyxFQUFBZ0MsR0FDQUEsRUFBQTFCLEdBQUEsS0FHQSxPQUFBMEIsRUFHQSxTQUFBbWYsR0FBQW5mLEdBQ0EsSUFBQTNGLEVBQUEyRixFQUFBUixHQUNBLEdBQUFuRSxFQUFBaEIsR0FDQTJGLEVBQUExQixHQUFBLElBQUE5QyxLQUFBekIsRUFBQTJJLFlBQ1UsR0FBQW5ILEVBQUFsQixHQUNWMkYsRUFBQTFCLEdBQUEsSUFBQTlDLEtBQUFuQixFQUFBNEIsZ0JBQ1UsVUFBQTVCLElBQUEsU0FDVndoQixHQUFBN2IsUUFDVSxHQUFBNUYsRUFBQUMsR0FBQSxDQUNWMkYsRUFBQWtNLEdBQUF6USxFQUFBcEIsRUFBQXlHLE1BQUEsR0FBQSxTQUFBN0YsR0FDQSxPQUFBMlUsU0FBQTNVLEVBQUEsTUFFQXVoQixHQUFBeGMsUUFDVSxHQUFBckYsRUFBQU4sR0FDVnNrQixHQUFBM2UsUUFDVSxHQUFBMUUsRUFBQWpCLEdBRVYyRixFQUFBMUIsR0FBQSxJQUFBOUMsS0FBQW5CLFFBRUFOLEVBQUEraEIsd0JBQUE5YixHQUlBLFNBQUExRCxHQUFBakMsRUFBQThCLEVBQUFDLEVBQUFDLEVBQUEraUIsR0FDQSxJQUFBcEQsRUFBQSxHQUVBLEdBQUE3ZixJQUFBLE1BQUFBLElBQUEsTUFBQSxDQUNBRSxFQUFBRixFQUNBQSxFQUFBd0MsVUFHQSxHQUFBdkMsSUFBQSxNQUFBQSxJQUFBLE1BQUEsQ0FDQUMsRUFBQUQsRUFDQUEsRUFBQXVDLFVBR0EsR0FDQWhFLEVBQUFOLElBQUFXLEVBQUFYLElBQ0FELEVBQUFDLElBQUFBLEVBQUFjLFNBQUEsRUFFQWQsRUFBQXNFLFVBSUFxZCxFQUFBemMsaUJBQUEsS0FDQXljLEVBQUFHLFFBQUFILEVBQUFwYyxPQUFBd2YsRUFDQXBELEVBQUF0YyxHQUFBdEQsRUFDQTRmLEVBQUF4YyxHQUFBbkYsRUFDQTJoQixFQUFBdmMsR0FBQXRELEVBQ0E2ZixFQUFBdmQsUUFBQXBDLEVBRUEsT0FBQTJpQixHQUFBaEQsR0FHQSxTQUFBc0IsRUFBQWpqQixFQUFBOEIsRUFBQUMsRUFBQUMsR0FDQSxPQUFBQyxHQUFBakMsRUFBQThCLEVBQUFDLEVBQUFDLEVBQUEsT0F2ZUF0QyxFQUFBK2hCLHdCQUFBdmIsRUFDQSw2R0FDQSw0RkFDQSw2RkFDQSxTQUFBUCxHQUNBQSxFQUFBMUIsR0FBQSxJQUFBOUMsS0FBQXdFLEVBQUFSLElBQUFRLEVBQUFtYyxRQUFBLE9BQUEsT0F1TEFwaUIsRUFBQXlqQixTQUFBLGFBR0F6akIsRUFBQTBqQixTQUFBLGFBMlNBLElBQUE0QixHQUFBOWUsRUFDQSxxR0FDQSxXQUNBLElBQUErZSxFQUFBaEMsRUFBQXRqQixNQUFBLEtBQUFDLFdBQ0EsR0FBQTZELEtBQUFFLFdBQUFzaEIsRUFBQXRoQixVQUNBLE9BQUFzaEIsRUFBQXhoQixLQUFBQSxLQUFBd2hCLE9BRUEsT0FBQXpnQixNQUlBMGdCLEdBQUFoZixFQUNBLHFHQUNBLFdBQ0EsSUFBQStlLEVBQUFoQyxFQUFBdGpCLE1BQUEsS0FBQUMsV0FDQSxHQUFBNkQsS0FBQUUsV0FBQXNoQixFQUFBdGhCLFVBQ0EsT0FBQXNoQixFQUFBeGhCLEtBQUFBLEtBQUF3aEIsT0FFQSxPQUFBemdCLE1BVUEsU0FBQTJnQixHQUFBN2pCLEVBQUE4akIsR0FDQSxJQUFBN2pCLEVBQUFDLEVBQ0EsR0FBQTRqQixFQUFBdGtCLFNBQUEsR0FBQWYsRUFBQXFsQixFQUFBLElBQ0FBLEVBQUFBLEVBQUEsR0FFQSxJQUFBQSxFQUFBdGtCLE9BQ0EsT0FBQW1pQixJQUVBMWhCLEVBQUE2akIsRUFBQSxHQUNBLElBQUE1akIsRUFBQSxFQUFvQkEsRUFBQTRqQixFQUFBdGtCLFNBQW9CVSxFQUN4QyxJQUFBNGpCLEVBQUE1akIsR0FBQW1DLFdBQUF5aEIsRUFBQTVqQixHQUFBRixHQUFBQyxHQUNBQSxFQUFBNmpCLEVBQUE1akIsR0FHQSxPQUFBRCxFQUlBLFNBQUFrVCxLQUNBLElBQUFwTyxFQUFBLEdBQUFJLE1BQUFwRyxLQUFBVCxVQUFBLEdBRUEsT0FBQXVsQixHQUFBLFdBQUE5ZSxHQUdBLFNBQUE2QyxLQUNBLElBQUE3QyxFQUFBLEdBQUFJLE1BQUFwRyxLQUFBVCxVQUFBLEdBRUEsT0FBQXVsQixHQUFBLFVBQUE5ZSxHQUdBLElBQUFnQyxHQUFBLFdBQ0EsT0FBQWxILEtBQUFrSCxJQUFBbEgsS0FBQWtILE9BQUEsSUFBQWxILE1BR0Fra0IsR0FBQSxDQUNBLE9BQ0EsVUFDQSxRQUNBLE9BQ0EsTUFDQSxPQUNBLFNBQ0EsU0FDQSxlQUdBLFNBQUFDLEdBQUFqaUIsR0FDQSxJQUFBa0QsRUFDQWdmLEVBQUEsTUFDQS9qQixFQUNBZ2tCLEVBQUFILEdBQUF2a0IsT0FDQSxJQUFBeUYsS0FBQWxELEVBQ0EsR0FDQTlDLEVBQUE4QyxFQUFBa0QsTUFFQWdNLEVBQUFsUyxLQUFBZ2xCLEdBQUE5ZSxNQUFBLElBQ0FsRCxFQUFBa0QsSUFBQSxPQUFBdkMsTUFBQVgsRUFBQWtELE1BR0EsT0FBQSxNQUlBLElBQUEvRSxFQUFBLEVBQW9CQSxFQUFBZ2tCLElBQWNoa0IsRUFDbEMsR0FBQTZCLEVBQUFnaUIsR0FBQTdqQixJQUFBLENBQ0EsR0FBQStqQixFQUNBLE9BQUEsTUFFQSxHQUFBRSxXQUFBcGlCLEVBQUFnaUIsR0FBQTdqQixPQUFBaU4sRUFBQXBMLEVBQUFnaUIsR0FBQTdqQixLQUNBK2pCLEVBQUEsS0FLQSxPQUFBLEtBR0EsU0FBQUcsS0FDQSxPQUFBamlCLEtBQUFHLFNBR0EsU0FBQStoQixLQUNBLE9BQUFDLEVBQUFuaEIsS0FHQSxTQUFBb2hCLEdBQUFDLEdBQ0EsSUFBQW5ZLEVBQUFGLEdBQUFxWSxHQUNBQyxFQUFBcFksRUFBQVUsTUFBQSxFQUNBMlgsRUFBQXJZLEVBQUFzWSxTQUFBLEVBQ0FuVCxFQUFBbkYsRUFBQXVCLE9BQUEsRUFDQWdYLEVBQUF2WSxFQUFBOEksTUFBQTlJLEVBQUF3WSxTQUFBLEVBQ0FDLEVBQUF6WSxFQUFBcUwsS0FBQSxFQUNBNkIsRUFBQWxOLEVBQUErVixNQUFBLEVBQ0ExSSxFQUFBck4sRUFBQTZXLFFBQUEsRUFDQW5KLEVBQUExTixFQUFBOFcsUUFBQSxFQUNBNEIsRUFBQTFZLEVBQUErVyxhQUFBLEVBRUFqaEIsS0FBQUcsU0FBQTBoQixHQUFBM1gsR0FHQWxLLEtBQUE2aUIsZUFDQUQsRUFDQWhMLEVBQUEsSUFDQUwsRUFBQSxJQUNBSCxFQUFBLElBQUEsR0FBQSxHQUdBcFgsS0FBQThpQixPQUFBSCxFQUFBRixFQUFBLEVBSUF6aUIsS0FBQWdRLFNBQUFYLEVBQUFrVCxFQUFBLEVBQUFELEVBQUEsR0FFQXRpQixLQUFBK2lCLE1BQUEsR0FFQS9pQixLQUFBZ0MsUUFBQWdZLEtBRUFoYSxLQUFBZ2pCLFVBR0EsU0FBQUMsR0FBQTlsQixHQUNBLE9BQUFBLGFBQUFpbEIsR0FHQSxTQUFBYyxHQUFBbGUsR0FDQSxHQUFBQSxFQUFBLEVBQ0EsT0FBQUksS0FBQStkLE9BQUEsRUFBQW5lLElBQUEsT0FFQSxPQUFBSSxLQUFBK2QsTUFBQW5lLEdBS0EsU0FBQW9lLEdBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQXRqQixFQUFBbUYsS0FBQTRMLElBQUFxUyxFQUFBaG1CLE9BQUFpbUIsRUFBQWptQixRQUNBbW1CLEVBQUFwZSxLQUFBQyxJQUFBZ2UsRUFBQWhtQixPQUFBaW1CLEVBQUFqbUIsUUFDQW9tQixFQUFBLEVBQ0ExbEIsRUFDQSxJQUFBQSxFQUFBLEVBQW9CQSxFQUFBa0MsRUFBU2xDLElBQzdCLEdBQ0F3bEIsR0FBQUYsRUFBQXRsQixLQUFBdWxCLEVBQUF2bEIsS0FDQXdsQixHQUFBdlksRUFBQXFZLEVBQUF0bEIsTUFBQWlOLEVBQUFzWSxFQUFBdmxCLElBRUEwbEIsSUFHQSxPQUFBQSxFQUFBRCxFQUtBLFNBQUFFLEdBQUExZCxFQUFBMmQsR0FDQTVkLEVBQUFDLEVBQUEsRUFBQSxFQUFBLFdBQ0EsSUFBQTBkLEVBQUExakIsS0FBQTRqQixZQUNBcmUsRUFBQSxJQUNBLEdBQUFtZSxFQUFBLEVBQUEsQ0FDQUEsR0FBQUEsRUFDQW5lLEVBQUEsSUFFQSxPQUNBQSxFQUNBUixLQUFBMmUsRUFBQSxJQUFBLEdBQ0FDLEVBQ0E1ZSxJQUFBMmUsRUFBQSxHQUFBLEtBS0FBLEdBQUEsSUFBQSxLQUNBQSxHQUFBLEtBQUEsSUFJQXhXLEVBQUEsSUFBQUosSUFDQUksRUFBQSxLQUFBSixJQUNBaUIsRUFBQSxDQUFBLElBQUEsTUFBQSxTQUFBeFIsRUFBQWtLLEVBQUF2RSxHQUNBQSxFQUFBbWMsUUFBQSxLQUNBbmMsRUFBQUwsS0FBQWdpQixHQUFBL1csR0FBQXZRLEtBUUEsSUFBQXVuQixHQUFBLGtCQUVBLFNBQUFELEdBQUFFLEVBQUE1YSxHQUNBLElBQUE2YSxHQUFBN2EsR0FBQSxJQUFBN0MsTUFBQXlkLEdBQ0FFLEVBQ0FDLEVBQ0EzTSxFQUVBLEdBQUF5TSxJQUFBLEtBQ0EsT0FBQSxLQUdBQyxFQUFBRCxFQUFBQSxFQUFBM21CLE9BQUEsSUFBQSxHQUNBNm1CLEdBQUFELEVBQUEsSUFBQTNkLE1BQUF3ZCxLQUFBLENBQUEsSUFBQSxFQUFBLEdBQ0F2TSxJQUFBMk0sRUFBQSxHQUFBLElBQUFsWixFQUFBa1osRUFBQSxJQUVBLE9BQUEzTSxJQUFBLEVBQUEsRUFBQTJNLEVBQUEsS0FBQSxJQUFBM00sR0FBQUEsRUFJQSxTQUFBNE0sR0FBQTVuQixFQUFBNm5CLEdBQ0EsSUFBQXRtQixFQUFBeUwsRUFDQSxHQUFBNmEsRUFBQXRpQixPQUFBLENBQ0FoRSxFQUFBc21CLEVBQUFDLFFBQ0E5YSxHQUNBbkgsRUFBQTdGLElBQUFrQixFQUFBbEIsR0FDQUEsRUFBQTRCLFVBQ0FxaEIsRUFBQWpqQixHQUFBNEIsV0FBQUwsRUFBQUssVUFFQUwsRUFBQTBDLEdBQUE4akIsUUFBQXhtQixFQUFBMEMsR0FBQXJDLFVBQUFvTCxHQUNBdE4sRUFBQWtHLGFBQUFyRSxFQUFBLE9BQ0EsT0FBQUEsT0FFQSxPQUFBMGhCLEVBQUFqakIsR0FBQWdvQixRQUlBLFNBQUFDLEdBQUE1a0IsR0FHQSxPQUFBd0YsS0FBQStkLE1BQUF2akIsRUFBQVksR0FBQWlrQixxQkFxQkEsU0FBQUMsR0FBQW5vQixFQUFBb29CLEVBQUFDLEdBQ0EsSUFBQWxCLEVBQUExakIsS0FBQStCLFNBQUEsRUFDQThpQixFQUNBLElBQUE3a0IsS0FBQUUsVUFDQSxPQUFBM0QsR0FBQSxLQUFBeUQsS0FBQWdCLElBRUEsR0FBQXpFLEdBQUEsS0FBQSxDQUNBLFVBQUFBLElBQUEsU0FBQSxDQUNBQSxFQUFBc25CLEdBQUEvVyxHQUFBdlEsR0FDQSxHQUFBQSxJQUFBLEtBQ0EsT0FBQXlELFVBRWMsR0FBQW9GLEtBQUFDLElBQUE5SSxHQUFBLEtBQUFxb0IsRUFDZHJvQixFQUFBQSxFQUFBLEdBRUEsSUFBQXlELEtBQUE4QixRQUFBNmlCLEVBQ0FFLEVBQUFMLEdBQUF4a0IsTUFFQUEsS0FBQStCLFFBQUF4RixFQUNBeUQsS0FBQThCLE9BQUEsS0FDQSxHQUFBK2lCLEdBQUEsS0FDQTdrQixLQUFBaVUsSUFBQTRRLEVBQUEsS0FFQSxHQUFBbkIsSUFBQW5uQixFQUNBLElBQUFvb0IsR0FBQTNrQixLQUFBOGtCLGtCQUNBQyxHQUNBL2tCLEtBQ0FtaUIsRUFBQTVsQixFQUFBbW5CLEVBQUEsS0FDQSxFQUNBLFlBRWtCLElBQUExakIsS0FBQThrQixrQkFBQSxDQUNsQjlrQixLQUFBOGtCLGtCQUFBLEtBQ0E3b0IsRUFBQWtHLGFBQUFuQyxLQUFBLE1BQ0FBLEtBQUE4a0Isa0JBQUEsS0FHQSxPQUFBOWtCLFVBRUEsT0FBQUEsS0FBQThCLE9BQUE0aEIsRUFBQWMsR0FBQXhrQixNQUlBLFNBQUFnbEIsR0FBQXpvQixFQUFBb29CLEdBQ0EsR0FBQXBvQixHQUFBLEtBQUEsQ0FDQSxVQUFBQSxJQUFBLFNBQ0FBLEdBQUFBLEVBR0F5RCxLQUFBNGpCLFVBQUFybkIsRUFBQW9vQixHQUVBLE9BQUEza0IsVUFFQSxPQUFBQSxLQUFBNGpCLFlBSUEsU0FBQXFCLEdBQUFOLEdBQ0EsT0FBQTNrQixLQUFBNGpCLFVBQUEsRUFBQWUsR0FHQSxTQUFBTyxHQUFBUCxHQUNBLEdBQUEza0IsS0FBQThCLE9BQUEsQ0FDQTlCLEtBQUE0akIsVUFBQSxFQUFBZSxHQUNBM2tCLEtBQUE4QixPQUFBLE1BRUEsR0FBQTZpQixFQUNBM2tCLEtBQUFtbEIsU0FBQVgsR0FBQXhrQixNQUFBLEtBR0EsT0FBQUEsS0FHQSxTQUFBb2xCLEtBQ0EsR0FBQXBsQixLQUFBNkIsTUFBQSxLQUNBN0IsS0FBQTRqQixVQUFBNWpCLEtBQUE2QixLQUFBLE1BQUEsV0FDVSxVQUFBN0IsS0FBQTBCLEtBQUEsU0FBQSxDQUNWLElBQUEyakIsRUFBQXhCLEdBQUFoWCxHQUFBN00sS0FBQTBCLElBQ0EsR0FBQTJqQixHQUFBLEtBQ0FybEIsS0FBQTRqQixVQUFBeUIsUUFFQXJsQixLQUFBNGpCLFVBQUEsRUFBQSxNQUdBLE9BQUE1akIsS0FHQSxTQUFBc2xCLEdBQUEvb0IsR0FDQSxJQUFBeUQsS0FBQUUsVUFDQSxPQUFBLE1BRUEzRCxFQUFBQSxFQUFBaWpCLEVBQUFqakIsR0FBQXFuQixZQUFBLEVBRUEsT0FBQTVqQixLQUFBNGpCLFlBQUFybkIsR0FBQSxLQUFBLEVBR0EsU0FBQWdwQixLQUNBLE9BQ0F2bEIsS0FBQTRqQixZQUFBNWpCLEtBQUFxa0IsUUFBQTVZLE1BQUEsR0FBQW1ZLGFBQ0E1akIsS0FBQTRqQixZQUFBNWpCLEtBQUFxa0IsUUFBQTVZLE1BQUEsR0FBQW1ZLFlBSUEsU0FBQTRCLEtBQ0EsSUFBQWpvQixFQUFBeUMsS0FBQXlsQixlQUNBLE9BQUF6bEIsS0FBQXlsQixjQUdBLElBQUF2SCxFQUFBLEdBQ0FzRCxFQUVBcmdCLEVBQUErYyxFQUFBbGUsTUFDQWtlLEVBQUFpRCxHQUFBakQsR0FFQSxHQUFBQSxFQUFBOVAsR0FBQSxDQUNBb1QsRUFBQXRELEVBQUFwYyxPQUFBMUQsRUFBQThmLEVBQUE5UCxJQUFBb1IsRUFBQXRCLEVBQUE5UCxJQUNBcE8sS0FBQXlsQixjQUNBemxCLEtBQUFFLFdBQUFrakIsR0FBQWxGLEVBQUE5UCxHQUFBb1QsRUFBQWtFLFdBQUEsT0FFQTFsQixLQUFBeWxCLGNBQUEsTUFHQSxPQUFBemxCLEtBQUF5bEIsY0FHQSxTQUFBRSxLQUNBLE9BQUEzbEIsS0FBQUUsV0FBQUYsS0FBQThCLE9BQUEsTUFHQSxTQUFBOGpCLEtBQ0EsT0FBQTVsQixLQUFBRSxVQUFBRixLQUFBOEIsT0FBQSxNQUdBLFNBQUErakIsS0FDQSxPQUFBN2xCLEtBQUFFLFVBQUFGLEtBQUE4QixRQUFBOUIsS0FBQStCLFVBQUEsRUFBQSxNQXBKQTlGLEVBQUFrRyxhQUFBLGFBd0pBLElBQUEyakIsR0FBQSx3REFJQUMsR0FDQSxzS0FFQSxTQUFBNUQsRUFBQTVsQixFQUFBdUcsR0FDQSxJQUFBdWYsRUFBQTlsQixFQUVBK0osRUFBQSxLQUNBZixFQUNBeWdCLEVBQ0FDLEVBRUEsR0FBQWhELEdBQUExbUIsR0FDQThsQixFQUFBLENBQ0FuUSxHQUFBM1YsRUFBQXNtQixjQUNBcGEsRUFBQWxNLEVBQUF1bUIsTUFDQWphLEVBQUF0TSxFQUFBeVQsY0FFVSxHQUFBeFMsRUFBQWpCLEtBQUFnRSxPQUFBaEUsR0FBQSxDQUNWOGxCLEVBQUEsR0FDQSxHQUFBdmYsRUFDQXVmLEVBQUF2ZixJQUFBdkcsT0FFQThsQixFQUFBTyxjQUFBcm1CLE9BRVUsR0FBQStKLEVBQUF3ZixHQUFBL0osS0FBQXhmLEdBQUEsQ0FDVmdKLEVBQUFlLEVBQUEsS0FBQSxLQUFBLEVBQUEsRUFDQStiLEVBQUEsQ0FDQXRaLEVBQUEsRUFDQU4sRUFBQXVDLEVBQUExRSxFQUFBaUksSUFBQWhKLEVBQ0FnRCxFQUFBeUMsRUFBQTFFLEVBQUFrSSxJQUFBakosRUFDQTNGLEVBQUFvTCxFQUFBMUUsRUFBQW1JLElBQUFsSixFQUNBNkMsRUFBQTRDLEVBQUExRSxFQUFBb0ksSUFBQW5KLEVBQ0EyTSxHQUFBbEgsRUFBQWtZLEdBQUE1YyxFQUFBcUksSUFBQSxNQUFBcEosUUFFVSxHQUFBZSxFQUFBeWYsR0FBQWhLLEtBQUF4ZixHQUFBLENBQ1ZnSixFQUFBZSxFQUFBLEtBQUEsS0FBQSxFQUFBLEVBQ0ErYixFQUFBLENBQ0F0WixFQUFBbWQsR0FBQTVmLEVBQUEsR0FBQWYsR0FDQXNELEVBQUFxZCxHQUFBNWYsRUFBQSxHQUFBZixHQUNBb0QsRUFBQXVkLEdBQUE1ZixFQUFBLEdBQUFmLEdBQ0FrRCxFQUFBeWQsR0FBQTVmLEVBQUEsR0FBQWYsR0FDQWdELEVBQUEyZCxHQUFBNWYsRUFBQSxHQUFBZixHQUNBM0YsRUFBQXNtQixHQUFBNWYsRUFBQSxHQUFBZixHQUNBNkMsRUFBQThkLEdBQUE1ZixFQUFBLEdBQUFmLFNBRVUsR0FBQThjLEdBQUEsS0FFVkEsRUFBQSxRQUNVLFVBQ1ZBLElBQUEsV0FDQSxTQUFBQSxHQUFBLE9BQUFBLEdBQ0EsQ0FDQTRELEVBQUFFLEdBQ0EzRyxFQUFBNkMsRUFBQWhoQixNQUNBbWUsRUFBQTZDLEVBQUFqaEIsS0FHQWloQixFQUFBLEdBQ0FBLEVBQUFuUSxHQUFBK1QsRUFBQXJELGFBQ0FQLEVBQUF4WixFQUFBb2QsRUFBQTVXLE9BR0EyVyxFQUFBLElBQUE1RCxHQUFBQyxHQUVBLEdBQUFZLEdBQUExbUIsSUFBQU8sRUFBQVAsRUFBQSxXQUNBeXBCLEVBQUFoa0IsUUFBQXpGLEVBQUF5RixRQUdBLEdBQUFpaEIsR0FBQTFtQixJQUFBTyxFQUFBUCxFQUFBLFlBQ0F5cEIsRUFBQTdsQixTQUFBNUQsRUFBQTRELFNBR0EsT0FBQTZsQixFQU1BLFNBQUFFLEdBQUFFLEVBQUE3Z0IsR0FJQSxJQUFBekgsRUFBQXNvQixHQUFBcEUsV0FBQW9FLEVBQUE3ZixRQUFBLElBQUEsTUFFQSxPQUFBaEcsTUFBQXpDLEdBQUEsRUFBQUEsR0FBQXlILEVBR0EsU0FBQThnQixHQUFBQyxFQUFBOUUsR0FDQSxJQUFBMWpCLEVBQUEsR0FFQUEsRUFBQXVSLE9BQ0FtUyxFQUFBL1YsUUFBQTZhLEVBQUE3YSxTQUFBK1YsRUFBQTVXLE9BQUEwYixFQUFBMWIsUUFBQSxHQUNBLEdBQUEwYixFQUFBakMsUUFBQXBRLElBQUFuVyxFQUFBdVIsT0FBQSxLQUFBa1gsUUFBQS9FLEtBQ0ExakIsRUFBQXVSLE9BR0F2UixFQUFBOGtCLGNBQUFwQixHQUFBOEUsRUFBQWpDLFFBQUFwUSxJQUFBblcsRUFBQXVSLE9BQUEsS0FFQSxPQUFBdlIsRUFHQSxTQUFBcW9CLEdBQUFHLEVBQUE5RSxHQUNBLElBQUExakIsRUFDQSxLQUFBd29CLEVBQUFwbUIsV0FBQXNoQixFQUFBdGhCLFdBQ0EsTUFBQSxDQUFxQjBpQixhQUFBLEVBQUF2VCxPQUFBLEdBR3JCbVMsRUFBQTJDLEdBQUEzQyxFQUFBOEUsR0FDQSxHQUFBQSxFQUFBRSxTQUFBaEYsR0FDQTFqQixFQUFBdW9CLEdBQUFDLEVBQUE5RSxPQUNVLENBQ1YxakIsRUFBQXVvQixHQUFBN0UsRUFBQThFLEdBQ0F4b0IsRUFBQThrQixjQUFBOWtCLEVBQUE4a0IsYUFDQTlrQixFQUFBdVIsUUFBQXZSLEVBQUF1UixPQUdBLE9BQUF2UixFQUlBLFNBQUEyb0IsR0FBQUMsRUFBQXJqQixHQUNBLE9BQUEsU0FBQTlCLEVBQUFvbEIsR0FDQSxJQUFBQyxFQUFBQyxFQUVBLEdBQUFGLElBQUEsT0FBQXBtQixPQUFBb21CLEdBQUEsQ0FDQXZqQixHQUNBQyxFQUNBLFlBQ0FBLEVBQ0EsdURBQ0FBLEVBQ0EscUJBQ0EsZ0ZBRUF3akIsRUFBQXRsQixFQUNBQSxFQUFBb2xCLEVBQ0FBLEVBQUFFLEVBR0FELEVBQUF6RSxFQUFBNWdCLEVBQUFvbEIsR0FDQTVCLEdBQUEva0IsS0FBQTRtQixFQUFBRixHQUNBLE9BQUExbUIsTUFJQSxTQUFBK2tCLEdBQUFwZ0IsRUFBQTBkLEVBQUF5RSxFQUFBM2tCLEdBQ0EsSUFBQXlnQixFQUFBUCxFQUFBUSxjQUNBRixFQUFBTyxHQUFBYixFQUFBUyxPQUNBelQsRUFBQTZULEdBQUFiLEVBQUFyUyxTQUVBLElBQUFyTCxFQUFBekUsVUFFQSxPQUdBaUMsRUFBQUEsR0FBQSxLQUFBLEtBQUFBLEVBRUEsR0FBQWtOLEVBQ0F5QixHQUFBbk0sRUFBQTZHLEdBQUE3RyxFQUFBLFNBQUEwSyxFQUFBeVgsR0FFQSxHQUFBbkUsRUFDQXBYLEdBQUE1RyxFQUFBLE9BQUE2RyxHQUFBN0csRUFBQSxRQUFBZ2UsRUFBQW1FLEdBRUEsR0FBQWxFLEVBQ0FqZSxFQUFBbkUsR0FBQThqQixRQUFBM2YsRUFBQW5FLEdBQUFyQyxVQUFBeWtCLEVBQUFrRSxHQUVBLEdBQUEza0IsRUFDQWxHLEVBQUFrRyxhQUFBd0MsRUFBQWdlLEdBQUF0VCxHQTVGQThTLEVBQUF0a0IsR0FBQXVrQixHQUFBMWxCLFVBQ0F5bEIsRUFBQTRFLFFBQUE3RSxHQStGQSxJQUFBak8sR0FBQXdTLEdBQUEsRUFBQSxPQUNBdEIsR0FBQXNCLElBQUEsRUFBQSxZQUVBLFNBQUFPLEdBQUF6cUIsR0FDQSxjQUFBQSxJQUFBLFVBQUFBLGFBQUEwcUIsT0FJQSxTQUFBQyxHQUFBM3FCLEdBQ0EsT0FDQTZGLEVBQUE3RixJQUNBa0IsRUFBQWxCLElBQ0F5cUIsR0FBQXpxQixJQUNBaUIsRUFBQWpCLElBQ0E0cUIsR0FBQTVxQixJQUNBNnFCLEdBQUE3cUIsSUFDQUEsSUFBQSxNQUNBQSxJQUFBc0UsVUFJQSxTQUFBdW1CLEdBQUE3cUIsR0FDQSxJQUFBOHFCLEVBQUF4cUIsRUFBQU4sS0FBQVcsRUFBQVgsR0FDQStxQixFQUFBLE1BQ0FDLEVBQUEsQ0FDQSxRQUNBLE9BQ0EsSUFDQSxTQUNBLFFBQ0EsSUFDQSxPQUNBLE1BQ0EsSUFDQSxRQUNBLE9BQ0EsSUFDQSxRQUNBLE9BQ0EsSUFDQSxVQUNBLFNBQ0EsSUFDQSxVQUNBLFNBQ0EsSUFDQSxlQUNBLGNBQ0EsTUFFQXhwQixFQUNBeXBCLEVBQ0FDLEVBQUFGLEVBQUFscUIsT0FFQSxJQUFBVSxFQUFBLEVBQW9CQSxFQUFBMHBCLEVBQWlCMXBCLEdBQUEsRUFBQSxDQUNyQ3lwQixFQUFBRCxFQUFBeHBCLEdBQ0F1cEIsRUFBQUEsR0FBQXhxQixFQUFBUCxFQUFBaXJCLEdBR0EsT0FBQUgsR0FBQUMsRUFHQSxTQUFBSCxHQUFBNXFCLEdBQ0EsSUFBQW1yQixFQUFBcHJCLEVBQUFDLEdBQ0FvckIsRUFBQSxNQUNBLEdBQUFELEVBQ0FDLEVBQ0FwckIsRUFBQXFyQixPQUFBLFNBQUFDLEdBQ0EsT0FBQXJxQixFQUFBcXFCLElBQUFiLEdBQUF6cUIsS0FDaUJjLFNBQUEsRUFFakIsT0FBQXFxQixHQUFBQyxFQUdBLFNBQUFHLEdBQUF2ckIsR0FDQSxJQUFBOHFCLEVBQUF4cUIsRUFBQU4sS0FBQVcsRUFBQVgsR0FDQStxQixFQUFBLE1BQ0FDLEVBQUEsQ0FDQSxVQUNBLFVBQ0EsVUFDQSxXQUNBLFdBQ0EsWUFFQXhwQixFQUNBeXBCLEVBRUEsSUFBQXpwQixFQUFBLEVBQW9CQSxFQUFBd3BCLEVBQUFscUIsT0FBdUJVLEdBQUEsRUFBQSxDQUMzQ3lwQixFQUFBRCxFQUFBeHBCLEdBQ0F1cEIsRUFBQUEsR0FBQXhxQixFQUFBUCxFQUFBaXJCLEdBR0EsT0FBQUgsR0FBQUMsRUFHQSxTQUFBUyxHQUFBQyxFQUFBcGpCLEdBQ0EsSUFBQTJFLEVBQUF5ZSxFQUFBemUsS0FBQTNFLEVBQUEsT0FBQSxNQUNBLE9BQUEyRSxHQUFBLEVBQ0EsV0FDQUEsR0FBQSxFQUNBLFdBQ0FBLEVBQUEsRUFDQSxVQUNBQSxFQUFBLEVBQ0EsVUFDQUEsRUFBQSxFQUNBLFVBQ0FBLEVBQUEsRUFDQSxXQUNBLFdBR0EsU0FBQTBlLEdBQUFDLEVBQUFDLEdBRUEsR0FBQWhzQixVQUFBa0IsU0FBQSxFQUNBLElBQUFsQixVQUFBLEdBQUEsQ0FDQStyQixFQUFBcm5CLFVBQ0FzbkIsRUFBQXRuQixlQUNjLEdBQUFxbUIsR0FBQS9xQixVQUFBLElBQUEsQ0FDZCtyQixFQUFBL3JCLFVBQUEsR0FDQWdzQixFQUFBdG5CLGVBQ2MsR0FBQWluQixHQUFBM3JCLFVBQUEsSUFBQSxDQUNkZ3NCLEVBQUFoc0IsVUFBQSxHQUNBK3JCLEVBQUFybkIsVUFLQSxJQUFBK0QsRUFBQXNqQixHQUFBMUksSUFDQTRJLEVBQUFqRSxHQUFBdmYsRUFBQTVFLE1BQUFxb0IsUUFBQSxPQUNBaHFCLEVBQUFwQyxFQUFBcXNCLGVBQUF0b0IsS0FBQW9vQixJQUFBLFdBQ0F2akIsRUFDQXNqQixJQUNBN2tCLEVBQUE2a0IsRUFBQTlwQixJQUNBOHBCLEVBQUE5cEIsR0FBQXpCLEtBQUFvRCxLQUFBNEUsR0FDQXVqQixFQUFBOXBCLElBRUEsT0FBQTJCLEtBQUEzQixPQUNBd0csR0FBQTdFLEtBQUFvRyxhQUFBMUIsU0FBQXJHLEVBQUEyQixLQUFBd2YsRUFBQTVhLEtBSUEsU0FBQXlmLEtBQ0EsT0FBQSxJQUFBcGlCLEVBQUFqQyxNQUdBLFNBQUF1bUIsR0FBQWhxQixFQUFBd04sR0FDQSxJQUFBd2UsRUFBQW5tQixFQUFBN0YsR0FBQUEsRUFBQWlqQixFQUFBampCLEdBQ0EsS0FBQXlELEtBQUFFLFdBQUFxb0IsRUFBQXJvQixXQUNBLE9BQUEsTUFFQTZKLEVBQUFELEVBQUFDLElBQUEsY0FDQSxHQUFBQSxJQUFBLGNBQ0EsT0FBQS9KLEtBQUE3QixVQUFBb3FCLEVBQUFwcUIsZUFFQSxPQUFBb3FCLEVBQUFwcUIsVUFBQTZCLEtBQUFxa0IsUUFBQWdFLFFBQUF0ZSxHQUFBNUwsVUFJQSxTQUFBcW9CLEdBQUFqcUIsRUFBQXdOLEdBQ0EsSUFBQXdlLEVBQUFubUIsRUFBQTdGLEdBQUFBLEVBQUFpakIsRUFBQWpqQixHQUNBLEtBQUF5RCxLQUFBRSxXQUFBcW9CLEVBQUFyb0IsV0FDQSxPQUFBLE1BRUE2SixFQUFBRCxFQUFBQyxJQUFBLGNBQ0EsR0FBQUEsSUFBQSxjQUNBLE9BQUEvSixLQUFBN0IsVUFBQW9xQixFQUFBcHFCLGVBRUEsT0FBQTZCLEtBQUFxa0IsUUFBQW1FLE1BQUF6ZSxHQUFBNUwsVUFBQW9xQixFQUFBcHFCLFVBSUEsU0FBQXNxQixHQUFBcG5CLEVBQUFELEVBQUEySSxFQUFBMmUsR0FDQSxJQUFBQyxFQUFBdm1CLEVBQUFmLEdBQUFBLEVBQUFtZSxFQUFBbmUsR0FDQXVuQixFQUFBeG1CLEVBQUFoQixHQUFBQSxFQUFBb2UsRUFBQXBlLEdBQ0EsS0FBQXBCLEtBQUFFLFdBQUF5b0IsRUFBQXpvQixXQUFBMG9CLEVBQUExb0IsV0FDQSxPQUFBLE1BRUF3b0IsRUFBQUEsR0FBQSxLQUNBLE9BQ0FBLEVBQUEsS0FBQSxJQUNBMW9CLEtBQUF1bUIsUUFBQW9DLEVBQUE1ZSxJQUNBL0osS0FBQXdtQixTQUFBbUMsRUFBQTVlLE1BQ0EyZSxFQUFBLEtBQUEsSUFDQTFvQixLQUFBd21CLFNBQUFvQyxFQUFBN2UsSUFDQS9KLEtBQUF1bUIsUUFBQXFDLEVBQUE3ZSxJQUlBLFNBQUE4ZSxHQUFBdHNCLEVBQUF3TixHQUNBLElBQUF3ZSxFQUFBbm1CLEVBQUE3RixHQUFBQSxFQUFBaWpCLEVBQUFqakIsR0FDQXVzQixFQUNBLEtBQUE5b0IsS0FBQUUsV0FBQXFvQixFQUFBcm9CLFdBQ0EsT0FBQSxNQUVBNkosRUFBQUQsRUFBQUMsSUFBQSxjQUNBLEdBQUFBLElBQUEsY0FDQSxPQUFBL0osS0FBQTdCLFlBQUFvcUIsRUFBQXBxQixjQUNVLENBQ1YycUIsRUFBQVAsRUFBQXBxQixVQUNBLE9BQ0E2QixLQUFBcWtCLFFBQUFnRSxRQUFBdGUsR0FBQTVMLFdBQUEycUIsR0FDQUEsR0FBQTlvQixLQUFBcWtCLFFBQUFtRSxNQUFBemUsR0FBQTVMLFdBS0EsU0FBQTRxQixHQUFBeHNCLEVBQUF3TixHQUNBLE9BQUEvSixLQUFBNm9CLE9BQUF0c0IsRUFBQXdOLElBQUEvSixLQUFBdW1CLFFBQUFocUIsRUFBQXdOLEdBR0EsU0FBQWlmLEdBQUF6c0IsRUFBQXdOLEdBQ0EsT0FBQS9KLEtBQUE2b0IsT0FBQXRzQixFQUFBd04sSUFBQS9KLEtBQUF3bUIsU0FBQWpxQixFQUFBd04sR0FHQSxTQUFBUixHQUFBaE4sRUFBQXdOLEVBQUFrZixHQUNBLElBQUFDLEVBQUFDLEVBQUF0a0IsRUFFQSxJQUFBN0UsS0FBQUUsVUFDQSxPQUFBYyxJQUdBa29CLEVBQUEvRSxHQUFBNW5CLEVBQUF5RCxNQUVBLElBQUFrcEIsRUFBQWhwQixVQUNBLE9BQUFjLElBR0Ftb0IsR0FBQUQsRUFBQXRGLFlBQUE1akIsS0FBQTRqQixhQUFBLElBRUE3WixFQUFBRCxFQUFBQyxHQUVBLE9BQUFBLEdBQ0EsSUFBQSxPQUNBbEYsRUFBQXVrQixHQUFBcHBCLEtBQUFrcEIsR0FBQSxHQUNBLE1BQ0EsSUFBQSxRQUNBcmtCLEVBQUF1a0IsR0FBQXBwQixLQUFBa3BCLEdBQ0EsTUFDQSxJQUFBLFVBQ0Fya0IsRUFBQXVrQixHQUFBcHBCLEtBQUFrcEIsR0FBQSxFQUNBLE1BQ0EsSUFBQSxTQUNBcmtCLEdBQUE3RSxLQUFBa3BCLEdBQUEsSUFDQSxNQUNBLElBQUEsU0FDQXJrQixHQUFBN0UsS0FBQWtwQixHQUFBLElBQ0EsTUFDQSxJQUFBLE9BQ0Fya0IsR0FBQTdFLEtBQUFrcEIsR0FBQSxLQUNBLE1BQ0EsSUFBQSxNQUNBcmtCLEdBQUE3RSxLQUFBa3BCLEVBQUFDLEdBQUEsTUFDQSxNQUNBLElBQUEsT0FDQXRrQixHQUFBN0UsS0FBQWtwQixFQUFBQyxHQUFBLE9BQ0EsTUFDQSxRQUNBdGtCLEVBQUE3RSxLQUFBa3BCLEVBR0EsT0FBQUQsRUFBQXBrQixFQUFBZ0csRUFBQWhHLEdBR0EsU0FBQXVrQixHQUFBcnNCLEVBQUFDLEdBQ0EsR0FBQUQsRUFBQTJPLE9BQUExTyxFQUFBME8sT0FHQSxPQUFBMGQsR0FBQXBzQixFQUFBRCxHQUdBLElBQUFzc0IsR0FBQXJzQixFQUFBNE4sT0FBQTdOLEVBQUE2TixRQUFBLElBQUE1TixFQUFBeU8sUUFBQTFPLEVBQUEwTyxTQUVBNmQsRUFBQXZzQixFQUFBc25CLFFBQUFwUSxJQUFBb1YsRUFBQSxVQUNBRSxFQUNBQyxFQUVBLEdBQUF4c0IsRUFBQXNzQixFQUFBLEVBQUEsQ0FDQUMsRUFBQXhzQixFQUFBc25CLFFBQUFwUSxJQUFBb1YsRUFBQSxFQUFBLFVBRUFHLEdBQUF4c0IsRUFBQXNzQixJQUFBQSxFQUFBQyxPQUNVLENBQ1ZBLEVBQUF4c0IsRUFBQXNuQixRQUFBcFEsSUFBQW9WLEVBQUEsRUFBQSxVQUVBRyxHQUFBeHNCLEVBQUFzc0IsSUFBQUMsRUFBQUQsR0FJQSxRQUFBRCxFQUFBRyxJQUFBLEVBTUEsU0FBQTdzQixLQUNBLE9BQUFxRCxLQUFBcWtCLFFBQUEvbEIsT0FBQSxNQUFBRCxPQUFBLG9DQUdBLFNBQUFvckIsR0FBQUMsR0FDQSxJQUFBMXBCLEtBQUFFLFVBQ0EsT0FBQSxLQUVBLElBQUF6QixFQUFBaXJCLElBQUEsS0FDQTlwQixFQUFBbkIsRUFBQXVCLEtBQUFxa0IsUUFBQTVsQixNQUFBdUIsS0FDQSxHQUFBSixFQUFBZ0wsT0FBQSxHQUFBaEwsRUFBQWdMLE9BQUEsS0FDQSxPQUFBbEUsR0FDQTlHLEVBQ0FuQixFQUNBLGlDQUNBLGdDQUdBLEdBQUE2RSxFQUFBNUYsS0FBQWhCLFVBQUErc0IsYUFFQSxHQUFBaHJCLEVBQ0EsT0FBQXVCLEtBQUEycEIsU0FBQUYsbUJBRUEsT0FBQSxJQUFBL3JCLEtBQUFzQyxLQUFBN0IsVUFBQTZCLEtBQUE0akIsWUFBQSxHQUFBLEtBQ0E2RixjQUNBbGpCLFFBQUEsSUFBQUcsR0FBQTlHLEVBQUEsTUFHQSxPQUFBOEcsR0FDQTlHLEVBQ0FuQixFQUFBLCtCQUFBLDhCQVVBLFNBQUFtckIsS0FDQSxJQUFBNXBCLEtBQUFFLFVBQ0EsTUFBQSxxQkFBQUYsS0FBQTBCLEdBQUEsT0FFQSxJQUFBeUUsRUFBQSxTQUNBMGpCLEVBQUEsR0FDQUMsRUFDQWxmLEVBQ0FtZixFQUNBQyxFQUNBLElBQUFocUIsS0FBQTJsQixVQUFBLENBQ0F4ZixFQUFBbkcsS0FBQTRqQixjQUFBLEVBQUEsYUFBQSxtQkFDQWlHLEVBQUEsSUFFQUMsRUFBQSxJQUFBM2pCLEVBQUEsTUFDQXlFLEVBQUEsR0FBQTVLLEtBQUE0SyxRQUFBNUssS0FBQTRLLFFBQUEsS0FBQSxPQUFBLFNBQ0FtZixFQUFBLHdCQUNBQyxFQUFBSCxFQUFBLE9BRUEsT0FBQTdwQixLQUFBM0IsT0FBQXlyQixFQUFBbGYsRUFBQW1mLEVBQUFDLEdBR0EsU0FBQTNyQixHQUFBNHJCLEdBQ0EsSUFBQUEsRUFDQUEsRUFBQWpxQixLQUFBNmxCLFFBQ0E1cEIsRUFBQWl1QixpQkFDQWp1QixFQUFBa3VCLGNBRUEsSUFBQXRsQixFQUFBNkIsR0FBQTFHLEtBQUFpcUIsR0FDQSxPQUFBanFCLEtBQUFvRyxhQUFBZ2tCLFdBQUF2bEIsR0FHQSxTQUFBeEQsR0FBQTZtQixFQUFBaGYsR0FDQSxHQUNBbEosS0FBQUUsWUFDQWtDLEVBQUE4bEIsSUFBQUEsRUFBQWhvQixXQUFBc2YsRUFBQTBJLEdBQUFob0IsV0FFQSxPQUFBaWlCLEVBQUEsQ0FBb0MvZ0IsR0FBQXBCLEtBQUFxQixLQUFBNm1CLElBQ3BDNXBCLE9BQUEwQixLQUFBMUIsVUFDQStyQixVQUFBbmhCLFFBRUEsT0FBQWxKLEtBQUFvRyxhQUFBTyxjQUlBLFNBQUEyakIsR0FBQXBoQixHQUNBLE9BQUFsSixLQUFBcUIsS0FBQW1lLElBQUF0VyxHQUdBLFNBQUE5SCxHQUFBOG1CLEVBQUFoZixHQUNBLEdBQ0FsSixLQUFBRSxZQUNBa0MsRUFBQThsQixJQUFBQSxFQUFBaG9CLFdBQUFzZixFQUFBMEksR0FBQWhvQixXQUVBLE9BQUFpaUIsRUFBQSxDQUFvQzlnQixLQUFBckIsS0FBQW9CLEdBQUE4bUIsSUFDcEM1cEIsT0FBQTBCLEtBQUExQixVQUNBK3JCLFVBQUFuaEIsUUFFQSxPQUFBbEosS0FBQW9HLGFBQUFPLGNBSUEsU0FBQTRqQixHQUFBcmhCLEdBQ0EsT0FBQWxKLEtBQUFvQixHQUFBb2UsSUFBQXRXLEdBTUEsU0FBQTVLLEdBQUF3RSxHQUNBLElBQUEwbkIsRUFFQSxHQUFBMW5CLElBQUFqQyxVQUNBLE9BQUFiLEtBQUFnQyxRQUFBMlgsVUFDVSxDQUNWNlEsRUFBQXhRLEdBQUFsWCxHQUNBLEdBQUEwbkIsR0FBQSxLQUNBeHFCLEtBQUFnQyxRQUFBd29CLEVBRUEsT0FBQXhxQixNQTFIQS9ELEVBQUFrdUIsY0FBQSx1QkFDQWx1QixFQUFBaXVCLGlCQUFBLHlCQTZIQSxJQUFBTyxHQUFBaG9CLEVBQ0Esa0pBQ0EsU0FBQUssR0FDQSxHQUFBQSxJQUFBakMsVUFDQSxPQUFBYixLQUFBb0csa0JBRUEsT0FBQXBHLEtBQUExQixPQUFBd0UsS0FLQSxTQUFBc0QsS0FDQSxPQUFBcEcsS0FBQWdDLFFBR0EsSUFBQTBvQixHQUFBLElBQ0FDLEdBQUEsR0FBQUQsR0FDQUUsR0FBQSxHQUFBRCxHQUNBRSxJQUFBLElBQUEsSUFBQSxJQUFBLEdBQUFELEdBR0EsU0FBQUUsR0FBQUMsRUFBQUMsR0FDQSxPQUFBRCxFQUFBQyxFQUFBQSxHQUFBQSxFQUdBLFNBQUFDLEdBQUFsaUIsRUFBQW5KLEVBQUE2SSxHQUVBLEdBQUFNLEVBQUEsS0FBQUEsR0FBQSxFQUVBLE9BQUEsSUFBQXJMLEtBQUFxTCxFQUFBLElBQUFuSixFQUFBNkksR0FBQW9pQixRQUVBLE9BQUEsSUFBQW50QixLQUFBcUwsRUFBQW5KLEVBQUE2SSxHQUFBdEssVUFJQSxTQUFBK3NCLEdBQUFuaUIsRUFBQW5KLEVBQUE2SSxHQUVBLEdBQUFNLEVBQUEsS0FBQUEsR0FBQSxFQUVBLE9BQUFyTCxLQUFBNFUsSUFBQXZKLEVBQUEsSUFBQW5KLEVBQUE2SSxHQUFBb2lCLFFBRUEsT0FBQW50QixLQUFBNFUsSUFBQXZKLEVBQUFuSixFQUFBNkksR0FJQSxTQUFBNGYsR0FBQXRlLEdBQ0EsSUFBQW1lLEVBQUFpRCxFQUNBcGhCLEVBQUFELEVBQUFDLEdBQ0EsR0FBQUEsSUFBQWxKLFdBQUFrSixJQUFBLGdCQUFBL0osS0FBQUUsVUFDQSxPQUFBRixLQUdBbXJCLEVBQUFuckIsS0FBQThCLE9BQUFvcEIsR0FBQUQsR0FFQSxPQUFBbGhCLEdBQ0EsSUFBQSxPQUNBbWUsRUFBQWlELEVBQUFuckIsS0FBQTRLLE9BQUEsRUFBQSxHQUNBLE1BQ0EsSUFBQSxVQUNBc2QsRUFBQWlELEVBQ0FuckIsS0FBQTRLLE9BQ0E1SyxLQUFBeUwsUUFBQXpMLEtBQUF5TCxRQUFBLEVBQ0EsR0FFQSxNQUNBLElBQUEsUUFDQXljLEVBQUFpRCxFQUFBbnJCLEtBQUE0SyxPQUFBNUssS0FBQXlMLFFBQUEsR0FDQSxNQUNBLElBQUEsT0FDQXljLEVBQUFpRCxFQUNBbnJCLEtBQUE0SyxPQUNBNUssS0FBQXlMLFFBQ0F6TCxLQUFBMEwsT0FBQTFMLEtBQUFpVCxXQUVBLE1BQ0EsSUFBQSxVQUNBaVYsRUFBQWlELEVBQ0FuckIsS0FBQTRLLE9BQ0E1SyxLQUFBeUwsUUFDQXpMLEtBQUEwTCxRQUFBMUwsS0FBQW9yQixhQUFBLElBRUEsTUFDQSxJQUFBLE1BQ0EsSUFBQSxPQUNBbEQsRUFBQWlELEVBQUFuckIsS0FBQTRLLE9BQUE1SyxLQUFBeUwsUUFBQXpMLEtBQUEwTCxRQUNBLE1BQ0EsSUFBQSxPQUNBd2MsRUFBQWxvQixLQUFBUSxHQUFBckMsVUFDQStwQixHQUFBNEMsR0FDQTVDLEdBQUFsb0IsS0FBQThCLE9BQUEsRUFBQTlCLEtBQUE0akIsWUFBQStHLElBQ0FDLElBRUEsTUFDQSxJQUFBLFNBQ0ExQyxFQUFBbG9CLEtBQUFRLEdBQUFyQyxVQUNBK3BCLEdBQUE0QyxHQUFBNUMsRUFBQXlDLElBQ0EsTUFDQSxJQUFBLFNBQ0F6QyxFQUFBbG9CLEtBQUFRLEdBQUFyQyxVQUNBK3BCLEdBQUE0QyxHQUFBNUMsRUFBQXdDLElBQ0EsTUFHQTFxQixLQUFBUSxHQUFBOGpCLFFBQUE0RCxHQUNBanNCLEVBQUFrRyxhQUFBbkMsS0FBQSxNQUNBLE9BQUFBLEtBR0EsU0FBQXdvQixHQUFBemUsR0FDQSxJQUFBbWUsRUFBQWlELEVBQ0FwaEIsRUFBQUQsRUFBQUMsR0FDQSxHQUFBQSxJQUFBbEosV0FBQWtKLElBQUEsZ0JBQUEvSixLQUFBRSxVQUNBLE9BQUFGLEtBR0FtckIsRUFBQW5yQixLQUFBOEIsT0FBQW9wQixHQUFBRCxHQUVBLE9BQUFsaEIsR0FDQSxJQUFBLE9BQ0FtZSxFQUFBaUQsRUFBQW5yQixLQUFBNEssT0FBQSxFQUFBLEVBQUEsR0FBQSxFQUNBLE1BQ0EsSUFBQSxVQUNBc2QsRUFDQWlELEVBQ0FuckIsS0FBQTRLLE9BQ0E1SyxLQUFBeUwsUUFBQXpMLEtBQUF5TCxRQUFBLEVBQUEsRUFDQSxHQUNBLEVBQ0EsTUFDQSxJQUFBLFFBQ0F5YyxFQUFBaUQsRUFBQW5yQixLQUFBNEssT0FBQTVLLEtBQUF5TCxRQUFBLEVBQUEsR0FBQSxFQUNBLE1BQ0EsSUFBQSxPQUNBeWMsRUFDQWlELEVBQ0FuckIsS0FBQTRLLE9BQ0E1SyxLQUFBeUwsUUFDQXpMLEtBQUEwTCxPQUFBMUwsS0FBQWlULFVBQUEsR0FDQSxFQUNBLE1BQ0EsSUFBQSxVQUNBaVYsRUFDQWlELEVBQ0FuckIsS0FBQTRLLE9BQ0E1SyxLQUFBeUwsUUFDQXpMLEtBQUEwTCxRQUFBMUwsS0FBQW9yQixhQUFBLEdBQUEsR0FDQSxFQUNBLE1BQ0EsSUFBQSxNQUNBLElBQUEsT0FDQWxELEVBQUFpRCxFQUFBbnJCLEtBQUE0SyxPQUFBNUssS0FBQXlMLFFBQUF6TCxLQUFBMEwsT0FBQSxHQUFBLEVBQ0EsTUFDQSxJQUFBLE9BQ0F3YyxFQUFBbG9CLEtBQUFRLEdBQUFyQyxVQUNBK3BCLEdBQ0EwQyxHQUNBRSxHQUNBNUMsR0FBQWxvQixLQUFBOEIsT0FBQSxFQUFBOUIsS0FBQTRqQixZQUFBK0csSUFDQUMsSUFFQSxFQUNBLE1BQ0EsSUFBQSxTQUNBMUMsRUFBQWxvQixLQUFBUSxHQUFBckMsVUFDQStwQixHQUFBeUMsR0FBQUcsR0FBQTVDLEVBQUF5QyxJQUFBLEVBQ0EsTUFDQSxJQUFBLFNBQ0F6QyxFQUFBbG9CLEtBQUFRLEdBQUFyQyxVQUNBK3BCLEdBQUF3QyxHQUFBSSxHQUFBNUMsRUFBQXdDLElBQUEsRUFDQSxNQUdBMXFCLEtBQUFRLEdBQUE4akIsUUFBQTRELEdBQ0Fqc0IsRUFBQWtHLGFBQUFuQyxLQUFBLE1BQ0EsT0FBQUEsS0FHQSxTQUFBN0IsS0FDQSxPQUFBNkIsS0FBQVEsR0FBQXJDLFdBQUE2QixLQUFBK0IsU0FBQSxHQUFBLElBR0EsU0FBQXNwQixLQUNBLE9BQUFqbUIsS0FBQTJGLE1BQUEvSyxLQUFBN0IsVUFBQSxLQUdBLFNBQUF3ckIsS0FDQSxPQUFBLElBQUFqc0IsS0FBQXNDLEtBQUE3QixXQUdBLFNBQUF1bkIsS0FDQSxJQUFBOWxCLEVBQUFJLEtBQ0EsTUFBQSxDQUNBSixFQUFBZ0wsT0FDQWhMLEVBQUE2TCxRQUNBN0wsRUFBQThMLE9BQ0E5TCxFQUFBcWdCLE9BQ0FyZ0IsRUFBQW1oQixTQUNBbmhCLEVBQUFvaEIsU0FDQXBoQixFQUFBcWhCLGVBSUEsU0FBQXFLLEtBQ0EsSUFBQTFyQixFQUFBSSxLQUNBLE1BQUEsQ0FDQXNpQixNQUFBMWlCLEVBQUFnTCxPQUNBeUUsT0FBQXpQLEVBQUE2TCxRQUNBQyxLQUFBOUwsRUFBQThMLE9BQ0EwTCxNQUFBeFgsRUFBQXdYLFFBQ0FHLFFBQUEzWCxFQUFBMlgsVUFDQUssUUFBQWhZLEVBQUFnWSxVQUNBZ0wsYUFBQWhqQixFQUFBZ2pCLGdCQUlBLFNBQUEySSxLQUVBLE9BQUF2ckIsS0FBQUUsVUFBQUYsS0FBQXlwQixjQUFBLEtBR0EsU0FBQStCLEtBQ0EsT0FBQXRyQixFQUFBRixNQUdBLFNBQUF5ckIsS0FDQSxPQUFBdnRCLEVBQUEsR0FBd0J5QixFQUFBSyxPQUd4QixTQUFBMHJCLEtBQ0EsT0FBQS9yQixFQUFBSyxNQUFBbEIsU0FHQSxTQUFBNnNCLEtBQ0EsTUFBQSxDQUNBcHZCLE1BQUF5RCxLQUFBMEIsR0FDQXJELE9BQUEyQixLQUFBMkIsR0FDQXJELE9BQUEwQixLQUFBZ0MsUUFDQXNmLE1BQUF0aEIsS0FBQThCLE9BQ0F2RCxPQUFBeUIsS0FBQVcsU0FxREEsU0FBQWlyQixHQUFBaHNCLEVBQUF2QixHQUNBLElBQUFOLEVBQ0ErZCxFQUNBcFEsRUFDQW1nQixFQUFBN3JCLEtBQUE4ckIsT0FBQTlSLEdBQUEsTUFBQThSLE1BQ0EsSUFBQS90QixFQUFBLEVBQUErZCxFQUFBK1AsRUFBQXh1QixPQUFxQ1UsRUFBQStkLElBQU8vZCxFQUFBLENBQzVDLGNBQUE4dEIsRUFBQTl0QixHQUFBZ3VCLE9BQ0EsSUFBQSxTQUVBcmdCLEVBQUF6UCxFQUFBNHZCLEVBQUE5dEIsR0FBQWd1QixPQUFBMUQsUUFBQSxPQUNBd0QsRUFBQTl0QixHQUFBZ3VCLE1BQUFyZ0IsRUFBQXZOLFVBQ0EsTUFHQSxjQUFBMHRCLEVBQUE5dEIsR0FBQWl1QixPQUNBLElBQUEsWUFDQUgsRUFBQTl0QixHQUFBaXVCLE9BQUFDLFNBQ0EsTUFDQSxJQUFBLFNBRUF2Z0IsRUFBQXpQLEVBQUE0dkIsRUFBQTl0QixHQUFBaXVCLE9BQUEzRCxRQUFBLE9BQUFscUIsVUFDQTB0QixFQUFBOXRCLEdBQUFpdUIsTUFBQXRnQixFQUFBdk4sVUFDQSxPQUdBLE9BQUEwdEIsRUFHQSxTQUFBSyxHQUFBQyxFQUFBOXRCLEVBQUFFLEdBQ0EsSUFBQVIsRUFDQStkLEVBQ0ErUCxFQUFBN3JCLEtBQUE2ckIsT0FDQXhvQixFQUNBNlcsRUFDQWtTLEVBQ0FELEVBQUFBLEVBQUF6a0IsY0FFQSxJQUFBM0osRUFBQSxFQUFBK2QsRUFBQStQLEVBQUF4dUIsT0FBcUNVLEVBQUErZCxJQUFPL2QsRUFBQSxDQUM1Q3NGLEVBQUF3b0IsRUFBQTl0QixHQUFBc0YsS0FBQXFFLGNBQ0F3UyxFQUFBMlIsRUFBQTl0QixHQUFBbWMsS0FBQXhTLGNBQ0Ewa0IsRUFBQVAsRUFBQTl0QixHQUFBcXVCLE9BQUExa0IsY0FFQSxHQUFBbkosRUFDQSxPQUFBRixHQUNBLElBQUEsSUFDQSxJQUFBLEtBQ0EsSUFBQSxNQUNBLEdBQUE2YixJQUFBaVMsRUFDQSxPQUFBTixFQUFBOXRCLEdBRUEsTUFFQSxJQUFBLE9BQ0EsR0FBQXNGLElBQUE4b0IsRUFDQSxPQUFBTixFQUFBOXRCLEdBRUEsTUFFQSxJQUFBLFFBQ0EsR0FBQXF1QixJQUFBRCxFQUNBLE9BQUFOLEVBQUE5dEIsR0FFQSxXQUVjLEdBQUEsQ0FBQXNGLEVBQUE2VyxFQUFBa1MsR0FBQXRkLFFBQUFxZCxJQUFBLEVBQ2QsT0FBQU4sRUFBQTl0QixJQUtBLFNBQUFzdUIsR0FBQTlzQixFQUFBcUwsR0FDQSxJQUFBMGhCLEVBQUEvc0IsRUFBQXdzQixPQUFBeHNCLEVBQUF5c0IsT0FBQSxHQUFBLEVBQ0EsR0FBQXBoQixJQUFBL0osVUFDQSxPQUFBNUUsRUFBQXNELEVBQUF3c0IsT0FBQW5oQixZQUVBLE9BQUEzTyxFQUFBc0QsRUFBQXdzQixPQUFBbmhCLFFBQUFBLEVBQUFyTCxFQUFBbWtCLFFBQUE0SSxFQUlBLFNBQUFDLEtBQ0EsSUFBQXh1QixFQUNBK2QsRUFDQXZhLEVBQ0FzcUIsRUFBQTdyQixLQUFBb0csYUFBQXlsQixPQUNBLElBQUE5dEIsRUFBQSxFQUFBK2QsRUFBQStQLEVBQUF4dUIsT0FBcUNVLEVBQUErZCxJQUFPL2QsRUFBQSxDQUU1Q3dELEVBQUF2QixLQUFBcWtCLFFBQUFnRSxRQUFBLE9BQUFscUIsVUFFQSxHQUFBMHRCLEVBQUE5dEIsR0FBQWd1QixPQUFBeHFCLEdBQUFBLEdBQUFzcUIsRUFBQTl0QixHQUFBaXVCLE1BQ0EsT0FBQUgsRUFBQTl0QixHQUFBc0YsS0FFQSxHQUFBd29CLEVBQUE5dEIsR0FBQWl1QixPQUFBenFCLEdBQUFBLEdBQUFzcUIsRUFBQTl0QixHQUFBZ3VCLE1BQ0EsT0FBQUYsRUFBQTl0QixHQUFBc0YsS0FJQSxNQUFBLEdBR0EsU0FBQW1wQixLQUNBLElBQUF6dUIsRUFDQStkLEVBQ0F2YSxFQUNBc3FCLEVBQUE3ckIsS0FBQW9HLGFBQUF5bEIsT0FDQSxJQUFBOXRCLEVBQUEsRUFBQStkLEVBQUErUCxFQUFBeHVCLE9BQXFDVSxFQUFBK2QsSUFBTy9kLEVBQUEsQ0FFNUN3RCxFQUFBdkIsS0FBQXFrQixRQUFBZ0UsUUFBQSxPQUFBbHFCLFVBRUEsR0FBQTB0QixFQUFBOXRCLEdBQUFndUIsT0FBQXhxQixHQUFBQSxHQUFBc3FCLEVBQUE5dEIsR0FBQWl1QixNQUNBLE9BQUFILEVBQUE5dEIsR0FBQXF1QixPQUVBLEdBQUFQLEVBQUE5dEIsR0FBQWl1QixPQUFBenFCLEdBQUFBLEdBQUFzcUIsRUFBQTl0QixHQUFBZ3VCLE1BQ0EsT0FBQUYsRUFBQTl0QixHQUFBcXVCLE9BSUEsTUFBQSxHQUdBLFNBQUFLLEtBQ0EsSUFBQTF1QixFQUNBK2QsRUFDQXZhLEVBQ0FzcUIsRUFBQTdyQixLQUFBb0csYUFBQXlsQixPQUNBLElBQUE5dEIsRUFBQSxFQUFBK2QsRUFBQStQLEVBQUF4dUIsT0FBcUNVLEVBQUErZCxJQUFPL2QsRUFBQSxDQUU1Q3dELEVBQUF2QixLQUFBcWtCLFFBQUFnRSxRQUFBLE9BQUFscUIsVUFFQSxHQUFBMHRCLEVBQUE5dEIsR0FBQWd1QixPQUFBeHFCLEdBQUFBLEdBQUFzcUIsRUFBQTl0QixHQUFBaXVCLE1BQ0EsT0FBQUgsRUFBQTl0QixHQUFBbWMsS0FFQSxHQUFBMlIsRUFBQTl0QixHQUFBaXVCLE9BQUF6cUIsR0FBQUEsR0FBQXNxQixFQUFBOXRCLEdBQUFndUIsTUFDQSxPQUFBRixFQUFBOXRCLEdBQUFtYyxLQUlBLE1BQUEsR0FHQSxTQUFBd1MsS0FDQSxJQUFBM3VCLEVBQ0ErZCxFQUNBd1EsRUFDQS9xQixFQUNBc3FCLEVBQUE3ckIsS0FBQW9HLGFBQUF5bEIsT0FDQSxJQUFBOXRCLEVBQUEsRUFBQStkLEVBQUErUCxFQUFBeHVCLE9BQXFDVSxFQUFBK2QsSUFBTy9kLEVBQUEsQ0FDNUN1dUIsRUFBQVQsRUFBQTl0QixHQUFBZ3VCLE9BQUFGLEVBQUE5dEIsR0FBQWl1QixPQUFBLEdBQUEsRUFHQXpxQixFQUFBdkIsS0FBQXFrQixRQUFBZ0UsUUFBQSxPQUFBbHFCLFVBRUEsR0FDQTB0QixFQUFBOXRCLEdBQUFndUIsT0FBQXhxQixHQUFBQSxHQUFBc3FCLEVBQUE5dEIsR0FBQWl1QixPQUNBSCxFQUFBOXRCLEdBQUFpdUIsT0FBQXpxQixHQUFBQSxHQUFBc3FCLEVBQUE5dEIsR0FBQWd1QixNQUVBLE9BQ0EvckIsS0FBQTRLLE9BQUEzTyxFQUFBNHZCLEVBQUE5dEIsR0FBQWd1QixPQUFBbmhCLFFBQUEwaEIsRUFDQVQsRUFBQTl0QixHQUFBMmxCLE9BS0EsT0FBQTFqQixLQUFBNEssT0FHQSxTQUFBK2hCLEdBQUF0ZixHQUNBLElBQUF2USxFQUFBa0QsS0FBQSxrQkFDQTRzQixHQUFBaHdCLEtBQUFvRCxNQUVBLE9BQUFxTixFQUFBck4sS0FBQTZzQixlQUFBN3NCLEtBQUE4c0IsV0FHQSxTQUFBQyxHQUFBMWYsR0FDQSxJQUFBdlEsRUFBQWtELEtBQUEsa0JBQ0E0c0IsR0FBQWh3QixLQUFBb0QsTUFFQSxPQUFBcU4sRUFBQXJOLEtBQUFndEIsZUFBQWh0QixLQUFBOHNCLFdBR0EsU0FBQUcsR0FBQTVmLEdBQ0EsSUFBQXZRLEVBQUFrRCxLQUFBLG9CQUNBNHNCLEdBQUFod0IsS0FBQW9ELE1BRUEsT0FBQXFOLEVBQUFyTixLQUFBa3RCLGlCQUFBbHRCLEtBQUE4c0IsV0FHQSxTQUFBSyxHQUFBOWYsRUFBQS9PLEdBQ0EsT0FBQUEsRUFBQXl1QixjQUFBMWYsR0FHQSxTQUFBK2YsR0FBQS9mLEVBQUEvTyxHQUNBLE9BQUFBLEVBQUFxdUIsY0FBQXRmLEdBR0EsU0FBQWdnQixHQUFBaGdCLEVBQUEvTyxHQUNBLE9BQUFBLEVBQUEydUIsZ0JBQUE1ZixHQUdBLFNBQUFpZ0IsR0FBQWpnQixFQUFBL08sR0FDQSxPQUFBQSxFQUFBaXZCLHNCQUFBNWdCLEdBR0EsU0FBQWlnQixLQUNBLElBQUFZLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0EvYixFQUFBLEdBQ0E1VCxFQUNBK2QsRUFDQStQLEVBQUE3ckIsS0FBQTZyQixPQUVBLElBQUE5dEIsRUFBQSxFQUFBK2QsRUFBQStQLEVBQUF4dUIsT0FBcUNVLEVBQUErZCxJQUFPL2QsRUFBQSxDQUM1QzB2QixFQUFBeHZCLEtBQUF1UCxFQUFBcWUsRUFBQTl0QixHQUFBc0YsT0FDQW1xQixFQUFBdnZCLEtBQUF1UCxFQUFBcWUsRUFBQTl0QixHQUFBbWMsT0FDQXdULEVBQUF6dkIsS0FBQXVQLEVBQUFxZSxFQUFBOXRCLEdBQUFxdUIsU0FFQXphLEVBQUExVCxLQUFBdVAsRUFBQXFlLEVBQUE5dEIsR0FBQXNGLE9BQ0FzTyxFQUFBMVQsS0FBQXVQLEVBQUFxZSxFQUFBOXRCLEdBQUFtYyxPQUNBdkksRUFBQTFULEtBQUF1UCxFQUFBcWUsRUFBQTl0QixHQUFBcXVCLFNBR0Fwc0IsS0FBQThzQixXQUFBLElBQUFucEIsT0FBQSxLQUFBZ08sRUFBQTFPLEtBQUEsS0FBQSxJQUFBLEtBQ0FqRCxLQUFBNnNCLGVBQUEsSUFBQWxwQixPQUFBLEtBQUE4cEIsRUFBQXhxQixLQUFBLEtBQUEsSUFBQSxLQUNBakQsS0FBQWd0QixlQUFBLElBQUFycEIsT0FBQSxLQUFBNnBCLEVBQUF2cUIsS0FBQSxLQUFBLElBQUEsS0FDQWpELEtBQUFrdEIsaUJBQUEsSUFBQXZwQixPQUNBLEtBQUErcEIsRUFBQXpxQixLQUFBLEtBQUEsSUFDQSxLQWNBLFNBQUEwcUIsR0FBQTNuQixFQUFBNG5CLEdBQ0E3bkIsRUFBQSxFQUFBLENBQUFDLEVBQUFBLEVBQUEzSSxRQUFBLEVBQUF1d0IsR0EwQ0EsU0FBQUMsR0FBQXR4QixHQUNBLE9BQUF1eEIsR0FBQWx4QixLQUNBb0QsS0FDQXpELEVBQ0F5RCxLQUFBZ1QsT0FDQWhULEtBQUFpVCxVQUNBalQsS0FBQW9HLGFBQUF3TixNQUFBbEIsSUFDQTFTLEtBQUFvRyxhQUFBd04sTUFBQWpCLEtBSUEsU0FBQW9iLEdBQUF4eEIsR0FDQSxPQUFBdXhCLEdBQUFseEIsS0FDQW9ELEtBQ0F6RCxFQUNBeUQsS0FBQTBpQixVQUNBMWlCLEtBQUFvckIsYUFDQSxFQUNBLEdBSUEsU0FBQTRDLEtBQ0EsT0FBQXZhLEVBQUF6VCxLQUFBNEssT0FBQSxFQUFBLEdBR0EsU0FBQXFqQixLQUNBLE9BQUF4YSxFQUFBelQsS0FBQWt1QixjQUFBLEVBQUEsR0FHQSxTQUFBQyxLQUNBLElBQUFDLEVBQUFwdUIsS0FBQW9HLGFBQUF3TixNQUNBLE9BQUFILEVBQUF6VCxLQUFBNEssT0FBQXdqQixFQUFBMWIsSUFBQTBiLEVBQUF6YixLQUdBLFNBQUEwYixLQUNBLElBQUFELEVBQUFwdUIsS0FBQW9HLGFBQUF3TixNQUNBLE9BQUFILEVBQUF6VCxLQUFBaWYsV0FBQW1QLEVBQUExYixJQUFBMGIsRUFBQXpiLEtBR0EsU0FBQW1iLEdBQUF2eEIsRUFBQXlXLEVBQUFDLEVBQUFQLEVBQUFDLEdBQ0EsSUFBQTJiLEVBQ0EsR0FBQS94QixHQUFBLEtBQ0EsT0FBQWdYLEdBQUF2VCxLQUFBMFMsRUFBQUMsR0FBQS9ILFNBQ1UsQ0FDVjBqQixFQUFBN2EsRUFBQWxYLEVBQUFtVyxFQUFBQyxHQUNBLEdBQUFLLEVBQUFzYixFQUNBdGIsRUFBQXNiLEVBRUEsT0FBQUMsR0FBQTN4QixLQUFBb0QsS0FBQXpELEVBQUF5VyxFQUFBQyxFQUFBUCxFQUFBQyxJQUlBLFNBQUE0YixHQUFBdFAsRUFBQWpNLEVBQUFDLEVBQUFQLEVBQUFDLEdBQ0EsSUFBQTZiLEVBQUF6YixHQUFBa00sRUFBQWpNLEVBQUFDLEVBQUFQLEVBQUFDLEdBQ0FqSCxFQUFBMkcsR0FBQW1jLEVBQUE1akIsS0FBQSxFQUFBNGpCLEVBQUFwYixXQUVBcFQsS0FBQTRLLEtBQUFjLEVBQUE2RyxrQkFDQXZTLEtBQUF5TCxNQUFBQyxFQUFBNFMsZUFDQXRlLEtBQUEwTCxLQUFBQSxFQUFBNlMsY0FDQSxPQUFBdmUsS0F3QkEsU0FBQXl1QixHQUFBbHlCLEdBQ0EsT0FBQUEsR0FBQSxLQUNBNkksS0FBQTBGLE1BQUE5SyxLQUFBeUwsUUFBQSxHQUFBLEdBQ0F6TCxLQUFBeUwsT0FBQWxQLEVBQUEsR0FBQSxFQUFBeUQsS0FBQXlMLFFBQUEsR0FuYUExRixFQUFBLElBQUEsRUFBQSxFQUFBLFdBQ0FBLEVBQUEsS0FBQSxFQUFBLEVBQUEsV0FDQUEsRUFBQSxNQUFBLEVBQUEsRUFBQSxXQUNBQSxFQUFBLE9BQUEsRUFBQSxFQUFBLFdBQ0FBLEVBQUEsUUFBQSxFQUFBLEVBQUEsYUFFQUEsRUFBQSxJQUFBLENBQUEsSUFBQSxHQUFBLEtBQUEsV0FDQUEsRUFBQSxJQUFBLENBQUEsS0FBQSxHQUFBLEVBQUEsV0FDQUEsRUFBQSxJQUFBLENBQUEsTUFBQSxHQUFBLEVBQUEsV0FDQUEsRUFBQSxJQUFBLENBQUEsT0FBQSxHQUFBLEVBQUEsV0FFQW1ILEVBQUEsSUFBQWlnQixJQUNBamdCLEVBQUEsS0FBQWlnQixJQUNBamdCLEVBQUEsTUFBQWlnQixJQUNBamdCLEVBQUEsT0FBQWtnQixJQUNBbGdCLEVBQUEsUUFBQW1nQixJQUVBdGYsRUFDQSxDQUFBLElBQUEsS0FBQSxNQUFBLE9BQUEsU0FDQSxTQUFBeFIsRUFBQWtLLEVBQUF2RSxFQUFBOEQsR0FDQSxJQUFBekcsRUFBQTJDLEVBQUFGLFFBQUEwc0IsVUFBQW55QixFQUFBeUosRUFBQTlELEVBQUF2QixTQUNBLEdBQUFwQixFQUNBSSxFQUFBdUMsR0FBQTNDLElBQUFBLE9BRUFJLEVBQUF1QyxHQUFBakQsV0FBQTFDLElBS0EyUSxFQUFBLElBQUFQLElBQ0FPLEVBQUEsS0FBQVAsSUFDQU8sRUFBQSxNQUFBUCxJQUNBTyxFQUFBLE9BQUFQLElBQ0FPLEVBQUEsS0FBQW9nQixJQUVBdmYsRUFBQSxDQUFBLElBQUEsS0FBQSxNQUFBLFFBQUFNLEdBQ0FOLEVBQUEsQ0FBQSxNQUFBLFNBQUF4UixFQUFBa0ssRUFBQXZFLEVBQUE4RCxHQUNBLElBQUFNLEVBQ0EsR0FBQXBFLEVBQUFGLFFBQUF1ckIscUJBQ0FqbkIsRUFBQS9KLEVBQUErSixNQUFBcEUsRUFBQUYsUUFBQXVyQixzQkFHQSxHQUFBcnJCLEVBQUFGLFFBQUEyc0Isb0JBQ0Fsb0IsRUFBQTRILEdBQUFuTSxFQUFBRixRQUFBMnNCLG9CQUFBcHlCLEVBQUErSixRQUVBRyxFQUFBNEgsR0FBQXlELFNBQUF2VixFQUFBLE1BNE9Bd0osRUFBQSxFQUFBLENBQUEsS0FBQSxHQUFBLEVBQUEsV0FDQSxPQUFBL0YsS0FBQWlmLFdBQUEsTUFHQWxaLEVBQUEsRUFBQSxDQUFBLEtBQUEsR0FBQSxFQUFBLFdBQ0EsT0FBQS9GLEtBQUFrdUIsY0FBQSxNQU9BUCxHQUFBLE9BQUEsWUFDQUEsR0FBQSxRQUFBLFlBQ0FBLEdBQUEsT0FBQSxlQUNBQSxHQUFBLFFBQUEsZUFJQWxrQixFQUFBLFdBQUEsTUFDQUEsRUFBQSxjQUFBLE1BSUFZLEVBQUEsV0FBQSxHQUNBQSxFQUFBLGNBQUEsR0FJQTZDLEVBQUEsSUFBQU4sSUFDQU0sRUFBQSxJQUFBTixJQUNBTSxFQUFBLEtBQUFiLEVBQUFKLEdBQ0FpQixFQUFBLEtBQUFiLEVBQUFKLEdBQ0FpQixFQUFBLE9BQUFULEdBQUFOLElBQ0FlLEVBQUEsT0FBQVQsR0FBQU4sSUFDQWUsRUFBQSxRQUFBUixHQUFBTixJQUNBYyxFQUFBLFFBQUFSLEdBQUFOLElBRUE2QixHQUNBLENBQUEsT0FBQSxRQUFBLE9BQUEsU0FDQSxTQUFBMVIsRUFBQXlXLEVBQUE5USxFQUFBOEQsR0FDQWdOLEVBQUFoTixFQUFBTixPQUFBLEVBQUEsSUFBQXNGLEVBQUF6TyxLQUlBMFIsR0FBQSxDQUFBLEtBQUEsTUFBQSxTQUFBMVIsRUFBQXlXLEVBQUE5USxFQUFBOEQsR0FDQWdOLEVBQUFoTixHQUFBL0osRUFBQTRWLGtCQUFBdFYsS0FzRUF3SixFQUFBLElBQUEsRUFBQSxLQUFBLFdBSUEwRCxFQUFBLFVBQUEsS0FJQVksRUFBQSxVQUFBLEdBSUE2QyxFQUFBLElBQUFsQixJQUNBK0IsRUFBQSxJQUFBLFNBQUF4UixFQUFBa0ssR0FDQUEsRUFBQTZILElBQUF0RCxFQUFBek8sR0FBQSxHQUFBLElBYUF3SixFQUFBLElBQUEsQ0FBQSxLQUFBLEdBQUEsS0FBQSxRQUlBMEQsRUFBQSxPQUFBLEtBR0FZLEVBQUEsT0FBQSxHQUlBNkMsRUFBQSxJQUFBYixHQUNBYSxFQUFBLEtBQUFiLEVBQUFKLEdBQ0FpQixFQUFBLEtBQUEsU0FBQUcsRUFBQS9PLEdBRUEsT0FBQStPLEVBQ0EvTyxFQUFBc0YseUJBQUF0RixFQUFBd0YsY0FDQXhGLEVBQUFvRixpQ0FHQXFLLEVBQUEsQ0FBQSxJQUFBLE1BQUFRLEdBQ0FSLEVBQUEsS0FBQSxTQUFBeFIsRUFBQWtLLEdBQ0FBLEVBQUE4SCxHQUFBdkQsRUFBQXpPLEVBQUErSixNQUFBK0YsR0FBQSxNQUtBLElBQUF1aUIsR0FBQXZqQixHQUFBLE9BQUEsTUF5QkEsU0FBQXdqQixHQUFBdHlCLEdBQ0EsSUFBQTZXLEVBQ0FoTyxLQUFBK2QsT0FDQW5qQixLQUFBcWtCLFFBQUFnRSxRQUFBLE9BQUFyb0IsS0FBQXFrQixRQUFBZ0UsUUFBQSxTQUFBLE9BQ0EsRUFDQSxPQUFBOXJCLEdBQUEsS0FBQTZXLEVBQUFwVCxLQUFBaVUsSUFBQTFYLEVBQUE2VyxFQUFBLEtBMUJBck4sRUFBQSxNQUFBLENBQUEsT0FBQSxHQUFBLE9BQUEsYUFJQTBELEVBQUEsWUFBQSxPQUdBWSxFQUFBLFlBQUEsR0FJQTZDLEVBQUEsTUFBQVYsSUFDQVUsRUFBQSxPQUFBaEIsSUFDQTZCLEVBQUEsQ0FBQSxNQUFBLFFBQUEsU0FBQXhSLEVBQUFrSyxFQUFBdkUsR0FDQUEsRUFBQTZjLFdBQUEvVCxFQUFBek8sS0FpQkF3SixFQUFBLElBQUEsQ0FBQSxLQUFBLEdBQUEsRUFBQSxVQUlBMEQsRUFBQSxTQUFBLEtBSUFZLEVBQUEsU0FBQSxJQUlBNkMsRUFBQSxJQUFBYixHQUNBYSxFQUFBLEtBQUFiLEVBQUFKLEdBQ0E4QixFQUFBLENBQUEsSUFBQSxNQUFBVSxHQUlBLElBQUFxZ0IsR0FBQXpqQixHQUFBLFVBQUEsT0FzQkEwakIsSUFsQkFocEIsRUFBQSxJQUFBLENBQUEsS0FBQSxHQUFBLEVBQUEsVUFJQTBELEVBQUEsU0FBQSxLQUlBWSxFQUFBLFNBQUEsSUFJQTZDLEVBQUEsSUFBQWIsR0FDQWEsRUFBQSxLQUFBYixFQUFBSixHQUNBOEIsRUFBQSxDQUFBLElBQUEsTUFBQVcsR0FJQXJELEdBQUEsVUFBQSxRQThDQXJGLEdBQUFncEIsR0FDQSxJQTNDQWpwQixFQUFBLElBQUEsRUFBQSxFQUFBLFdBQ0EsU0FBQS9GLEtBQUFpaEIsY0FBQSxPQUdBbGIsRUFBQSxFQUFBLENBQUEsS0FBQSxHQUFBLEVBQUEsV0FDQSxTQUFBL0YsS0FBQWloQixjQUFBLE1BR0FsYixFQUFBLEVBQUEsQ0FBQSxNQUFBLEdBQUEsRUFBQSxlQUNBQSxFQUFBLEVBQUEsQ0FBQSxPQUFBLEdBQUEsRUFBQSxXQUNBLE9BQUEvRixLQUFBaWhCLGNBQUEsS0FFQWxiLEVBQUEsRUFBQSxDQUFBLFFBQUEsR0FBQSxFQUFBLFdBQ0EsT0FBQS9GLEtBQUFpaEIsY0FBQSxNQUVBbGIsRUFBQSxFQUFBLENBQUEsU0FBQSxHQUFBLEVBQUEsV0FDQSxPQUFBL0YsS0FBQWloQixjQUFBLE1BRUFsYixFQUFBLEVBQUEsQ0FBQSxVQUFBLEdBQUEsRUFBQSxXQUNBLE9BQUEvRixLQUFBaWhCLGNBQUEsTUFFQWxiLEVBQUEsRUFBQSxDQUFBLFdBQUEsR0FBQSxFQUFBLFdBQ0EsT0FBQS9GLEtBQUFpaEIsY0FBQSxNQUVBbGIsRUFBQSxFQUFBLENBQUEsWUFBQSxHQUFBLEVBQUEsV0FDQSxPQUFBL0YsS0FBQWloQixjQUFBLE1BS0F4WCxFQUFBLGNBQUEsTUFJQVksRUFBQSxjQUFBLElBSUE2QyxFQUFBLElBQUFWLEdBQUFSLElBQ0FrQixFQUFBLEtBQUFWLEdBQUFQLEdBQ0FpQixFQUFBLE1BQUFWLEdBQUFOLElBR0FsRyxHQUFBLE9BQXlCQSxHQUFBM0ksUUFBQSxFQUFtQjJJLElBQUEsSUFDNUNrSCxFQUFBbEgsR0FBQTJHLElBR0EsU0FBQXNpQixHQUFBMXlCLEVBQUFrSyxHQUNBQSxFQUFBa0ksSUFBQTNELEdBQUEsS0FBQXpPLEdBQUEsS0FHQSxJQUFBeUosR0FBQSxJQUFzQkEsR0FBQTNJLFFBQUEsRUFBbUIySSxJQUFBLElBQ3pDK0gsRUFBQS9ILEdBQUFpcEIsSUFZQSxTQUFBQyxLQUNBLE9BQUFsdkIsS0FBQThCLE9BQUEsTUFBQSxHQUdBLFNBQUFxdEIsS0FDQSxPQUFBbnZCLEtBQUE4QixPQUFBLDZCQUFBLEdBZEFrdEIsR0FBQTNqQixHQUFBLGVBQUEsT0FJQXRGLEVBQUEsSUFBQSxFQUFBLEVBQUEsWUFDQUEsRUFBQSxLQUFBLEVBQUEsRUFBQSxZQVlBLElBQUFxcEIsRUFBQW50QixFQUFBdkYsVUFtQ0EsR0FqQ0EweUIsRUFBQW5iLElBQUFBLEdBQ0FtYixFQUFBMXFCLFNBQUF1akIsR0FDQW1ILEVBQUEvSyxNQUFBQSxHQUNBK0ssRUFBQTdsQixLQUFBQSxHQUNBNmxCLEVBQUE1RyxNQUFBQSxHQUNBNEcsRUFBQS93QixPQUFBQSxHQUNBK3dCLEVBQUEvdEIsS0FBQUEsR0FDQSt0QixFQUFBOUUsUUFBQUEsR0FDQThFLEVBQUFodUIsR0FBQUEsR0FDQWd1QixFQUFBN0UsTUFBQUEsR0FDQTZFLEVBQUE1akIsSUFBQUksR0FDQXdqQixFQUFBMUQsVUFBQUEsR0FDQTBELEVBQUE3SSxRQUFBQSxHQUNBNkksRUFBQTVJLFNBQUFBLEdBQ0E0SSxFQUFBM0csVUFBQUEsR0FDQTJHLEVBQUF2RyxPQUFBQSxHQUNBdUcsRUFBQXJHLGNBQUFBLEdBQ0FxRyxFQUFBcEcsZUFBQUEsR0FDQW9HLEVBQUFsdkIsUUFBQXNyQixHQUNBNEQsRUFBQTNFLEtBQUFBLEdBQ0EyRSxFQUFBOXdCLE9BQUFBLEdBQ0E4d0IsRUFBQWhwQixXQUFBQSxHQUNBZ3BCLEVBQUEzcEIsSUFBQWdjLEdBQ0EyTixFQUFBcGUsSUFBQXVRLEdBQ0E2TixFQUFBM0QsYUFBQUEsR0FDQTJELEVBQUE1ckIsSUFBQXFJLEdBQ0F1akIsRUFBQS9HLFFBQUFBLEdBQ0ErRyxFQUFBakssU0FBQUEsR0FDQWlLLEVBQUExSixRQUFBQSxHQUNBMEosRUFBQTlELFNBQUFBLEdBQ0E4RCxFQUFBekYsT0FBQUEsR0FDQXlGLEVBQUEzRixZQUFBQSxHQUNBMkYsRUFBQXhGLFFBQUFBLFVBQ0F5RixTQUFBLGFBQUFBLE9BQUFDLEtBQUEsS0FDQUYsRUFBQUMsT0FBQUMsSUFBQSwrQkFBQSxXQUNBLE1BQUEsVUFBQXR2QixLQUFBM0IsU0FBQSxLQW1FQSxTQUFBa3hCLEdBQUFoekIsR0FDQSxPQUFBaWpCLEVBQUFqakIsRUFBQSxLQUdBLFNBQUFpekIsS0FDQSxPQUFBaFEsRUFBQXRqQixNQUFBLEtBQUFDLFdBQUFzekIsWUFHQSxTQUFBQyxHQUFBdm1CLEdBQ0EsT0FBQUEsRUF6RUFpbUIsRUFBQTdELE9BQUFBLEdBQ0E2RCxFQUFBenlCLFNBQUFBLEdBQ0F5eUIsRUFBQS9ELEtBQUFBLEdBQ0ErRCxFQUFBanhCLFFBQUFBLEdBQ0FpeEIsRUFBQXpELGFBQUFBLEdBQ0F5RCxFQUFBakQsUUFBQUksR0FDQTZDLEVBQUFPLFVBQUFuRCxHQUNBNEMsRUFBQVEsUUFBQW5ELEdBQ0EyQyxFQUFBUyxRQUFBbkQsR0FDQTBDLEVBQUF4a0IsS0FBQW1ILEdBQ0FxZCxFQUFBemtCLFdBQUFxSCxHQUNBb2QsRUFBQW5RLFNBQUE0TyxHQUNBdUIsRUFBQWxCLFlBQUFILEdBQ0FxQixFQUFBNU0sUUFBQTRNLEVBQUE3TSxTQUFBa00sR0FDQVcsRUFBQTNqQixNQUFBd0YsR0FDQW1lLEVBQUF6akIsWUFBQXVGLEdBQ0FrZSxFQUFBcGMsS0FBQW9jLEVBQUEzTSxNQUFBek8sR0FDQW9iLEVBQUExTSxRQUFBME0sRUFBQVUsU0FBQTViLEdBQ0FrYixFQUFBM2IsWUFBQTBhLEdBQ0FpQixFQUFBVyxnQkFBQTFCLEdBQ0FlLEVBQUFZLGVBQUFoQyxHQUNBb0IsRUFBQWEsc0JBQUFoQyxHQUNBbUIsRUFBQTFqQixLQUFBa2pCLEdBQ0FRLEVBQUE3WixJQUFBNlosRUFBQXpNLEtBQUF2TSxHQUNBZ1osRUFBQW5jLFFBQUFxRCxHQUNBOFksRUFBQWhFLFdBQUE3VSxHQUNBNlksRUFBQWhjLFVBQUF5YixHQUNBTyxFQUFBblAsS0FBQW1QLEVBQUFoWSxNQUFBaUIsR0FDQStXLEVBQUFyTyxPQUFBcU8sRUFBQTdYLFFBQUF1WCxHQUNBTSxFQUFBcE8sT0FBQW9PLEVBQUF4WCxRQUFBbVgsR0FDQUssRUFBQW5PLFlBQUFtTyxFQUFBeE0sYUFBQW9NLEdBQ0FJLEVBQUF4TCxVQUFBYyxHQUNBMEssRUFBQTN3QixJQUFBd21CLEdBQ0FtSyxFQUFBN0ssTUFBQVcsR0FDQWtLLEVBQUFLLFVBQUFySyxHQUNBZ0ssRUFBQTlKLHFCQUFBQSxHQUNBOEosRUFBQWMsTUFBQTNLLEdBQ0E2SixFQUFBekosUUFBQUEsR0FDQXlKLEVBQUF4SixZQUFBQSxHQUNBd0osRUFBQXZKLE1BQUFBLEdBQ0F1SixFQUFBOU4sTUFBQXVFLEdBQ0F1SixFQUFBZSxTQUFBakIsR0FDQUUsRUFBQWdCLFNBQUFqQixHQUNBQyxFQUFBaUIsTUFBQTV0QixFQUNBLGtEQUNBbXNCLElBRUFRLEVBQUEvZixPQUFBNU0sRUFDQSxtREFDQXdPLElBRUFtZSxFQUFBOU0sTUFBQTdmLEVBQ0EsaURBQ0FzUCxJQUVBcWQsRUFBQXZGLEtBQUFwbkIsRUFDQSwyR0FDQXVpQixJQUVBb0ssRUFBQWtCLGFBQUE3dEIsRUFDQSwwR0FDQStpQixJQWVBLElBQUErSyxFQUFBcnNCLEdBQUF4SCxVQXVDQSxTQUFBOHpCLEdBQUFueUIsRUFBQW95QixFQUFBQyxFQUFBQyxHQUNBLElBQUFyeUIsRUFBQTBiLEtBQ0F2YixFQUFBTCxJQUFBb0YsSUFBQW10QixFQUFBRixHQUNBLE9BQUFueUIsRUFBQW95QixHQUFBanlCLEVBQUFKLEdBR0EsU0FBQXV5QixHQUFBdnlCLEVBQUFveUIsRUFBQUMsR0FDQSxHQUFBbHpCLEVBQUFhLEdBQUEsQ0FDQW95QixFQUFBcHlCLEVBQ0FBLEVBQUF3QyxVQUdBeEMsRUFBQUEsR0FBQSxHQUVBLEdBQUFveUIsR0FBQSxLQUNBLE9BQUFELEdBQUFueUIsRUFBQW95QixFQUFBQyxFQUFBLFNBR0EsSUFBQTN5QixFQUNBOHlCLEVBQUEsR0FDQSxJQUFBOXlCLEVBQUEsRUFBb0JBLEVBQUEsR0FBUUEsSUFDNUI4eUIsRUFBQTl5QixHQUFBeXlCLEdBQUFueUIsRUFBQU4sRUFBQTJ5QixFQUFBLFNBRUEsT0FBQUcsRUFXQSxTQUFBQyxHQUFBQyxFQUFBMXlCLEVBQUFveUIsRUFBQUMsR0FDQSxVQUFBSyxJQUFBLFVBQUEsQ0FDQSxHQUFBdnpCLEVBQUFhLEdBQUEsQ0FDQW95QixFQUFBcHlCLEVBQ0FBLEVBQUF3QyxVQUdBeEMsRUFBQUEsR0FBQSxPQUNVLENBQ1ZBLEVBQUEweUIsRUFDQU4sRUFBQXB5QixFQUNBMHlCLEVBQUEsTUFFQSxHQUFBdnpCLEVBQUFhLEdBQUEsQ0FDQW95QixFQUFBcHlCLEVBQ0FBLEVBQUF3QyxVQUdBeEMsRUFBQUEsR0FBQSxHQUdBLElBQUFDLEVBQUEwYixLQUNBZ1gsRUFBQUQsRUFBQXp5QixFQUFBc1YsTUFBQWxCLElBQUEsRUFDQTNVLEVBQ0E4eUIsRUFBQSxHQUVBLEdBQUFKLEdBQUEsS0FDQSxPQUFBRCxHQUFBbnlCLEdBQUFveUIsRUFBQU8sR0FBQSxFQUFBTixFQUFBLE9BR0EsSUFBQTN5QixFQUFBLEVBQW9CQSxFQUFBLEVBQU9BLElBQzNCOHlCLEVBQUE5eUIsR0FBQXl5QixHQUFBbnlCLEdBQUFOLEVBQUFpekIsR0FBQSxFQUFBTixFQUFBLE9BRUEsT0FBQUcsRUFHQSxTQUFBSSxHQUFBNXlCLEVBQUFveUIsR0FDQSxPQUFBRyxHQUFBdnlCLEVBQUFveUIsRUFBQSxVQUdBLFNBQUFTLEdBQUE3eUIsRUFBQW95QixHQUNBLE9BQUFHLEdBQUF2eUIsRUFBQW95QixFQUFBLGVBR0EsU0FBQVUsR0FBQUosRUFBQTF5QixFQUFBb3lCLEdBQ0EsT0FBQUssR0FBQUMsRUFBQTF5QixFQUFBb3lCLEVBQUEsWUFHQSxTQUFBVyxHQUFBTCxFQUFBMXlCLEVBQUFveUIsR0FDQSxPQUFBSyxHQUFBQyxFQUFBMXlCLEVBQUFveUIsRUFBQSxpQkFHQSxTQUFBWSxHQUFBTixFQUFBMXlCLEVBQUFveUIsR0FDQSxPQUFBSyxHQUFBQyxFQUFBMXlCLEVBQUFveUIsRUFBQSxlQTVIQUYsRUFBQTdyQixTQUFBQSxHQUNBNnJCLEVBQUF6cEIsZUFBQUEsR0FDQXlwQixFQUFBNXBCLFlBQUFBLEdBQ0E0cEIsRUFBQXJxQixRQUFBQSxHQUNBcXFCLEVBQUFuUCxTQUFBc08sR0FDQWEsRUFBQW5HLFdBQUFzRixHQUNBYSxFQUFBdG5CLGFBQUFBLEdBQ0FzbkIsRUFBQWpuQixXQUFBQSxHQUNBaW5CLEVBQUEvc0IsSUFBQUEsR0FDQStzQixFQUFBMUUsS0FBQUQsR0FDQTJFLEVBQUE3QixVQUFBeEMsR0FDQXFFLEVBQUF2USxnQkFBQXFNLEdBQ0FrRSxFQUFBeEQsY0FBQUEsR0FDQXdELEVBQUE1RCxjQUFBQSxHQUNBNEQsRUFBQXRELGdCQUFBQSxHQUVBc0QsRUFBQWxoQixPQUFBVSxHQUNBd2dCLEVBQUFuaEIsWUFBQWMsR0FDQXFnQixFQUFBL2dCLFlBQUFvQixHQUNBMmYsRUFBQWhoQixZQUFBQSxHQUNBZ2hCLEVBQUFqaEIsaUJBQUFBLEdBQ0FpaEIsRUFBQXZkLEtBQUFXLEdBQ0E0YyxFQUFBZSxlQUFBdmQsR0FDQXdjLEVBQUFnQixlQUFBemQsR0FFQXljLEVBQUE1YixTQUFBVSxHQUNBa2IsRUFBQTliLFlBQUFpQixHQUNBNmEsRUFBQTdiLGNBQUFjLEdBQ0ErYSxFQUFBbmMsY0FBQTZCLEdBRUFzYSxFQUFBemIsY0FBQUEsR0FDQXliLEVBQUExYixtQkFBQUEsR0FDQTBiLEVBQUEzYixpQkFBQUEsR0FFQTJiLEVBQUF4WSxLQUFBTCxHQUNBNlksRUFBQS93QixTQUFBOFksR0E0RkF1QixHQUFBLEtBQUEsQ0FDQWdTLEtBQUEsQ0FDQSxDQUNBRSxNQUFBLGFBQ0FDLE9BQUFDLFNBQ0F2SSxPQUFBLEVBQ0FyZ0IsS0FBQSxjQUNBK29CLE9BQUEsS0FDQWxTLEtBQUEsTUFFQSxDQUNBNlIsTUFBQSxhQUNBQyxPQUFBQyxTQUNBdkksT0FBQSxFQUNBcmdCLEtBQUEsZ0JBQ0Erb0IsT0FBQSxLQUNBbFMsS0FBQSxPQUdBekIsdUJBQUEsdUJBQ0F2UyxRQUFBLFNBQUFsQixHQUNBLElBQUFoSSxFQUFBZ0ksRUFBQSxHQUNBSCxFQUNBbUcsRUFBQWhHLEVBQUEsSUFBQSxNQUFBLEVBQ0EsS0FDQWhJLElBQUEsRUFDQSxLQUNBQSxJQUFBLEVBQ0EsS0FDQUEsSUFBQSxFQUNBLEtBQ0EsS0FDQSxPQUFBZ0ksRUFBQUgsS0FNQTVJLEVBQUF3dUIsS0FBQWhvQixFQUNBLHdEQUNBb1gsSUFFQTVkLEVBQUF1MUIsU0FBQS91QixFQUNBLGdFQUNBdVgsSUFHQSxJQUFBeVgsR0FBQXJzQixLQUFBQyxJQUVBLFNBQUFBLEtBQ0EsSUFBQTBVLEVBQUEvWixLQUFBK2lCLE1BRUEvaUIsS0FBQTZpQixjQUFBNE8sR0FBQXp4QixLQUFBNmlCLGVBQ0E3aUIsS0FBQThpQixNQUFBMk8sR0FBQXp4QixLQUFBOGlCLE9BQ0E5aUIsS0FBQWdRLFFBQUF5aEIsR0FBQXp4QixLQUFBZ1EsU0FFQStKLEVBQUE2SSxhQUFBNk8sR0FBQTFYLEVBQUE2SSxjQUNBN0ksRUFBQW5DLFFBQUE2WixHQUFBMVgsRUFBQW5DLFNBQ0FtQyxFQUFBeEMsUUFBQWthLEdBQUExWCxFQUFBeEMsU0FDQXdDLEVBQUEzQyxNQUFBcWEsR0FBQTFYLEVBQUEzQyxPQUNBMkMsRUFBQTFLLE9BQUFvaUIsR0FBQTFYLEVBQUExSyxRQUNBMEssRUFBQXVJLE1BQUFtUCxHQUFBMVgsRUFBQXVJLE9BRUEsT0FBQXRpQixLQUdBLFNBQUEweEIsR0FBQXJQLEVBQUE5bEIsRUFBQTRPLEVBQUF1YixHQUNBLElBQUFsRixFQUFBVyxFQUFBNWxCLEVBQUE0TyxHQUVBa1gsRUFBQVEsZUFBQTZELEVBQUFsRixFQUFBcUIsY0FDQVIsRUFBQVMsT0FBQTRELEVBQUFsRixFQUFBc0IsTUFDQVQsRUFBQXJTLFNBQUEwVyxFQUFBbEYsRUFBQXhSLFFBRUEsT0FBQXFTLEVBQUFXLFVBSUEsU0FBQTJPLEdBQUFwMUIsRUFBQTRPLEdBQ0EsT0FBQXVtQixHQUFBMXhCLEtBQUF6RCxFQUFBNE8sRUFBQSxHQUlBLFNBQUF5bUIsR0FBQXIxQixFQUFBNE8sR0FDQSxPQUFBdW1CLEdBQUExeEIsS0FBQXpELEVBQUE0TyxHQUFBLEdBR0EsU0FBQTBtQixHQUFBN3NCLEdBQ0EsR0FBQUEsRUFBQSxFQUNBLE9BQUFJLEtBQUEyRixNQUFBL0YsUUFFQSxPQUFBSSxLQUFBMEYsS0FBQTlGLEdBSUEsU0FBQThzQixLQUNBLElBQUFsUCxFQUFBNWlCLEtBQUE2aUIsY0FDQUYsRUFBQTNpQixLQUFBOGlCLE1BQ0F6VCxFQUFBclAsS0FBQWdRLFFBQ0ErSixFQUFBL1osS0FBQStpQixNQUNBbkwsRUFDQUwsRUFDQUgsRUFDQWtMLEVBQ0F5UCxFQUlBLEtBRUFuUCxHQUFBLEdBQUFELEdBQUEsR0FBQXRULEdBQUEsR0FDQXVULEdBQUEsR0FBQUQsR0FBQSxHQUFBdFQsR0FBQSxHQUVBLENBQ0F1VCxHQUFBaVAsR0FBQUcsR0FBQTNpQixHQUFBc1QsR0FBQSxNQUNBQSxFQUFBLEVBQ0F0VCxFQUFBLEVBS0EwSyxFQUFBNkksYUFBQUEsRUFBQSxJQUVBaEwsRUFBQS9NLEVBQUErWCxFQUFBLEtBQ0E3SSxFQUFBbkMsUUFBQUEsRUFBQSxHQUVBTCxFQUFBMU0sRUFBQStNLEVBQUEsSUFDQW1DLEVBQUF4QyxRQUFBQSxFQUFBLEdBRUFILEVBQUF2TSxFQUFBME0sRUFBQSxJQUNBd0MsRUFBQTNDLE1BQUFBLEVBQUEsR0FFQXVMLEdBQUE5WCxFQUFBdU0sRUFBQSxJQUdBMmEsRUFBQWxuQixFQUFBb25CLEdBQUF0UCxJQUNBdFQsR0FBQTBpQixFQUNBcFAsR0FBQWtQLEdBQUFHLEdBQUFELElBR0F6UCxFQUFBelgsRUFBQXdFLEVBQUEsSUFDQUEsR0FBQSxHQUVBMEssRUFBQTRJLEtBQUFBLEVBQ0E1SSxFQUFBMUssT0FBQUEsRUFDQTBLLEVBQUF1SSxNQUFBQSxFQUVBLE9BQUF0aUIsS0FHQSxTQUFBaXlCLEdBQUF0UCxHQUdBLE9BQUFBLEVBQUEsS0FBQSxPQUdBLFNBQUFxUCxHQUFBM2lCLEdBRUEsT0FBQUEsRUFBQSxPQUFBLEtBR0EsU0FBQTZpQixHQUFBbm9CLEdBQ0EsSUFBQS9KLEtBQUFFLFVBQ0EsT0FBQWMsSUFFQSxJQUFBMmhCLEVBQ0F0VCxFQUNBdVQsRUFBQTVpQixLQUFBNmlCLGNBRUE5WSxFQUFBRCxFQUFBQyxHQUVBLEdBQUFBLElBQUEsU0FBQUEsSUFBQSxXQUFBQSxJQUFBLE9BQUEsQ0FDQTRZLEVBQUEzaUIsS0FBQThpQixNQUFBRixFQUFBLE1BQ0F2VCxFQUFBclAsS0FBQWdRLFFBQUFpaUIsR0FBQXRQLEdBQ0EsT0FBQTVZLEdBQ0EsSUFBQSxRQUNBLE9BQUFzRixFQUNBLElBQUEsVUFDQSxPQUFBQSxFQUFBLEVBQ0EsSUFBQSxPQUNBLE9BQUFBLEVBQUEsUUFFVSxDQUVWc1QsRUFBQTNpQixLQUFBOGlCLE1BQUExZCxLQUFBK2QsTUFBQTZPLEdBQUFoeUIsS0FBQWdRLFVBQ0EsT0FBQWpHLEdBQ0EsSUFBQSxPQUNBLE9BQUE0WSxFQUFBLEVBQUFDLEVBQUEsT0FDQSxJQUFBLE1BQ0EsT0FBQUQsRUFBQUMsRUFBQSxNQUNBLElBQUEsT0FDQSxPQUFBRCxFQUFBLEdBQUFDLEVBQUEsS0FDQSxJQUFBLFNBQ0EsT0FBQUQsRUFBQSxLQUFBQyxFQUFBLElBQ0EsSUFBQSxTQUNBLE9BQUFELEVBQUEsTUFBQUMsRUFBQSxJQUVBLElBQUEsY0FDQSxPQUFBeGQsS0FBQTJGLE1BQUE0WCxFQUFBLE9BQUFDLEVBQ0EsUUFDQSxNQUFBLElBQUFwbkIsTUFBQSxnQkFBQXVPLEtBTUEsU0FBQW9vQixLQUNBLElBQUFueUIsS0FBQUUsVUFDQSxPQUFBYyxJQUVBLE9BQ0FoQixLQUFBNmlCLGNBQ0E3aUIsS0FBQThpQixNQUFBLE1BQ0E5aUIsS0FBQWdRLFFBQUEsR0FBQSxPQUNBaEYsRUFBQWhMLEtBQUFnUSxRQUFBLElBQUEsUUFJQSxTQUFBb2lCLEdBQUFDLEdBQ0EsT0FBQSxXQUNBLE9BQUFyeUIsS0FBQWt5QixHQUFBRyxJQUlBLElBQUFDLEdBQUFGLEdBQUEsTUFDQUcsR0FBQUgsR0FBQSxLQUNBSSxHQUFBSixHQUFBLEtBQ0FLLEdBQUFMLEdBQUEsS0FDQU0sR0FBQU4sR0FBQSxLQUNBTyxHQUFBUCxHQUFBLEtBQ0FRLEdBQUFSLEdBQUEsS0FDQVMsR0FBQVQsR0FBQSxLQUNBVSxHQUFBVixHQUFBLEtBRUEsU0FBQVcsS0FDQSxPQUFBNVEsRUFBQW5pQixNQUdBLFNBQUFnekIsR0FBQWpwQixHQUNBQSxFQUFBRCxFQUFBQyxHQUNBLE9BQUEvSixLQUFBRSxVQUFBRixLQUFBK0osRUFBQSxPQUFBL0ksSUFHQSxTQUFBaXlCLEdBQUE1dkIsR0FDQSxPQUFBLFdBQ0EsT0FBQXJELEtBQUFFLFVBQUFGLEtBQUEraUIsTUFBQTFmLEdBQUFyQyxLQUlBLElBQUE0aEIsR0FBQXFRLEdBQUEsZ0JBQ0FyYixHQUFBcWIsR0FBQSxXQUNBMWIsR0FBQTBiLEdBQUEsV0FDQTdiLEdBQUE2YixHQUFBLFNBQ0F0USxHQUFBc1EsR0FBQSxRQUNBNWpCLEdBQUE0akIsR0FBQSxVQUNBM1EsR0FBQTJRLEdBQUEsU0FFQSxTQUFBeFEsS0FDQSxPQUFBNVgsRUFBQTdLLEtBQUEyaUIsT0FBQSxHQUdBLElBQUFRLEdBQUEvZCxLQUFBK2QsTUFDQStQLEdBQUEsQ0FDQTdxQixHQUFBLEdBQ0FELEVBQUEsR0FDQXhJLEVBQUEsR0FDQTJJLEVBQUEsR0FDQUUsRUFBQSxHQUNBRSxFQUFBLEtBQ0FFLEVBQUEsSUFJQSxTQUFBc3FCLEdBQUFocUIsRUFBQW5FLEVBQUFrRSxFQUFBRSxFQUFBOUssR0FDQSxPQUFBQSxFQUFBMkssYUFBQWpFLEdBQUEsSUFBQWtFLEVBQUFDLEVBQUFDLEdBR0EsU0FBQWdxQixHQUFBQyxFQUFBbnFCLEVBQUFncUIsRUFBQTUwQixHQUNBLElBQUErakIsRUFBQUYsRUFBQWtSLEdBQUFodUIsTUFDQXVTLEVBQUF1TCxHQUFBZCxFQUFBNlAsR0FBQSxNQUNBM2EsRUFBQTRMLEdBQUFkLEVBQUE2UCxHQUFBLE1BQ0E5YSxFQUFBK0wsR0FBQWQsRUFBQTZQLEdBQUEsTUFDQXZQLEVBQUFRLEdBQUFkLEVBQUE2UCxHQUFBLE1BQ0E3aUIsRUFBQThULEdBQUFkLEVBQUE2UCxHQUFBLE1BQ0F6UCxFQUFBVSxHQUFBZCxFQUFBNlAsR0FBQSxNQUNBNVAsRUFBQWEsR0FBQWQsRUFBQTZQLEdBQUEsTUFDQW4xQixFQUNBNmEsR0FBQXNiLEVBQUE3cUIsSUFBQSxDQUFBLElBQUF1UCxJQUNBQSxFQUFBc2IsRUFBQTlxQixHQUFBLENBQUEsS0FBQXdQLElBQ0FMLEdBQUEsR0FBQSxDQUFBLE1BQ0FBLEVBQUEyYixFQUFBdHpCLEdBQUEsQ0FBQSxLQUFBMlgsSUFDQUgsR0FBQSxHQUFBLENBQUEsTUFDQUEsRUFBQThiLEVBQUEzcUIsR0FBQSxDQUFBLEtBQUE2TyxJQUNBdUwsR0FBQSxHQUFBLENBQUEsTUFDQUEsRUFBQXVRLEVBQUF6cUIsR0FBQSxDQUFBLEtBQUFrYSxHQUVBLEdBQUF1USxFQUFBdnFCLEdBQUEsS0FDQTVMLEVBQ0FBLEdBQ0EwbEIsR0FBQSxHQUFBLENBQUEsTUFDQUEsRUFBQXlRLEVBQUF2cUIsR0FBQSxDQUFBLEtBQUE4WixHQUVBMWxCLEVBQUFBLEdBQ0FzUyxHQUFBLEdBQUEsQ0FBQSxNQUNBQSxFQUFBNmpCLEVBQUFycUIsR0FBQSxDQUFBLEtBQUF3RyxJQUNBaVQsR0FBQSxHQUFBLENBQUEsTUFBQSxDQUFBLEtBQUFBLEdBRUF2bEIsRUFBQSxHQUFBbU0sRUFDQW5NLEVBQUEsSUFBQXMyQixFQUFBLEVBQ0F0MkIsRUFBQSxHQUFBdUIsRUFDQSxPQUFBNjBCLEdBQUFqM0IsTUFBQSxLQUFBYSxHQUlBLFNBQUF1MkIsR0FBQUMsR0FDQSxHQUFBQSxJQUFBMXlCLFVBQ0EsT0FBQXNpQixHQUVBLFVBQUFvUSxJQUFBLFdBQUEsQ0FDQXBRLEdBQUFvUSxFQUNBLE9BQUEsS0FFQSxPQUFBLE1BSUEsU0FBQUMsR0FBQUMsRUFBQUMsR0FDQSxHQUFBUixHQUFBTyxLQUFBNXlCLFVBQ0EsT0FBQSxNQUVBLEdBQUE2eUIsSUFBQTd5QixVQUNBLE9BQUFxeUIsR0FBQU8sR0FFQVAsR0FBQU8sR0FBQUMsRUFDQSxHQUFBRCxJQUFBLElBQ0FQLEdBQUE3cUIsR0FBQXFyQixFQUFBLEVBRUEsT0FBQSxLQUdBLFNBQUFySixHQUFBc0osRUFBQUMsR0FDQSxJQUFBNXpCLEtBQUFFLFVBQ0EsT0FBQUYsS0FBQW9HLGFBQUFPLGNBR0EsSUFBQWt0QixFQUFBLE1BQ0FDLEVBQUFaLEdBQ0E1MEIsRUFDQXVHLEVBRUEsVUFBQTh1QixJQUFBLFNBQUEsQ0FDQUMsRUFBQUQsRUFDQUEsRUFBQSxNQUVBLFVBQUFBLElBQUEsVUFDQUUsRUFBQUYsRUFFQSxVQUFBQyxJQUFBLFNBQUEsQ0FDQUUsRUFBQXIzQixPQUFBczNCLE9BQUEsR0FBaUNiLEdBQUFVLEdBQ2pDLEdBQUFBLEVBQUF4ckIsR0FBQSxNQUFBd3JCLEVBQUF2ckIsSUFBQSxLQUNBeXJCLEVBQUF6ckIsR0FBQXVyQixFQUFBeHJCLEVBQUEsRUFJQTlKLEVBQUEwQixLQUFBb0csYUFDQXZCLEVBQUF1dUIsR0FBQXB6QixNQUFBNnpCLEVBQUFDLEVBQUF4MUIsR0FFQSxHQUFBdTFCLEVBQ0FodkIsRUFBQXZHLEVBQUFnTCxZQUFBdEosS0FBQTZFLEdBR0EsT0FBQXZHLEVBQUE4ckIsV0FBQXZsQixHQUdBLElBQUFtdkIsR0FBQTV1QixLQUFBQyxJQUVBLFNBQUFFLEdBQUEwSixHQUNBLE9BQUFBLEVBQUEsSUFBQUEsRUFBQSxLQUFBQSxFQUdBLFNBQUFnbEIsS0FRQSxJQUFBajBCLEtBQUFFLFVBQ0EsT0FBQUYsS0FBQW9HLGFBQUFPLGNBR0EsSUFBQWlSLEVBQUFvYyxHQUFBaDBCLEtBQUE2aUIsZUFBQSxJQUNBRixFQUFBcVIsR0FBQWgwQixLQUFBOGlCLE9BQ0F6VCxFQUFBMmtCLEdBQUFoMEIsS0FBQWdRLFNBQ0F1SCxFQUNBSCxFQUNBa0wsRUFDQWxhLEVBQ0E4ckIsRUFBQWwwQixLQUFBdXlCLFlBQ0E0QixFQUNBQyxFQUNBQyxFQUNBQyxFQUVBLElBQUFKLEVBR0EsTUFBQSxNQUlBM2MsRUFBQTFNLEVBQUErTSxFQUFBLElBQ0FSLEVBQUF2TSxFQUFBME0sRUFBQSxJQUNBSyxHQUFBLEdBQ0FMLEdBQUEsR0FHQStLLEVBQUF6WCxFQUFBd0UsRUFBQSxJQUNBQSxHQUFBLEdBR0FqSCxFQUFBd1AsRUFBQUEsRUFBQTJjLFFBQUEsR0FBQWh1QixRQUFBLFNBQUEsSUFBQSxHQUVBNHRCLEVBQUFELEVBQUEsRUFBQSxJQUFBLEdBQ0FFLEVBQUE3dUIsR0FBQXZGLEtBQUFnUSxXQUFBekssR0FBQTJ1QixHQUFBLElBQUEsR0FDQUcsRUFBQTl1QixHQUFBdkYsS0FBQThpQixTQUFBdmQsR0FBQTJ1QixHQUFBLElBQUEsR0FDQUksRUFBQS91QixHQUFBdkYsS0FBQTZpQixpQkFBQXRkLEdBQUEydUIsR0FBQSxJQUFBLEdBRUEsT0FDQUMsRUFDQSxLQUNBN1IsRUFBQThSLEVBQUE5UixFQUFBLElBQUEsS0FDQWpULEVBQUEra0IsRUFBQS9rQixFQUFBLElBQUEsS0FDQXNULEVBQUEwUixFQUFBMVIsRUFBQSxJQUFBLEtBQ0F2TCxHQUFBRyxHQUFBSyxFQUFBLElBQUEsS0FDQVIsRUFBQWtkLEVBQUFsZCxFQUFBLElBQUEsS0FDQUcsRUFBQStjLEVBQUEvYyxFQUFBLElBQUEsS0FDQUssRUFBQTBjLEVBQUFsc0IsRUFBQSxJQUFBLElBSUEsSUFBQW9zQixFQUFBcFMsR0FBQTFsQixVQXdHQSxPQXRHQTgzQixFQUFBdDBCLFFBQUEraEIsR0FDQXVTLEVBQUFudkIsSUFBQUEsR0FDQW12QixFQUFBdmdCLElBQUEwZCxHQUNBNkMsRUFBQXJQLFNBQUF5TSxHQUNBNEMsRUFBQXRDLEdBQUFBLEdBQ0FzQyxFQUFBbEMsZUFBQUEsR0FDQWtDLEVBQUFqQyxVQUFBQSxHQUNBaUMsRUFBQWhDLFVBQUFBLEdBQ0FnQyxFQUFBL0IsUUFBQUEsR0FDQStCLEVBQUE5QixPQUFBQSxHQUNBOEIsRUFBQTdCLFFBQUFBLEdBQ0E2QixFQUFBNUIsU0FBQUEsR0FDQTRCLEVBQUEzQixXQUFBQSxHQUNBMkIsRUFBQTFCLFFBQUFBLEdBQ0EwQixFQUFBcjJCLFFBQUFnMEIsR0FDQXFDLEVBQUF4UixRQUFBOE8sR0FDQTBDLEVBQUFuUSxNQUFBME8sR0FDQXlCLEVBQUFocEIsSUFBQXduQixHQUNBd0IsRUFBQTVSLGFBQUFBLEdBQ0E0UixFQUFBNWMsUUFBQUEsR0FDQTRjLEVBQUFqZCxRQUFBQSxHQUNBaWQsRUFBQXBkLE1BQUFBLEdBQ0FvZCxFQUFBN1IsS0FBQUEsR0FDQTZSLEVBQUEvUixNQUFBQSxHQUNBK1IsRUFBQW5sQixPQUFBQSxHQUNBbWxCLEVBQUFsUyxNQUFBQSxHQUNBa1MsRUFBQW5LLFNBQUFBLEdBQ0FtSyxFQUFBL0ssWUFBQXdLLEdBQ0FPLEVBQUE3M0IsU0FBQXMzQixHQUNBTyxFQUFBakosT0FBQTBJLEdBQ0FPLEVBQUFsMkIsT0FBQUEsR0FDQWsyQixFQUFBcHVCLFdBQUFBLEdBRUFvdUIsRUFBQUMsWUFBQWh5QixFQUNBLHNGQUNBd3hCLElBRUFPLEVBQUEvSixLQUFBQSxHQUlBMWtCLEVBQUEsSUFBQSxFQUFBLEVBQUEsUUFDQUEsRUFBQSxJQUFBLEVBQUEsRUFBQSxXQUlBbUgsRUFBQSxJQUFBTixJQUNBTSxFQUFBLElBQUFILElBQ0FnQixFQUFBLElBQUEsU0FBQXhSLEVBQUFrSyxFQUFBdkUsR0FDQUEsRUFBQTFCLEdBQUEsSUFBQTlDLEtBQUFza0IsV0FBQXpsQixHQUFBLE9BRUF3UixFQUFBLElBQUEsU0FBQXhSLEVBQUFrSyxFQUFBdkUsR0FDQUEsRUFBQTFCLEdBQUEsSUFBQTlDLEtBQUFzTixFQUFBek8sTUFLQU4sRUFBQXk0QixRQUFBLFNBRUF0NEIsRUFBQW9qQixHQUVBdmpCLEVBQUE0QixHQUFBdXhCLEVBQ0FuekIsRUFBQStVLElBQUFBLEdBQ0EvVSxFQUFBd0osSUFBQUEsR0FDQXhKLEVBQUEySSxJQUFBQSxHQUNBM0ksRUFBQXdDLElBQUFMLEVBQ0FuQyxFQUFBb3ZCLEtBQUFrRSxHQUNBdHpCLEVBQUFvVCxPQUFBNGhCLEdBQ0FoMUIsRUFBQXdCLE9BQUFBLEVBQ0F4QixFQUFBcUMsT0FBQXViLEdBQ0E1ZCxFQUFBOHFCLFFBQUFobUIsRUFDQTlFLEVBQUFvbUIsU0FBQUYsRUFDQWxtQixFQUFBbUcsU0FBQUEsRUFDQW5HLEVBQUEwWSxTQUFBd2MsR0FDQWwxQixFQUFBd3pCLFVBQUFELEdBQ0F2ekIsRUFBQW1LLFdBQUE0VCxHQUNBL2QsRUFBQWduQixXQUFBQSxHQUNBaG5CLEVBQUFtVCxZQUFBOGhCLEdBQ0FqMUIsRUFBQXdZLFlBQUE0YyxHQUNBcDFCLEVBQUFnZSxhQUFBQSxHQUNBaGUsRUFBQW9lLGFBQUFBLEdBQ0FwZSxFQUFBMGMsUUFBQTRCLEdBQ0F0ZSxFQUFBeVksY0FBQTBjLEdBQ0FuMUIsRUFBQTZOLGVBQUFBLEVBQ0E3TixFQUFBMDRCLHFCQUFBckIsR0FDQXIzQixFQUFBMjRCLHNCQUFBcEIsR0FDQXYzQixFQUFBcXNCLGVBQUFQLEdBQ0E5ckIsRUFBQVMsVUFBQTB5QixFQUdBbnpCLEVBQUE0NEIsVUFBQSxDQUNBQyxlQUFBLG1CQUNBQyx1QkFBQSxzQkFDQUMsa0JBQUEsMEJBQ0F6bUIsS0FBQSxhQUNBMG1CLEtBQUEsUUFDQUMsYUFBQSxXQUNBQyxRQUFBLGVBQ0F2bUIsS0FBQSxhQUNBTixNQUFBLFdBR0FyUyxFQTNpTGdFbTVCLEtDTmhFQyxFQUFBLEdBR0EsU0FBQXpiLEVBQUEwYixHQUVBLElBQUFDLEVBQUFGLEVBQUFDLEdBQ0EsUUFBQXowQixJQUFBMDBCLEVBQ0EsT0FBQUEsRUFBQXo1QixRQUdBRCxFQUFBdzVCLEVBQUFDLEdBQUEsQ0FDQTE1QixHQUFBMDVCLEVBQ0FFLFFBQUEsRUFDQTE1QixRQUFBLElBVUEsT0FOQTI1QixFQUFBSCxHQUFBMTRCLEtBQUFmLEVBQUFDLFFBQUFELEVBQUFBLEVBQUFDLFFBQUE4ZCxHQUdBL2QsRUFBQTI1QixRQUFBLEVBR0EzNUIsRUFBQUMsUUN2QkE4ZCxFQUFBNUssRUFBQSxJQUNBLElBQUE0ZSxFQUFBL3hCLEdBQUFBLEVBQUE2NUIsV0FDQSxJQUFBNzVCLEVBQUEsUUFDQSxJQUFBLEVBRUEsT0FEQStkLEVBQUFuUixFQUFBbWxCLEVBQUEsQ0FBaUM3d0IsRUFBQTZ3QixJQUNqQ0EsR0NMQWhVLEVBQUFuUixFQUFBLENBQUEzTSxFQUFBNjVCLEtBQ0EsSUFBQSxJQUFBN3lCLEtBQUE2eUIsRUFDQS9iLEVBQUExSyxFQUFBeW1CLEVBQUE3eUIsS0FBQThXLEVBQUExSyxFQUFBcFQsRUFBQWdILElBQ0FyRyxPQUFBbTVCLGVBQUE5NUIsRUFBQWdILEVBQUEsQ0FBeUMreUIsWUFBQSxFQUFBcnFCLElBQUFtcUIsRUFBQTd5QixNQ0p6QzhXLEVBQUExSyxFQUFBLENBQUEvUixFQUFBbUUsSUFBQTdFLE9BQUFDLFVBQUFPLGVBQUFMLEtBQUFPLEVBQUFtRSxHQ0NBc1ksRUFBQWtjLEVBQUEsSUFDQSxvQkFBQXpHLFFBQUFBLE9BQUEwRyxhQUNBdDVCLE9BQUFtNUIsZUFBQTk1QixFQUFBdXpCLE9BQUEwRyxZQUFBLENBQXVENXFCLE1BQUEsV0FFdkQxTyxPQUFBbTVCLGVBQUE5NUIsRUFBQSxhQUFBLENBQWdEcVAsT0FBQSxLQ0xoRHlPLEVBQUFvYyxJQUFBLElBQ0FuNkIsRUFBQW82QixNQUFBLEdBQ0FwNkIsRUFBQXE2QixXQUFBcjZCLEVBQUFxNkIsU0FBQSxJQUNBcjZCLEcsbUNDNEIyQixTQUFyQnM2QixJQUNMQyxFQUFtQkMsU0FBU0MsY0FBYyxpQkFDMUNDLEVBQWtCRixTQUFTQyxjQUFjLGlCQUN6Q0UsRUFBbUJILFNBQVNDLGNBQWMsa0JBQzFDRyxFQUFxQkosU0FBU0MsY0FBYyxvQkFDNUNJLEVBQXFCTCxTQUFTQyxjQUFjLHFCQUU1Q0ssRUFBbUJOLFNBQVNDLGNBQWMseUJBRXpDTSxFQUFZRCxFQUFpQkwsY0FBYyxTQUMzQ08sRUFBYUYsRUFBaUJMLGNBQWMsVUFDNUNRLEVBQVlILEVBQWlCTCxjQUFjLGdCQUlwQixTQUFuQlMsSUFDREosSUFDSEcsRUFBVUUsaUJBQWlCLFFBQVNDLEdBQ3BDTCxFQUFVSSxpQkFBaUIsVUFBV0UsR0FDdENMLEVBQVdHLGlCQUFpQixVQUFXRSxHQUN2Q04sRUFBVUksaUJBQWlCLFdBQVlHLEdBQ3ZDTixFQUFXRyxpQkFBaUIsV0FBWUksSUFLbEIsU0FBbEJDLElBQ0RqQixJQUNIQSxFQUFpQmtCLGFBQWEsV0FBWUMsRUFBWWw1QixPQUFPLGVBQzdEKzNCLEVBQWlCb0IsVUFBWUQsRUFBWWw1QixPQUFPLGVBSTFCLFNBQWxCbzVCLElBQ0wsSUFBTTd5QixFQUFNOHlCLEdBQUFBLEdBQ05DLEVBQVdELElBQUFBLFNBQWdCSCxFQUFjM3lCLEdBRTNDMnhCLElBQWlCQSxFQUFnQmlCLFVBQVlJLEVBQVdELEVBQVNoVixTQUVqRTZULElBQWtCQSxFQUFpQmdCLFVBQVlJLEVBQVdELEVBQVN2Z0IsVUFFbkVxZixJQUFvQkEsRUFBbUJlLFVBQVlJLEVBQVdELEVBQVNwZ0IsWUFFdkVtZixJQUFvQkEsRUFBbUJjLFVBQVlJLEVBQVdELEVBQVMvZixZLElBeEV4RXdlLEVBQ0FHLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBRUFDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEUsZ0RBT0VTLEdBTkZaLElBQ2VBLEVBQWlCTCxjQUFjLFNBQzlCSyxFQUFpQkwsY0FBYyxVQUNoQ0ssRUFBaUJMLGNBQWMsZ0JBRzlCb0IsR0FBQUEsR0FBU3pqQixJQUFJLEdBQUksUUFBUW9VLFFBQVEsUUFDL0N3UCxFQUNMLHdKQXlES0QsRUFBYSxTQUFDMVAsR0FDbkIsTUFBQSxHQUFBMVQsT0FBVTBULEVBQU8sR0FBSyxFQUFJLElBQTFCMVQsT0FBK0IwVCxJQUkxQitPLEVBQWtCLFNBQUMxN0IsR0FDeEJBLEVBQUV1OEIsaUJBQ0ZYLElBQ0FDLEtBR0tELEVBQWUsV0FDcEJQLEVBQVVtQixVQUFVQyxPQUFPLFNBQVVwQixFQUFVenJCLFFBRzFDaXNCLEVBQWdCLFdBQ3JCUCxFQUFXa0IsVUFBVUMsT0FBTyxTQUFVbkIsRUFBVzFyQixRQUFVOHNCLE1BQU05c0IsTUFBTTdFLE1BQU11eEIsS0FHeEVYLEVBQWMsU0FBQzM3QixHQUNwQkEsRUFBRTI4QixPQUFPSCxVQUFVSSxPQUFPLFVBSTNCOUIsU0FBU1csaUJBQWlCLG1CQS9FYixXQUNaYixJQUNBWSxJQUVBTSxJQUNBSSxJQUNBVyxZQUFZWCxFQUFpQixRIiwiZmlsZSI6ImJ1bmRsZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB3ZWJwYWNrRW1wdHlDb250ZXh0KHJlcSkge1xuXHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0dGhyb3cgZTtcbn1cbndlYnBhY2tFbXB0eUNvbnRleHQua2V5cyA9ICgpID0+IChbXSk7XG53ZWJwYWNrRW1wdHlDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrRW1wdHlDb250ZXh0O1xud2VicGFja0VtcHR5Q29udGV4dC5pZCA9IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZSBzeW5jIHJlY3Vyc2l2ZSBcXFxcYlxcXFxCXCI7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tFbXB0eUNvbnRleHQ7IiwiLy8hIG1vbWVudC5qc1xuLy8hIHZlcnNpb24gOiAyLjI5LjRcbi8vISBhdXRob3JzIDogVGltIFdvb2QsIElza3JlbiBDaGVybmV2LCBNb21lbnQuanMgY29udHJpYnV0b3JzXG4vLyEgbGljZW5zZSA6IE1JVFxuLy8hIG1vbWVudGpzLmNvbVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICBnbG9iYWwubW9tZW50ID0gZmFjdG9yeSgpXG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBob29rQ2FsbGJhY2s7XG5cbiAgICBmdW5jdGlvbiBob29rcygpIHtcbiAgICAgICAgcmV0dXJuIGhvb2tDYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgaXMgZG9uZSB0byByZWdpc3RlciB0aGUgbWV0aG9kIGNhbGxlZCB3aXRoIG1vbWVudCgpXG4gICAgLy8gd2l0aG91dCBjcmVhdGluZyBjaXJjdWxhciBkZXBlbmRlbmNpZXMuXG4gICAgZnVuY3Rpb24gc2V0SG9va0NhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgICAgIGhvb2tDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQXJyYXkoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlucHV0IGluc3RhbmNlb2YgQXJyYXkgfHxcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEFycmF5XSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc09iamVjdChpbnB1dCkge1xuICAgICAgICAvLyBJRTggd2lsbCB0cmVhdCB1bmRlZmluZWQgYW5kIG51bGwgYXMgb2JqZWN0IGlmIGl0IHdhc24ndCBmb3JcbiAgICAgICAgLy8gaW5wdXQgIT0gbnVsbFxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgaW5wdXQgIT0gbnVsbCAmJlxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNPd25Qcm9wKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLCBiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBrO1xuICAgICAgICAgICAgZm9yIChrIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKG9iaiwgaykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09PSB2b2lkIDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE51bWJlcl0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXRlKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBpbnB1dCBpbnN0YW5jZW9mIERhdGUgfHxcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IERhdGVdJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hcChhcnIsIGZuKSB7XG4gICAgICAgIHZhciByZXMgPSBbXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBhcnJMZW4gPSBhcnIubGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJyTGVuOyArK2kpIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKGZuKGFycltpXSwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXh0ZW5kKGEsIGIpIHtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBiKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChiLCBpKSkge1xuICAgICAgICAgICAgICAgIGFbaV0gPSBiW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgJ3RvU3RyaW5nJykpIHtcbiAgICAgICAgICAgIGEudG9TdHJpbmcgPSBiLnRvU3RyaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgJ3ZhbHVlT2YnKSkge1xuICAgICAgICAgICAgYS52YWx1ZU9mID0gYi52YWx1ZU9mO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCB0cnVlKS51dGMoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWZhdWx0UGFyc2luZ0ZsYWdzKCkge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIGRlZXAgY2xvbmUgdGhpcyBvYmplY3QuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbXB0eTogZmFsc2UsXG4gICAgICAgICAgICB1bnVzZWRUb2tlbnM6IFtdLFxuICAgICAgICAgICAgdW51c2VkSW5wdXQ6IFtdLFxuICAgICAgICAgICAgb3ZlcmZsb3c6IC0yLFxuICAgICAgICAgICAgY2hhcnNMZWZ0T3ZlcjogMCxcbiAgICAgICAgICAgIG51bGxJbnB1dDogZmFsc2UsXG4gICAgICAgICAgICBpbnZhbGlkRXJhOiBudWxsLFxuICAgICAgICAgICAgaW52YWxpZE1vbnRoOiBudWxsLFxuICAgICAgICAgICAgaW52YWxpZEZvcm1hdDogZmFsc2UsXG4gICAgICAgICAgICB1c2VySW52YWxpZGF0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNvOiBmYWxzZSxcbiAgICAgICAgICAgIHBhcnNlZERhdGVQYXJ0czogW10sXG4gICAgICAgICAgICBlcmE6IG51bGwsXG4gICAgICAgICAgICBtZXJpZGllbTogbnVsbCxcbiAgICAgICAgICAgIHJmYzI4MjI6IGZhbHNlLFxuICAgICAgICAgICAgd2Vla2RheU1pc21hdGNoOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYXJzaW5nRmxhZ3MobSkge1xuICAgICAgICBpZiAobS5fcGYgPT0gbnVsbCkge1xuICAgICAgICAgICAgbS5fcGYgPSBkZWZhdWx0UGFyc2luZ0ZsYWdzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX3BmO1xuICAgIH1cblxuICAgIHZhciBzb21lO1xuICAgIGlmIChBcnJheS5wcm90b3R5cGUuc29tZSkge1xuICAgICAgICBzb21lID0gQXJyYXkucHJvdG90eXBlLnNvbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc29tZSA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICAgICAgICAgIHZhciB0ID0gT2JqZWN0KHRoaXMpLFxuICAgICAgICAgICAgICAgIGxlbiA9IHQubGVuZ3RoID4+PiAwLFxuICAgICAgICAgICAgICAgIGk7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpIGluIHQgJiYgZnVuLmNhbGwodGhpcywgdFtpXSwgaSwgdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZChtKSB7XG4gICAgICAgIGlmIChtLl9pc1ZhbGlkID09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBmbGFncyA9IGdldFBhcnNpbmdGbGFncyhtKSxcbiAgICAgICAgICAgICAgICBwYXJzZWRQYXJ0cyA9IHNvbWUuY2FsbChmbGFncy5wYXJzZWREYXRlUGFydHMsIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpICE9IG51bGw7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgaXNOb3dWYWxpZCA9XG4gICAgICAgICAgICAgICAgICAgICFpc05hTihtLl9kLmdldFRpbWUoKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3Mub3ZlcmZsb3cgPCAwICYmXG4gICAgICAgICAgICAgICAgICAgICFmbGFncy5lbXB0eSAmJlxuICAgICAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZEVyYSAmJlxuICAgICAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZE1vbnRoICYmXG4gICAgICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkV2Vla2RheSAmJlxuICAgICAgICAgICAgICAgICAgICAhZmxhZ3Mud2Vla2RheU1pc21hdGNoICYmXG4gICAgICAgICAgICAgICAgICAgICFmbGFncy5udWxsSW5wdXQgJiZcbiAgICAgICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRGb3JtYXQgJiZcbiAgICAgICAgICAgICAgICAgICAgIWZsYWdzLnVzZXJJbnZhbGlkYXRlZCAmJlxuICAgICAgICAgICAgICAgICAgICAoIWZsYWdzLm1lcmlkaWVtIHx8IChmbGFncy5tZXJpZGllbSAmJiBwYXJzZWRQYXJ0cykpO1xuXG4gICAgICAgICAgICBpZiAobS5fc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgaXNOb3dWYWxpZCA9XG4gICAgICAgICAgICAgICAgICAgIGlzTm93VmFsaWQgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MuY2hhcnNMZWZ0T3ZlciA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy51bnVzZWRUb2tlbnMubGVuZ3RoID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLmJpZ0hvdXIgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKE9iamVjdC5pc0Zyb3plbiA9PSBudWxsIHx8ICFPYmplY3QuaXNGcm96ZW4obSkpIHtcbiAgICAgICAgICAgICAgICBtLl9pc1ZhbGlkID0gaXNOb3dWYWxpZDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTm93VmFsaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX2lzVmFsaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52YWxpZChmbGFncykge1xuICAgICAgICB2YXIgbSA9IGNyZWF0ZVVUQyhOYU4pO1xuICAgICAgICBpZiAoZmxhZ3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgZXh0ZW5kKGdldFBhcnNpbmdGbGFncyhtKSwgZmxhZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLnVzZXJJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9XG5cbiAgICAvLyBQbHVnaW5zIHRoYXQgYWRkIHByb3BlcnRpZXMgc2hvdWxkIGFsc28gYWRkIHRoZSBrZXkgaGVyZSAobnVsbCB2YWx1ZSksXG4gICAgLy8gc28gd2UgY2FuIHByb3Blcmx5IGNsb25lIG91cnNlbHZlcy5cbiAgICB2YXIgbW9tZW50UHJvcGVydGllcyA9IChob29rcy5tb21lbnRQcm9wZXJ0aWVzID0gW10pLFxuICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBjb3B5Q29uZmlnKHRvLCBmcm9tKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgcHJvcCxcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIG1vbWVudFByb3BlcnRpZXNMZW4gPSBtb21lbnRQcm9wZXJ0aWVzLmxlbmd0aDtcblxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzQU1vbWVudE9iamVjdCkpIHtcbiAgICAgICAgICAgIHRvLl9pc0FNb21lbnRPYmplY3QgPSBmcm9tLl9pc0FNb21lbnRPYmplY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pKSkge1xuICAgICAgICAgICAgdG8uX2kgPSBmcm9tLl9pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fZikpIHtcbiAgICAgICAgICAgIHRvLl9mID0gZnJvbS5fZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2wpKSB7XG4gICAgICAgICAgICB0by5fbCA9IGZyb20uX2w7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9zdHJpY3QpKSB7XG4gICAgICAgICAgICB0by5fc3RyaWN0ID0gZnJvbS5fc3RyaWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fdHptKSkge1xuICAgICAgICAgICAgdG8uX3R6bSA9IGZyb20uX3R6bTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzVVRDKSkge1xuICAgICAgICAgICAgdG8uX2lzVVRDID0gZnJvbS5faXNVVEM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9vZmZzZXQpKSB7XG4gICAgICAgICAgICB0by5fb2Zmc2V0ID0gZnJvbS5fb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fcGYpKSB7XG4gICAgICAgICAgICB0by5fcGYgPSBnZXRQYXJzaW5nRmxhZ3MoZnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sb2NhbGUpKSB7XG4gICAgICAgICAgICB0by5fbG9jYWxlID0gZnJvbS5fbG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vbWVudFByb3BlcnRpZXNMZW4gPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbW9tZW50UHJvcGVydGllc0xlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcHJvcCA9IG1vbWVudFByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICAgICAgdmFsID0gZnJvbVtwcm9wXTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9bcHJvcF0gPSB2YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cblxuICAgIC8vIE1vbWVudCBwcm90b3R5cGUgb2JqZWN0XG4gICAgZnVuY3Rpb24gTW9tZW50KGNvbmZpZykge1xuICAgICAgICBjb3B5Q29uZmlnKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShjb25maWcuX2QgIT0gbnVsbCA/IGNvbmZpZy5fZC5nZXRUaW1lKCkgOiBOYU4pO1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmV2ZW50IGluZmluaXRlIGxvb3AgaW4gY2FzZSB1cGRhdGVPZmZzZXQgY3JlYXRlcyBuZXcgbW9tZW50XG4gICAgICAgIC8vIG9iamVjdHMuXG4gICAgICAgIGlmICh1cGRhdGVJblByb2dyZXNzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc01vbWVudChvYmopIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIG9iaiBpbnN0YW5jZW9mIE1vbWVudCB8fCAob2JqICE9IG51bGwgJiYgb2JqLl9pc0FNb21lbnRPYmplY3QgIT0gbnVsbClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YXJuKG1zZykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPT09IGZhbHNlICYmXG4gICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIGNvbnNvbGUud2FyblxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRpb24gd2FybmluZzogJyArIG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZXByZWNhdGUobXNnLCBmbikge1xuICAgICAgICB2YXIgZmlyc3RUaW1lID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihudWxsLCBtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW10sXG4gICAgICAgICAgICAgICAgICAgIGFyZyxcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAgICBhcmdMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcmdMZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBhcmcgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgKz0gJ1xcblsnICsgaSArICddICc7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBhcmd1bWVudHNbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcChhcmd1bWVudHNbMF0sIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9IGtleSArICc6ICcgKyBhcmd1bWVudHNbMF1ba2V5XSArICcsICc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDAsIC0yKTsgLy8gUmVtb3ZlIHRyYWlsaW5nIGNvbW1hIGFuZCBzcGFjZVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhcmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICAgICBtc2cgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1xcbkFyZ3VtZW50czogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKS5qb2luKCcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgRXJyb3IoKS5zdGFja1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgZmlyc3RUaW1lID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfSwgZm4pO1xuICAgIH1cblxuICAgIHZhciBkZXByZWNhdGlvbnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCBtc2cpIHtcbiAgICAgICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobmFtZSwgbXNnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlcHJlY2F0aW9uc1tuYW1lXSkge1xuICAgICAgICAgICAgd2Fybihtc2cpO1xuICAgICAgICAgICAgZGVwcmVjYXRpb25zW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9IGZhbHNlO1xuICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAodHlwZW9mIEZ1bmN0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBpbnB1dCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB8fFxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldChjb25maWcpIHtcbiAgICAgICAgdmFyIHByb3AsIGk7XG4gICAgICAgIGZvciAoaSBpbiBjb25maWcpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGNvbmZpZywgaSkpIHtcbiAgICAgICAgICAgICAgICBwcm9wID0gY29uZmlnW2ldO1xuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbaV0gPSBwcm9wO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbJ18nICsgaV0gPSBwcm9wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICAgICAgIC8vIExlbmllbnQgb3JkaW5hbCBwYXJzaW5nIGFjY2VwdHMganVzdCBhIG51bWJlciBpbiBhZGRpdGlvbiB0b1xuICAgICAgICAvLyBudW1iZXIgKyAocG9zc2libHkpIHN0dWZmIGNvbWluZyBmcm9tIF9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLlxuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgICAgIHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICh0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLnNvdXJjZSB8fCB0aGlzLl9vcmRpbmFsUGFyc2Uuc291cmNlKSArXG4gICAgICAgICAgICAgICAgJ3wnICtcbiAgICAgICAgICAgICAgICAvXFxkezEsMn0vLnNvdXJjZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNoaWxkQ29uZmlnKSB7XG4gICAgICAgIHZhciByZXMgPSBleHRlbmQoe30sIHBhcmVudENvbmZpZyksXG4gICAgICAgICAgICBwcm9wO1xuICAgICAgICBmb3IgKHByb3AgaW4gY2hpbGRDb25maWcpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pICYmIGlzT2JqZWN0KGNoaWxkQ29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgcGFyZW50Q29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgY2hpbGRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRDb25maWdbcHJvcF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSBjaGlsZENvbmZpZ1twcm9wXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVzW3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHByb3AgaW4gcGFyZW50Q29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgaGFzT3duUHJvcChwYXJlbnRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgIWhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGNoYW5nZXMgdG8gcHJvcGVydGllcyBkb24ndCBtb2RpZnkgcGFyZW50IGNvbmZpZ1xuICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IGV4dGVuZCh7fSwgcmVzW3Byb3BdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIExvY2FsZShjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldChjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXM7XG5cbiAgICBpZiAoT2JqZWN0LmtleXMpIHtcbiAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGtleXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICByZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcChvYmosIGkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRDYWxlbmRhciA9IHtcbiAgICAgICAgc2FtZURheTogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgbGFzdERheTogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2FsZW5kYXIoa2V5LCBtb20sIG5vdykge1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fY2FsZW5kYXJba2V5XSB8fCB0aGlzLl9jYWxlbmRhclsnc2FtZUVsc2UnXTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob3V0cHV0KSA/IG91dHB1dC5jYWxsKG1vbSwgbm93KSA6IG91dHB1dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB6ZXJvRmlsbChudW1iZXIsIHRhcmdldExlbmd0aCwgZm9yY2VTaWduKSB7XG4gICAgICAgIHZhciBhYnNOdW1iZXIgPSAnJyArIE1hdGguYWJzKG51bWJlciksXG4gICAgICAgICAgICB6ZXJvc1RvRmlsbCA9IHRhcmdldExlbmd0aCAtIGFic051bWJlci5sZW5ndGgsXG4gICAgICAgICAgICBzaWduID0gbnVtYmVyID49IDA7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoc2lnbiA/IChmb3JjZVNpZ24gPyAnKycgOiAnJykgOiAnLScpICtcbiAgICAgICAgICAgIE1hdGgucG93KDEwLCBNYXRoLm1heCgwLCB6ZXJvc1RvRmlsbCkpLnRvU3RyaW5nKCkuc3Vic3RyKDEpICtcbiAgICAgICAgICAgIGFic051bWJlclxuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXR0aW5nVG9rZW5zID1cbiAgICAgICAgICAgIC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhbSGhdbW0oc3MpP3xNb3xNTT9NP00/fERvfERERG98REQ/RD9EP3xkZGQ/ZD98ZG8/fHdbb3x3XT98V1tvfFddP3xRbz98TnsxLDV9fFlZWVlZWXxZWVlZWXxZWVlZfFlZfHl7Miw0fXx5bz98Z2coZ2dnPyk/fEdHKEdHRz8pP3xlfEV8YXxBfGhoP3xISD98a2s/fG1tP3xzcz98U3sxLDl9fHh8WHx6ej98Wlo/fC4pL2csXG4gICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhMVFN8TFR8TEw/TD9MP3xsezEsNH0pL2csXG4gICAgICAgIGZvcm1hdEZ1bmN0aW9ucyA9IHt9LFxuICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9ucyA9IHt9O1xuXG4gICAgLy8gdG9rZW46ICAgICdNJ1xuICAgIC8vIHBhZGRlZDogICBbJ01NJywgMl1cbiAgICAvLyBvcmRpbmFsOiAgJ01vJ1xuICAgIC8vIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7IHRoaXMubW9udGgoKSArIDEgfVxuICAgIGZ1bmN0aW9uIGFkZEZvcm1hdFRva2VuKHRva2VuLCBwYWRkZWQsIG9yZGluYWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBmdW5jID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBmdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2NhbGxiYWNrXSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZGRlZCkge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbcGFkZGVkWzBdXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gemVyb0ZpbGwoZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBwYWRkZWRbMV0sIHBhZGRlZFsyXSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcmRpbmFsKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1tvcmRpbmFsXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkub3JkaW5hbChcbiAgICAgICAgICAgICAgICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgICAgICB0b2tlblxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhpbnB1dCkge1xuICAgICAgICBpZiAoaW5wdXQubWF0Y2goL1xcW1tcXHNcXFNdLykpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9eXFxbfFxcXSQvZywgJycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXFxcL2csICcnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgICAgIHZhciBhcnJheSA9IGZvcm1hdC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBsZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV0pIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGFycmF5W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobW9tKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gJycsXG4gICAgICAgICAgICAgICAgaTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG91dHB1dCArPSBpc0Z1bmN0aW9uKGFycmF5W2ldKVxuICAgICAgICAgICAgICAgICAgICA/IGFycmF5W2ldLmNhbGwobW9tLCBmb3JtYXQpXG4gICAgICAgICAgICAgICAgICAgIDogYXJyYXlbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIGZvcm1hdCBkYXRlIHVzaW5nIG5hdGl2ZSBkYXRlIG9iamVjdFxuICAgIGZ1bmN0aW9uIGZvcm1hdE1vbWVudChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG0ubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBleHBhbmRGb3JtYXQoZm9ybWF0LCBtLmxvY2FsZURhdGEoKSk7XG4gICAgICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdID1cbiAgICAgICAgICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdIHx8IG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpO1xuXG4gICAgICAgIHJldHVybiBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XShtKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHBhbmRGb3JtYXQoZm9ybWF0LCBsb2NhbGUpIHtcbiAgICAgICAgdmFyIGkgPSA1O1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyhpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5sb25nRGF0ZUZvcm1hdChpbnB1dCkgfHwgaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPj0gMCAmJiBsb2NhbEZvcm1hdHRpbmdUb2tlbnMudGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShcbiAgICAgICAgICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMsXG4gICAgICAgICAgICAgICAgcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICBpIC09IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQgPSB7XG4gICAgICAgIExUUzogJ2g6bW06c3MgQScsXG4gICAgICAgIExUOiAnaDptbSBBJyxcbiAgICAgICAgTDogJ01NL0REL1lZWVknLFxuICAgICAgICBMTDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgIExMTDogJ01NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgICAgICBMTExMOiAnZGRkZCwgTU1NTSBELCBZWVlZIGg6bW0gQScsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvbmdEYXRlRm9ybWF0KGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSxcbiAgICAgICAgICAgIGZvcm1hdFVwcGVyID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5LnRvVXBwZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChmb3JtYXQgfHwgIWZvcm1hdFVwcGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSA9IGZvcm1hdFVwcGVyXG4gICAgICAgICAgICAubWF0Y2goZm9ybWF0dGluZ1Rva2VucylcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHRvaykge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdG9rID09PSAnTU1NTScgfHxcbiAgICAgICAgICAgICAgICAgICAgdG9rID09PSAnTU0nIHx8XG4gICAgICAgICAgICAgICAgICAgIHRvayA9PT0gJ0REJyB8fFxuICAgICAgICAgICAgICAgICAgICB0b2sgPT09ICdkZGRkJ1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9rLnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdG9rO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5qb2luKCcnKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdEludmFsaWREYXRlID0gJ0ludmFsaWQgZGF0ZSc7XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludmFsaWREYXRlO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0T3JkaW5hbCA9ICclZCcsXG4gICAgICAgIGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlID0gL1xcZHsxLDJ9LztcblxuICAgIGZ1bmN0aW9uIG9yZGluYWwobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcmRpbmFsLnJlcGxhY2UoJyVkJywgbnVtYmVyKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFJlbGF0aXZlVGltZSA9IHtcbiAgICAgICAgZnV0dXJlOiAnaW4gJXMnLFxuICAgICAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICAgICAgczogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICBzczogJyVkIHNlY29uZHMnLFxuICAgICAgICBtOiAnYSBtaW51dGUnLFxuICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICBoOiAnYW4gaG91cicsXG4gICAgICAgIGhoOiAnJWQgaG91cnMnLFxuICAgICAgICBkOiAnYSBkYXknLFxuICAgICAgICBkZDogJyVkIGRheXMnLFxuICAgICAgICB3OiAnYSB3ZWVrJyxcbiAgICAgICAgd3c6ICclZCB3ZWVrcycsXG4gICAgICAgIE06ICdhIG1vbnRoJyxcbiAgICAgICAgTU06ICclZCBtb250aHMnLFxuICAgICAgICB5OiAnYSB5ZWFyJyxcbiAgICAgICAgeXk6ICclZCB5ZWFycycsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX3JlbGF0aXZlVGltZVtzdHJpbmddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvdXRwdXQpXG4gICAgICAgICAgICA/IG91dHB1dChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpXG4gICAgICAgICAgICA6IG91dHB1dC5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhc3RGdXR1cmUoZGlmZiwgb3V0cHV0KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbZGlmZiA+IDAgPyAnZnV0dXJlJyA6ICdwYXN0J107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKGZvcm1hdCkgPyBmb3JtYXQob3V0cHV0KSA6IGZvcm1hdC5yZXBsYWNlKC8lcy9pLCBvdXRwdXQpO1xuICAgIH1cblxuICAgIHZhciBhbGlhc2VzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRVbml0QWxpYXModW5pdCwgc2hvcnRoYW5kKSB7XG4gICAgICAgIHZhciBsb3dlckNhc2UgPSB1bml0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGFsaWFzZXNbbG93ZXJDYXNlXSA9IGFsaWFzZXNbbG93ZXJDYXNlICsgJ3MnXSA9IGFsaWFzZXNbc2hvcnRoYW5kXSA9IHVuaXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplVW5pdHModW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB1bml0cyA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgID8gYWxpYXNlc1t1bml0c10gfHwgYWxpYXNlc1t1bml0cy50b0xvd2VyQ2FzZSgpXVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplT2JqZWN0VW5pdHMoaW5wdXRPYmplY3QpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IHt9LFxuICAgICAgICAgICAgbm9ybWFsaXplZFByb3AsXG4gICAgICAgICAgICBwcm9wO1xuXG4gICAgICAgIGZvciAocHJvcCBpbiBpbnB1dE9iamVjdCkge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoaW5wdXRPYmplY3QsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFByb3AgPSBub3JtYWxpemVVbml0cyhwcm9wKTtcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZFByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZElucHV0W25vcm1hbGl6ZWRQcm9wXSA9IGlucHV0T2JqZWN0W3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub3JtYWxpemVkSW5wdXQ7XG4gICAgfVxuXG4gICAgdmFyIHByaW9yaXRpZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFVuaXRQcmlvcml0eSh1bml0LCBwcmlvcml0eSkge1xuICAgICAgICBwcmlvcml0aWVzW3VuaXRdID0gcHJpb3JpdHk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0c09iaikge1xuICAgICAgICB2YXIgdW5pdHMgPSBbXSxcbiAgICAgICAgICAgIHU7XG4gICAgICAgIGZvciAodSBpbiB1bml0c09iaikge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AodW5pdHNPYmosIHUpKSB7XG4gICAgICAgICAgICAgICAgdW5pdHMucHVzaCh7IHVuaXQ6IHUsIHByaW9yaXR5OiBwcmlvcml0aWVzW3VdIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHVuaXRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB1bml0cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcbiAgICAgICAgcmV0dXJuICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKSB8fCB5ZWFyICUgNDAwID09PSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic0Zsb29yKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgLy8gLTAgLT4gMFxuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpIHx8IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JbnQoYXJndW1lbnRGb3JDb2VyY2lvbikge1xuICAgICAgICB2YXIgY29lcmNlZE51bWJlciA9ICthcmd1bWVudEZvckNvZXJjaW9uLFxuICAgICAgICAgICAgdmFsdWUgPSAwO1xuXG4gICAgICAgIGlmIChjb2VyY2VkTnVtYmVyICE9PSAwICYmIGlzRmluaXRlKGNvZXJjZWROdW1iZXIpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGFic0Zsb29yKGNvZXJjZWROdW1iZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VHZXRTZXQodW5pdCwga2VlcFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzZXQkMSh0aGlzLCB1bml0LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIGtlZXBUaW1lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXQobW9tLCB1bml0KSB7XG4gICAgICAgIHJldHVybiBtb20uaXNWYWxpZCgpXG4gICAgICAgICAgICA/IG1vbS5fZFsnZ2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSgpXG4gICAgICAgICAgICA6IE5hTjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXQkMShtb20sIHVuaXQsIHZhbHVlKSB7XG4gICAgICAgIGlmIChtb20uaXNWYWxpZCgpICYmICFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB1bml0ID09PSAnRnVsbFllYXInICYmXG4gICAgICAgICAgICAgICAgaXNMZWFwWWVhcihtb20ueWVhcigpKSAmJlxuICAgICAgICAgICAgICAgIG1vbS5tb250aCgpID09PSAxICYmXG4gICAgICAgICAgICAgICAgbW9tLmRhdGUoKSA9PT0gMjlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdG9JbnQodmFsdWUpO1xuICAgICAgICAgICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XShcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIG1vbS5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICBkYXlzSW5Nb250aCh2YWx1ZSwgbW9tLm1vbnRoKCkpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIHN0cmluZ0dldCh1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdHJpbmdTZXQodW5pdHMsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdW5pdHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIHZhciBwcmlvcml0aXplZCA9IGdldFByaW9yaXRpemVkVW5pdHModW5pdHMpLFxuICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgcHJpb3JpdGl6ZWRMZW4gPSBwcmlvcml0aXplZC5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcHJpb3JpdGl6ZWRMZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXNbcHJpb3JpdGl6ZWRbaV0udW5pdF0odW5pdHNbcHJpb3JpdGl6ZWRbaV0udW5pdF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10odmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBtYXRjaDEgPSAvXFxkLywgLy8gICAgICAgMCAtIDlcbiAgICAgICAgbWF0Y2gyID0gL1xcZFxcZC8sIC8vICAgICAgMDAgLSA5OVxuICAgICAgICBtYXRjaDMgPSAvXFxkezN9LywgLy8gICAgIDAwMCAtIDk5OVxuICAgICAgICBtYXRjaDQgPSAvXFxkezR9LywgLy8gICAgMDAwMCAtIDk5OTlcbiAgICAgICAgbWF0Y2g2ID0gL1srLV0/XFxkezZ9LywgLy8gLTk5OTk5OSAtIDk5OTk5OVxuICAgICAgICBtYXRjaDF0bzIgPSAvXFxkXFxkPy8sIC8vICAgICAgIDAgLSA5OVxuICAgICAgICBtYXRjaDN0bzQgPSAvXFxkXFxkXFxkXFxkPy8sIC8vICAgICA5OTkgLSA5OTk5XG4gICAgICAgIG1hdGNoNXRvNiA9IC9cXGRcXGRcXGRcXGRcXGRcXGQ/LywgLy8gICA5OTk5OSAtIDk5OTk5OVxuICAgICAgICBtYXRjaDF0bzMgPSAvXFxkezEsM30vLCAvLyAgICAgICAwIC0gOTk5XG4gICAgICAgIG1hdGNoMXRvNCA9IC9cXGR7MSw0fS8sIC8vICAgICAgIDAgLSA5OTk5XG4gICAgICAgIG1hdGNoMXRvNiA9IC9bKy1dP1xcZHsxLDZ9LywgLy8gLTk5OTk5OSAtIDk5OTk5OVxuICAgICAgICBtYXRjaFVuc2lnbmVkID0gL1xcZCsvLCAvLyAgICAgICAwIC0gaW5mXG4gICAgICAgIG1hdGNoU2lnbmVkID0gL1srLV0/XFxkKy8sIC8vICAgIC1pbmYgLSBpbmZcbiAgICAgICAgbWF0Y2hPZmZzZXQgPSAvWnxbKy1dXFxkXFxkOj9cXGRcXGQvZ2ksIC8vICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxuICAgICAgICBtYXRjaFNob3J0T2Zmc2V0ID0gL1p8WystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vZ2ksIC8vICswMCAtMDAgKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG4gICAgICAgIG1hdGNoVGltZXN0YW1wID0gL1srLV0/XFxkKyhcXC5cXGR7MSwzfSk/LywgLy8gMTIzNDU2Nzg5IDEyMzQ1Njc4OS4xMjNcbiAgICAgICAgLy8gYW55IHdvcmQgKG9yIHR3bykgY2hhcmFjdGVycyBvciBudW1iZXJzIGluY2x1ZGluZyB0d28vdGhyZWUgd29yZCBtb250aCBpbiBhcmFiaWMuXG4gICAgICAgIC8vIGluY2x1ZGVzIHNjb3R0aXNoIGdhZWxpYyB0d28gd29yZCBhbmQgaHlwaGVuYXRlZCBtb250aHNcbiAgICAgICAgbWF0Y2hXb3JkID1cbiAgICAgICAgICAgIC9bMC05XXswLDI1Nn1bJ2EtelxcdTAwQTAtXFx1MDVGRlxcdTA3MDAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkYwN1xcdUZGMTAtXFx1RkZFRl17MSwyNTZ9fFtcXHUwNjAwLVxcdTA2RkZcXC9dezEsMjU2fShcXHMqP1tcXHUwNjAwLVxcdTA2RkZdezEsMjU2fSl7MSwyfS9pLFxuICAgICAgICByZWdleGVzO1xuXG4gICAgcmVnZXhlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkUmVnZXhUb2tlbih0b2tlbiwgcmVnZXgsIHN0cmljdFJlZ2V4KSB7XG4gICAgICAgIHJlZ2V4ZXNbdG9rZW5dID0gaXNGdW5jdGlvbihyZWdleClcbiAgICAgICAgICAgID8gcmVnZXhcbiAgICAgICAgICAgIDogZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGVEYXRhKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaXNTdHJpY3QgJiYgc3RyaWN0UmVnZXggPyBzdHJpY3RSZWdleCA6IHJlZ2V4O1xuICAgICAgICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcChyZWdleGVzLCB0b2tlbikpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHVuZXNjYXBlRm9ybWF0KHRva2VuKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVnZXhlc1t0b2tlbl0oY29uZmlnLl9zdHJpY3QsIGNvbmZpZy5fbG9jYWxlKTtcbiAgICB9XG5cbiAgICAvLyBDb2RlIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNTYxNDkzL2lzLXRoZXJlLWEtcmVnZXhwLWVzY2FwZS1mdW5jdGlvbi1pbi1qYXZhc2NyaXB0XG4gICAgZnVuY3Rpb24gdW5lc2NhcGVGb3JtYXQocykge1xuICAgICAgICByZXR1cm4gcmVnZXhFc2NhcGUoXG4gICAgICAgICAgICBzXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoJ1xcXFwnLCAnJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgL1xcXFwoXFxbKXxcXFxcKFxcXSl8XFxbKFteXFxdXFxbXSopXFxdfFxcXFwoLikvZyxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKG1hdGNoZWQsIHAxLCBwMiwgcDMsIHA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcDEgfHwgcDIgfHwgcDMgfHwgcDQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVnZXhFc2NhcGUocykge1xuICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC9bLVxcL1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcbiAgICB9XG5cbiAgICB2YXIgdG9rZW5zID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRQYXJzZVRva2VuKHRva2VuLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGZ1bmMgPSBjYWxsYmFjayxcbiAgICAgICAgICAgIHRva2VuTGVuO1xuICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdG9rZW4gPSBbdG9rZW5dO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc051bWJlcihjYWxsYmFjaykpIHtcbiAgICAgICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbY2FsbGJhY2tdID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0b2tlbkxlbiA9IHRva2VuLmxlbmd0aDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2VuTGVuOyBpKyspIHtcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbltpXV0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkV2Vla1BhcnNlVG9rZW4odG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgICAgIGNvbmZpZy5fdyA9IGNvbmZpZy5fdyB8fCB7fTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGlucHV0LCBjb25maWcuX3csIGNvbmZpZywgdG9rZW4pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgaW5wdXQsIGNvbmZpZykge1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCAmJiBoYXNPd25Qcm9wKHRva2VucywgdG9rZW4pKSB7XG4gICAgICAgICAgICB0b2tlbnNbdG9rZW5dKGlucHV0LCBjb25maWcuX2EsIGNvbmZpZywgdG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIFlFQVIgPSAwLFxuICAgICAgICBNT05USCA9IDEsXG4gICAgICAgIERBVEUgPSAyLFxuICAgICAgICBIT1VSID0gMyxcbiAgICAgICAgTUlOVVRFID0gNCxcbiAgICAgICAgU0VDT05EID0gNSxcbiAgICAgICAgTUlMTElTRUNPTkQgPSA2LFxuICAgICAgICBXRUVLID0gNyxcbiAgICAgICAgV0VFS0RBWSA9IDg7XG5cbiAgICBmdW5jdGlvbiBtb2QobiwgeCkge1xuICAgICAgICByZXR1cm4gKChuICUgeCkgKyB4KSAlIHg7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4T2Y7XG5cbiAgICBpZiAoQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcbiAgICAgICAgaW5kZXhPZiA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGluZGV4T2YgPSBmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgLy8gSSBrbm93XG4gICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNbaV0gPT09IG8pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheXNJbk1vbnRoKHllYXIsIG1vbnRoKSB7XG4gICAgICAgIGlmIChpc05hTih5ZWFyKSB8fCBpc05hTihtb250aCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1vZE1vbnRoID0gbW9kKG1vbnRoLCAxMik7XG4gICAgICAgIHllYXIgKz0gKG1vbnRoIC0gbW9kTW9udGgpIC8gMTI7XG4gICAgICAgIHJldHVybiBtb2RNb250aCA9PT0gMVxuICAgICAgICAgICAgPyBpc0xlYXBZZWFyKHllYXIpXG4gICAgICAgICAgICAgICAgPyAyOVxuICAgICAgICAgICAgICAgIDogMjhcbiAgICAgICAgICAgIDogMzEgLSAoKG1vZE1vbnRoICUgNykgJSAyKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignTScsIFsnTU0nLCAyXSwgJ01vJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb250aCgpICsgMTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHNTaG9ydCh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ01NTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHModGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnbW9udGgnLCAnTScpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnbW9udGgnLCA4KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ00nLCBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NTScsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUubW9udGhzU2hvcnRSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignTU1NTScsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUubW9udGhzUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ00nLCAnTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNT05USF0gPSB0b0ludChpbnB1dCkgLSAxO1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ01NTScsICdNTU1NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIG1vbnRoID0gY29uZmlnLl9sb2NhbGUubW9udGhzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgICAgIC8vIGlmIHdlIGRpZG4ndCBmaW5kIGEgbW9udGggbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkLlxuICAgICAgICBpZiAobW9udGggIT0gbnVsbCkge1xuICAgICAgICAgICAgYXJyYXlbTU9OVEhdID0gbW9udGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkTW9udGggPSBpbnB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNb250aHMgPVxuICAgICAgICAgICAgJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0ID1cbiAgICAgICAgICAgICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgTU9OVEhTX0lOX0ZPUk1BVCA9IC9EW29EXT8oXFxbW15cXFtcXF1dKlxcXXxcXHMpK01NTU0/LyxcbiAgICAgICAgZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXggPSBtYXRjaFdvcmQsXG4gICAgICAgIGRlZmF1bHRNb250aHNSZWdleCA9IG1hdGNoV29yZDtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRocyhtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpXG4gICAgICAgICAgICAgICAgPyB0aGlzLl9tb250aHNcbiAgICAgICAgICAgICAgICA6IHRoaXMuX21vbnRoc1snc3RhbmRhbG9uZSddO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocylcbiAgICAgICAgICAgID8gdGhpcy5fbW9udGhzW20ubW9udGgoKV1cbiAgICAgICAgICAgIDogdGhpcy5fbW9udGhzW1xuICAgICAgICAgICAgICAgICAgKHRoaXMuX21vbnRocy5pc0Zvcm1hdCB8fCBNT05USFNfSU5fRk9STUFUKS50ZXN0KGZvcm1hdClcbiAgICAgICAgICAgICAgICAgICAgICA/ICdmb3JtYXQnXG4gICAgICAgICAgICAgICAgICAgICAgOiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICAgICAgXVttLm1vbnRoKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1Nob3J0KG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KVxuICAgICAgICAgICAgICAgID8gdGhpcy5fbW9udGhzU2hvcnRcbiAgICAgICAgICAgICAgICA6IHRoaXMuX21vbnRoc1Nob3J0WydzdGFuZGFsb25lJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpXG4gICAgICAgICAgICA/IHRoaXMuX21vbnRoc1Nob3J0W20ubW9udGgoKV1cbiAgICAgICAgICAgIDogdGhpcy5fbW9udGhzU2hvcnRbXG4gICAgICAgICAgICAgICAgICBNT05USFNfSU5fRk9STUFULnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgICAgIF1bbS5tb250aCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZShtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgaWksXG4gICAgICAgICAgICBtb20sXG4gICAgICAgICAgICBsbGMgPSBtb250aE5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBub3QgdXNlZFxuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyArK2kpIHtcbiAgICAgICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHNTaG9ydChcbiAgICAgICAgICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgICkudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRocyhtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ01NTScpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ01NTScpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHNQYXJzZShtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UuY2FsbCh0aGlzLCBtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRPRE86IGFkZCBzb3J0aW5nXG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXJcbiAgICAgICAgLy8gc2VlIHNvcnRpbmcgaW4gY29tcHV0ZU1vbnRoc1BhcnNlXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJyxcbiAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzdHJpY3QgJiYgIXRoaXMuX21vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgcmVnZXggPVxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKSArICd8XicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgICAgICBmb3JtYXQgPT09ICdNTU1NJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgICAgICBmb3JtYXQgPT09ICdNTU0nICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX21vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gc2V0TW9udGgobW9tLCB2YWx1ZSkge1xuICAgICAgICB2YXIgZGF5T2ZNb250aDtcblxuICAgICAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIC8vIE5vIG9wXG4gICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICgvXlxcZCskLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdG9JbnQodmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG1vbS5sb2NhbGVEYXRhKCkubW9udGhzUGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IEFub3RoZXIgc2lsZW50IGZhaWx1cmU/XG4gICAgICAgICAgICAgICAgaWYgKCFpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkYXlPZk1vbnRoID0gTWF0aC5taW4obW9tLmRhdGUoKSwgZGF5c0luTW9udGgobW9tLnllYXIoKSwgdmFsdWUpKTtcbiAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArICdNb250aCddKHZhbHVlLCBkYXlPZk1vbnRoKTtcbiAgICAgICAgcmV0dXJuIG1vbTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRNb250aCh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc2V0TW9udGgodGhpcywgdmFsdWUpO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsICdNb250aCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGF5c0luTW9udGgoKSB7XG4gICAgICAgIHJldHVybiBkYXlzSW5Nb250aCh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aHNTaG9ydFJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgICAgID8gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleFxuICAgICAgICAgICAgICAgIDogdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoc1JlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IGRlZmF1bHRNb250aHNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgICAgID8gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICA6IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZU1vbnRoc1BhcnNlKCkge1xuICAgICAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2hvcnRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGxvbmdQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbW9tO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgIHNob3J0UGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgICAgICAgICBsb25nUGllY2VzLnB1c2godGhpcy5tb250aHMobW9tLCAnJykpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaCh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAgICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgICAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICBzaG9ydFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKHNob3J0UGllY2VzW2ldKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXNbaV0gPSByZWdleEVzY2FwZShsb25nUGllY2VzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMjQ7IGkrKykge1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShtaXhlZFBpZWNlc1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICB0aGlzLl9tb250aHNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1knLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB5ID0gdGhpcy55ZWFyKCk7XG4gICAgICAgIHJldHVybiB5IDw9IDk5OTkgPyB6ZXJvRmlsbCh5LCA0KSA6ICcrJyArIHk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZJywgNF0sIDAsICd5ZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWScsIDVdLCAwLCAneWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVlZJywgNiwgdHJ1ZV0sIDAsICd5ZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3llYXInLCAneScpO1xuXG4gICAgLy8gUFJJT1JJVElFU1xuXG4gICAgYWRkVW5pdFByaW9yaXR5KCd5ZWFyJywgMSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdZJywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVknLCBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWVknLCBtYXRjaDF0bzYsIG1hdGNoNik7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWVlZJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ1lZWVlZJywgJ1lZWVlZWSddLCBZRUFSKTtcbiAgICBhZGRQYXJzZVRva2VuKCdZWVlZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9XG4gICAgICAgICAgICBpbnB1dC5sZW5ndGggPT09IDIgPyBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCkgOiB0b0ludChpbnB1dCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1knLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIGRheXNJblllYXIoeWVhcikge1xuICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih5ZWFyKSA/IDM2NiA6IDM2NTtcbiAgICB9XG5cbiAgICAvLyBIT09LU1xuXG4gICAgaG9va3MucGFyc2VUd29EaWdpdFllYXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRvSW50KGlucHV0KSArICh0b0ludChpbnB1dCkgPiA2OCA/IDE5MDAgOiAyMDAwKTtcbiAgICB9O1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldFllYXIgPSBtYWtlR2V0U2V0KCdGdWxsWWVhcicsIHRydWUpO1xuXG4gICAgZnVuY3Rpb24gZ2V0SXNMZWFwWWVhcigpIHtcbiAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIodGhpcy55ZWFyKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZURhdGUoeSwgbSwgZCwgaCwgTSwgcywgbXMpIHtcbiAgICAgICAgLy8gY2FuJ3QganVzdCBhcHBseSgpIHRvIGNyZWF0ZSBhIGRhdGU6XG4gICAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcS8xODEzNDhcbiAgICAgICAgdmFyIGRhdGU7XG4gICAgICAgIC8vIHRoZSBkYXRlIGNvbnN0cnVjdG9yIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoeSArIDQwMCwgbSwgZCwgaCwgTSwgcywgbXMpO1xuICAgICAgICAgICAgaWYgKGlzRmluaXRlKGRhdGUuZ2V0RnVsbFllYXIoKSkpIHtcbiAgICAgICAgICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHksIG0sIGQsIGgsIE0sIHMsIG1zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVUQ0RhdGUoeSkge1xuICAgICAgICB2YXIgZGF0ZSwgYXJncztcbiAgICAgICAgLy8gdGhlIERhdGUuVVRDIGZ1bmN0aW9uIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIGFyZ3NbMF0gPSB5ICsgNDAwO1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3MpKTtcbiAgICAgICAgICAgIGlmIChpc0Zpbml0ZShkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpKSB7XG4gICAgICAgICAgICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIC8vIHN0YXJ0LW9mLWZpcnN0LXdlZWsgLSBzdGFydC1vZi15ZWFyXG4gICAgZnVuY3Rpb24gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSB7XG4gICAgICAgIHZhciAvLyBmaXJzdC13ZWVrIGRheSAtLSB3aGljaCBqYW51YXJ5IGlzIGFsd2F5cyBpbiB0aGUgZmlyc3Qgd2VlayAoNCBmb3IgaXNvLCAxIGZvciBvdGhlcilcbiAgICAgICAgICAgIGZ3ZCA9IDcgKyBkb3cgLSBkb3ksXG4gICAgICAgICAgICAvLyBmaXJzdC13ZWVrIGRheSBsb2NhbCB3ZWVrZGF5IC0tIHdoaWNoIGxvY2FsIHdlZWtkYXkgaXMgZndkXG4gICAgICAgICAgICBmd2RsdyA9ICg3ICsgY3JlYXRlVVRDRGF0ZSh5ZWFyLCAwLCBmd2QpLmdldFVUQ0RheSgpIC0gZG93KSAlIDc7XG5cbiAgICAgICAgcmV0dXJuIC1md2RsdyArIGZ3ZCAtIDE7XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZSNDYWxjdWxhdGluZ19hX2RhdGVfZ2l2ZW5fdGhlX3llYXIuMkNfd2Vla19udW1iZXJfYW5kX3dlZWtkYXlcbiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla3MoeWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIGxvY2FsV2Vla2RheSA9ICg3ICsgd2Vla2RheSAtIGRvdykgJSA3LFxuICAgICAgICAgICAgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgICAgICBkYXlPZlllYXIgPSAxICsgNyAqICh3ZWVrIC0gMSkgKyBsb2NhbFdlZWtkYXkgKyB3ZWVrT2Zmc2V0LFxuICAgICAgICAgICAgcmVzWWVhcixcbiAgICAgICAgICAgIHJlc0RheU9mWWVhcjtcblxuICAgICAgICBpZiAoZGF5T2ZZZWFyIDw9IDApIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyIC0gMTtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheXNJblllYXIocmVzWWVhcikgKyBkYXlPZlllYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyKSkge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXIgKyAxO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyIC0gZGF5c0luWWVhcih5ZWFyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHllYXI6IHJlc1llYXIsXG4gICAgICAgICAgICBkYXlPZlllYXI6IHJlc0RheU9mWWVhcixcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrT2ZZZWFyKG1vbSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQobW9tLnllYXIoKSwgZG93LCBkb3kpLFxuICAgICAgICAgICAgd2VlayA9IE1hdGguZmxvb3IoKG1vbS5kYXlPZlllYXIoKSAtIHdlZWtPZmZzZXQgLSAxKSAvIDcpICsgMSxcbiAgICAgICAgICAgIHJlc1dlZWssXG4gICAgICAgICAgICByZXNZZWFyO1xuXG4gICAgICAgIGlmICh3ZWVrIDwgMSkge1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgLSAxO1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWsgKyB3ZWVrc0luWWVhcihyZXNZZWFyLCBkb3csIGRveSk7XG4gICAgICAgIH0gZWxzZSBpZiAod2VlayA+IHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KSkge1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWsgLSB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSk7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKTtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdlZWs6IHJlc1dlZWssXG4gICAgICAgICAgICB5ZWFyOiByZXNZZWFyLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtzSW5ZZWFyKHllYXIsIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgICAgIHdlZWtPZmZzZXROZXh0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIgKyAxLCBkb3csIGRveSk7XG4gICAgICAgIHJldHVybiAoZGF5c0luWWVhcih5ZWFyKSAtIHdlZWtPZmZzZXQgKyB3ZWVrT2Zmc2V0TmV4dCkgLyA3O1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCd3JywgWyd3dycsIDJdLCAnd28nLCAnd2VlaycpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdXJywgWydXVycsIDJdLCAnV28nLCAnaXNvV2VlaycpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrJywgJ3cnKTtcbiAgICBhZGRVbml0QWxpYXMoJ2lzb1dlZWsnLCAnVycpO1xuXG4gICAgLy8gUFJJT1JJVElFU1xuXG4gICAgYWRkVW5pdFByaW9yaXR5KCd3ZWVrJywgNSk7XG4gICAgYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrJywgNSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCd3JywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCd3dycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdXJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdXVycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFxuICAgICAgICBbJ3cnLCAnd3cnLCAnVycsICdXVyddLFxuICAgICAgICBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDEpXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrKG1vbSkge1xuICAgICAgICByZXR1cm4gd2Vla09mWWVhcihtb20sIHRoaXMuX3dlZWsuZG93LCB0aGlzLl93ZWVrLmRveSkud2VlaztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWsgPSB7XG4gICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mV2VlaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZZZWFyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3k7XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2VlayhpbnB1dCkge1xuICAgICAgICB2YXIgd2VlayA9IHRoaXMubG9jYWxlRGF0YSgpLndlZWsodGhpcyk7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09XZWVrKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gd2Vla09mWWVhcih0aGlzLCAxLCA0KS53ZWVrO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2QnLCAwLCAnZG8nLCAnZGF5Jyk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c01pbih0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzU2hvcnQodGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXModGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdlJywgMCwgMCwgJ3dlZWtkYXknKTtcbiAgICBhZGRGb3JtYXRUb2tlbignRScsIDAsIDAsICdpc29XZWVrZGF5Jyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2RheScsICdkJyk7XG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrZGF5JywgJ2UnKTtcbiAgICBhZGRVbml0QWxpYXMoJ2lzb1dlZWtkYXknLCAnRScpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2RheScsIDExKTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ3dlZWtkYXknLCAxMSk7XG4gICAgYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrZGF5JywgMTEpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignZCcsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignZScsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignRScsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignZGQnLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzTWluUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZCcsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdkZGRkJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1JlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZGQnLCAnZGRkJywgJ2RkZGQnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gY29uZmlnLl9sb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGdldCBhIHdlZWtkYXkgbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkXG4gICAgICAgIGlmICh3ZWVrZGF5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHdlZWsuZCA9IHdlZWtkYXk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkV2Vla2RheSA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2QnLCAnZScsICdFJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIHBhcnNlV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzTmFOKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbnB1dCA9IGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlSXNvV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpICUgNyB8fCA3O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc05hTihpbnB1dCkgPyBudWxsIDogaW5wdXQ7XG4gICAgfVxuXG4gICAgLy8gTE9DQUxFU1xuICAgIGZ1bmN0aW9uIHNoaWZ0V2Vla2RheXMod3MsIG4pIHtcbiAgICAgICAgcmV0dXJuIHdzLnNsaWNlKG4sIDcpLmNvbmNhdCh3cy5zbGljZSgwLCBuKSk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5cyA9XG4gICAgICAgICAgICAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyksXG4gICAgICAgIGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0ID0gJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluID0gJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBkZWZhdWx0V2Vla2RheXNSZWdleCA9IG1hdGNoV29yZCxcbiAgICAgICAgZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleCA9IG1hdGNoV29yZCxcbiAgICAgICAgZGVmYXVsdFdlZWtkYXlzTWluUmVnZXggPSBtYXRjaFdvcmQ7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5cyhtLCBmb3JtYXQpIHtcbiAgICAgICAgdmFyIHdlZWtkYXlzID0gaXNBcnJheSh0aGlzLl93ZWVrZGF5cylcbiAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNcbiAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNbXG4gICAgICAgICAgICAgICAgICBtICYmIG0gIT09IHRydWUgJiYgdGhpcy5fd2Vla2RheXMuaXNGb3JtYXQudGVzdChmb3JtYXQpXG4gICAgICAgICAgICAgICAgICAgICAgPyAnZm9ybWF0J1xuICAgICAgICAgICAgICAgICAgICAgIDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgICAgIF07XG4gICAgICAgIHJldHVybiBtID09PSB0cnVlXG4gICAgICAgICAgICA/IHNoaWZ0V2Vla2RheXMod2Vla2RheXMsIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgOiBtXG4gICAgICAgICAgICA/IHdlZWtkYXlzW20uZGF5KCldXG4gICAgICAgICAgICA6IHdlZWtkYXlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzU2hvcnQobSkge1xuICAgICAgICByZXR1cm4gbSA9PT0gdHJ1ZVxuICAgICAgICAgICAgPyBzaGlmdFdlZWtkYXlzKHRoaXMuX3dlZWtkYXlzU2hvcnQsIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgOiBtXG4gICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzU2hvcnRbbS5kYXkoKV1cbiAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNTaG9ydDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c01pbihtKSB7XG4gICAgICAgIHJldHVybiBtID09PSB0cnVlXG4gICAgICAgICAgICA/IHNoaWZ0V2Vla2RheXModGhpcy5fd2Vla2RheXNNaW4sIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgOiBtXG4gICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzTWluW20uZGF5KCldXG4gICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzTWluO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlJDEod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgaWksXG4gICAgICAgICAgICBtb20sXG4gICAgICAgICAgICBsbGMgPSB3ZWVrZGF5TmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgKytpKSB7XG4gICAgICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzTWluKFxuICAgICAgICAgICAgICAgICAgICBtb20sXG4gICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNTaG9ydChcbiAgICAgICAgICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgICkudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5cyhtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICdkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICdkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNQYXJzZSh3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmljdFBhcnNlJDEuY2FsbCh0aGlzLCB3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcblxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJyxcbiAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJyxcbiAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgcmVnZXggPVxuICAgICAgICAgICAgICAgICAgICAnXicgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndlZWtkYXlzKG1vbSwgJycpICtcbiAgICAgICAgICAgICAgICAgICAgJ3xeJyArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKSArXG4gICAgICAgICAgICAgICAgICAgICd8XicgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ2RkZGQnICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgICAgICBmb3JtYXQgPT09ICdkZGQnICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgZm9ybWF0ID09PSAnZGQnICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fd2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0RGF5T2ZXZWVrKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF5ID0gdGhpcy5faXNVVEMgPyB0aGlzLl9kLmdldFVUQ0RheSgpIDogdGhpcy5fZC5nZXREYXkoKTtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlucHV0ID0gcGFyc2VXZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGQoaW5wdXQgLSBkYXksICdkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGF5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgd2Vla2RheSA9ICh0aGlzLmRheSgpICsgNyAtIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdykgJSA3O1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWtkYXkgOiB0aGlzLmFkZChpbnB1dCAtIHdlZWtkYXksICdkJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPRGF5T2ZXZWVrKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJlaGF2ZXMgdGhlIHNhbWUgYXMgbW9tZW50I2RheSBleGNlcHRcbiAgICAgICAgLy8gYXMgYSBnZXR0ZXIsIHJldHVybnMgNyBpbnN0ZWFkIG9mIDAgKDEtNyByYW5nZSBpbnN0ZWFkIG9mIDAtNilcbiAgICAgICAgLy8gYXMgYSBzZXR0ZXIsIHN1bmRheSBzaG91bGQgYmVsb25nIHRvIHRoZSBwcmV2aW91cyB3ZWVrLlxuXG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgd2Vla2RheSA9IHBhcnNlSXNvV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF5KHRoaXMuZGF5KCkgJSA3ID8gd2Vla2RheSA6IHdlZWtkYXkgLSA3KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRheSgpIHx8IDc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrZGF5c1JlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1JlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleFxuICAgICAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtkYXlzU2hvcnRSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleFxuICAgICAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla2RheXNNaW5SZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNNaW5SZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlV2Vla2RheXNQYXJzZSgpIHtcbiAgICAgICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1pblBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgc2hvcnRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGxvbmdQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgbWlucCxcbiAgICAgICAgICAgIHNob3J0cCxcbiAgICAgICAgICAgIGxvbmdwO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgIG1pbnAgPSByZWdleEVzY2FwZSh0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpKTtcbiAgICAgICAgICAgIHNob3J0cCA9IHJlZ2V4RXNjYXBlKHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKSk7XG4gICAgICAgICAgICBsb25ncCA9IHJlZ2V4RXNjYXBlKHRoaXMud2Vla2RheXMobW9tLCAnJykpO1xuICAgICAgICAgICAgbWluUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgICAgICBzaG9ydFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgICAgICBsb25nUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgd2Vla2RheSAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgICAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgICAgIG1pblBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcblxuICAgICAgICB0aGlzLl93ZWVrZGF5c1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcblxuICAgICAgICB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBtaW5QaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgZnVuY3Rpb24gaEZvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG91cnMoKSAlIDEyIHx8IDEyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtGb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvdXJzKCkgfHwgMjQ7XG4gICAgfVxuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0gnLCBbJ0hIJywgMl0sIDAsICdob3VyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ2gnLCBbJ2hoJywgMl0sIDAsIGhGb3JtYXQpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdrJywgWydraycsIDJdLCAwLCBrRm9ybWF0KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdobW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIGhGb3JtYXQuYXBwbHkodGhpcykgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignaG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAnJyArXG4gICAgICAgICAgICBoRm9ybWF0LmFwcGx5KHRoaXMpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMilcbiAgICAgICAgKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdIbW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIHRoaXMuaG91cnMoKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdIbW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICcnICtcbiAgICAgICAgICAgIHRoaXMuaG91cnMoKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpXG4gICAgICAgICk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBtZXJpZGllbSh0b2tlbiwgbG93ZXJjYXNlKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKHRva2VuLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubWVyaWRpZW0oXG4gICAgICAgICAgICAgICAgdGhpcy5ob3VycygpLFxuICAgICAgICAgICAgICAgIHRoaXMubWludXRlcygpLFxuICAgICAgICAgICAgICAgIGxvd2VyY2FzZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbWVyaWRpZW0oJ2EnLCB0cnVlKTtcbiAgICBtZXJpZGllbSgnQScsIGZhbHNlKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnaG91cicsICdoJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnaG91cicsIDEzKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGZ1bmN0aW9uIG1hdGNoTWVyaWRpZW0oaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLl9tZXJpZGllbVBhcnNlO1xuICAgIH1cblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2EnLCBtYXRjaE1lcmlkaWVtKTtcbiAgICBhZGRSZWdleFRva2VuKCdBJywgbWF0Y2hNZXJpZGllbSk7XG4gICAgYWRkUmVnZXhUb2tlbignSCcsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignaCcsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignaycsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignSEgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignaGgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbigna2snLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbiAgICBhZGRSZWdleFRva2VuKCdobW0nLCBtYXRjaDN0bzQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2htbXNzJywgbWF0Y2g1dG82KTtcbiAgICBhZGRSZWdleFRva2VuKCdIbW0nLCBtYXRjaDN0bzQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0htbXNzJywgbWF0Y2g1dG82KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydIJywgJ0hIJ10sIEhPVVIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydrJywgJ2trJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIga0lucHV0ID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICBhcnJheVtIT1VSXSA9IGtJbnB1dCA9PT0gMjQgPyAwIDoga0lucHV0O1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oWydhJywgJ0EnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5faXNQbSA9IGNvbmZpZy5fbG9jYWxlLmlzUE0oaW5wdXQpO1xuICAgICAgICBjb25maWcuX21lcmlkaWVtID0gaW5wdXQ7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2gnLCAnaGgnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdobW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdobW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQsXG4gICAgICAgICAgICBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICAgICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignSG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0LFxuICAgICAgICAgICAgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xuICAgIH0pO1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlSXNQTShpbnB1dCkge1xuICAgICAgICAvLyBJRTggUXVpcmtzIE1vZGUgJiBJRTcgU3RhbmRhcmRzIE1vZGUgZG8gbm90IGFsbG93IGFjY2Vzc2luZyBzdHJpbmdzIGxpa2UgYXJyYXlzXG4gICAgICAgIC8vIFVzaW5nIGNoYXJBdCBzaG91bGQgYmUgbW9yZSBjb21wYXRpYmxlLlxuICAgICAgICByZXR1cm4gKGlucHV0ICsgJycpLnRvTG93ZXJDYXNlKCkuY2hhckF0KDApID09PSAncCc7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlID0gL1thcF1cXC4/bT9cXC4/L2ksXG4gICAgICAgIC8vIFNldHRpbmcgdGhlIGhvdXIgc2hvdWxkIGtlZXAgdGhlIHRpbWUsIGJlY2F1c2UgdGhlIHVzZXIgZXhwbGljaXRseVxuICAgICAgICAvLyBzcGVjaWZpZWQgd2hpY2ggaG91ciB0aGV5IHdhbnQuIFNvIHRyeWluZyB0byBtYWludGFpbiB0aGUgc2FtZSBob3VyIChpblxuICAgICAgICAvLyBhIG5ldyB0aW1lem9uZSkgbWFrZXMgc2Vuc2UuIEFkZGluZy9zdWJ0cmFjdGluZyBob3VycyBkb2VzIG5vdCBmb2xsb3dcbiAgICAgICAgLy8gdGhpcyBydWxlLlxuICAgICAgICBnZXRTZXRIb3VyID0gbWFrZUdldFNldCgnSG91cnMnLCB0cnVlKTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZU1lcmlkaWVtKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdwbScgOiAnUE0nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnYW0nIDogJ0FNJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBiYXNlQ29uZmlnID0ge1xuICAgICAgICBjYWxlbmRhcjogZGVmYXVsdENhbGVuZGFyLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDogZGVmYXVsdExvbmdEYXRlRm9ybWF0LFxuICAgICAgICBpbnZhbGlkRGF0ZTogZGVmYXVsdEludmFsaWREYXRlLFxuICAgICAgICBvcmRpbmFsOiBkZWZhdWx0T3JkaW5hbCxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UsXG4gICAgICAgIHJlbGF0aXZlVGltZTogZGVmYXVsdFJlbGF0aXZlVGltZSxcblxuICAgICAgICBtb250aHM6IGRlZmF1bHRMb2NhbGVNb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQsXG5cbiAgICAgICAgd2VlazogZGVmYXVsdExvY2FsZVdlZWssXG5cbiAgICAgICAgd2Vla2RheXM6IGRlZmF1bHRMb2NhbGVXZWVrZGF5cyxcbiAgICAgICAgd2Vla2RheXNNaW46IGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbixcbiAgICAgICAgd2Vla2RheXNTaG9ydDogZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQsXG5cbiAgICAgICAgbWVyaWRpZW1QYXJzZTogZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UsXG4gICAgfTtcblxuICAgIC8vIGludGVybmFsIHN0b3JhZ2UgZm9yIGxvY2FsZSBjb25maWcgZmlsZXNcbiAgICB2YXIgbG9jYWxlcyA9IHt9LFxuICAgICAgICBsb2NhbGVGYW1pbGllcyA9IHt9LFxuICAgICAgICBnbG9iYWxMb2NhbGU7XG5cbiAgICBmdW5jdGlvbiBjb21tb25QcmVmaXgoYXJyMSwgYXJyMikge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG1pbmwgPSBNYXRoLm1pbihhcnIxLmxlbmd0aCwgYXJyMi5sZW5ndGgpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbWlubDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoYXJyMVtpXSAhPT0gYXJyMltpXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtaW5sO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2FsZShrZXkpIHtcbiAgICAgICAgcmV0dXJuIGtleSA/IGtleS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJ18nLCAnLScpIDoga2V5O1xuICAgIH1cblxuICAgIC8vIHBpY2sgdGhlIGxvY2FsZSBmcm9tIHRoZSBhcnJheVxuICAgIC8vIHRyeSBbJ2VuLWF1JywgJ2VuLWdiJ10gYXMgJ2VuLWF1JywgJ2VuLWdiJywgJ2VuJywgYXMgaW4gbW92ZSB0aHJvdWdoIHRoZSBsaXN0IHRyeWluZyBlYWNoXG4gICAgLy8gc3Vic3RyaW5nIGZyb20gbW9zdCBzcGVjaWZpYyB0byBsZWFzdCwgYnV0IG1vdmUgdG8gdGhlIG5leHQgYXJyYXkgaXRlbSBpZiBpdCdzIGEgbW9yZSBzcGVjaWZpYyB2YXJpYW50IHRoYW4gdGhlIGN1cnJlbnQgcm9vdFxuICAgIGZ1bmN0aW9uIGNob29zZUxvY2FsZShuYW1lcykge1xuICAgICAgICB2YXIgaSA9IDAsXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgbmV4dCxcbiAgICAgICAgICAgIGxvY2FsZSxcbiAgICAgICAgICAgIHNwbGl0O1xuXG4gICAgICAgIHdoaWxlIChpIDwgbmFtZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBzcGxpdCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpXSkuc3BsaXQoJy0nKTtcbiAgICAgICAgICAgIGogPSBzcGxpdC5sZW5ndGg7XG4gICAgICAgICAgICBuZXh0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2kgKyAxXSk7XG4gICAgICAgICAgICBuZXh0ID0gbmV4dCA/IG5leHQuc3BsaXQoJy0nKSA6IG51bGw7XG4gICAgICAgICAgICB3aGlsZSAoaiA+IDApIHtcbiAgICAgICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKHNwbGl0LnNsaWNlKDAsIGopLmpvaW4oJy0nKSk7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIG5leHQgJiZcbiAgICAgICAgICAgICAgICAgICAgbmV4dC5sZW5ndGggPj0gaiAmJlxuICAgICAgICAgICAgICAgICAgICBjb21tb25QcmVmaXgoc3BsaXQsIG5leHQpID49IGogLSAxXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vdGhlIG5leHQgYXJyYXkgaXRlbSBpcyBiZXR0ZXIgdGhhbiBhIHNoYWxsb3dlciBzdWJzdHJpbmcgb2YgdGhpcyBvbmVcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGotLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTG9jYWxlTmFtZVNhbmUobmFtZSkge1xuICAgICAgICAvLyBQcmV2ZW50IG5hbWVzIHRoYXQgbG9vayBsaWtlIGZpbGVzeXN0ZW0gcGF0aHMsIGkuZSBjb250YWluICcvJyBvciAnXFwnXG4gICAgICAgIHJldHVybiBuYW1lLm1hdGNoKCdeW14vXFxcXFxcXFxdKiQnKSAhPSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRMb2NhbGUobmFtZSkge1xuICAgICAgICB2YXIgb2xkTG9jYWxlID0gbnVsbCxcbiAgICAgICAgICAgIGFsaWFzZWRSZXF1aXJlO1xuICAgICAgICAvLyBUT0RPOiBGaW5kIGEgYmV0dGVyIHdheSB0byByZWdpc3RlciBhbmQgbG9hZCBhbGwgdGhlIGxvY2FsZXMgaW4gTm9kZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBsb2NhbGVzW25hbWVdID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICBtb2R1bGUgJiZcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzICYmXG4gICAgICAgICAgICBpc0xvY2FsZU5hbWVTYW5lKG5hbWUpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBvbGRMb2NhbGUgPSBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmUgPSByZXF1aXJlO1xuICAgICAgICAgICAgICAgIGFsaWFzZWRSZXF1aXJlKCcuL2xvY2FsZS8nICsgbmFtZSk7XG4gICAgICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG9sZExvY2FsZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gbWFyayBhcyBub3QgZm91bmQgdG8gYXZvaWQgcmVwZWF0aW5nIGV4cGVuc2l2ZSBmaWxlIHJlcXVpcmUgY2FsbCBjYXVzaW5nIGhpZ2ggQ1BVXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0cnlpbmcgdG8gZmluZCBlbi1VUywgZW5fVVMsIGVuLXVzIGZvciBldmVyeSBmb3JtYXQgY2FsbFxuICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBudWxsOyAvLyBudWxsIG1lYW5zIG5vdCBmb3VuZFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBsb2FkIGxvY2FsZSBhbmQgdGhlbiBzZXQgdGhlIGdsb2JhbCBsb2NhbGUuICBJZlxuICAgIC8vIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGluLCBpdCB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnQgZ2xvYmFsXG4gICAgLy8gbG9jYWxlIGtleS5cbiAgICBmdW5jdGlvbiBnZXRTZXRHbG9iYWxMb2NhbGUoa2V5LCB2YWx1ZXMpIHtcbiAgICAgICAgdmFyIGRhdGE7XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGdldExvY2FsZShrZXkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZGVmaW5lTG9jYWxlKGtleSwgdmFsdWVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBtb21lbnQuZHVyYXRpb24uX2xvY2FsZSA9IG1vbWVudC5fbG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgICAgICBnbG9iYWxMb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICAgICAgICAgICAgICAvL3dhcm4gdXNlciBpZiBhcmd1bWVudHMgYXJlIHBhc3NlZCBidXQgdGhlIGxvY2FsZSBjb3VsZCBub3QgYmUgc2V0XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgICAgICAgICdMb2NhbGUgJyArIGtleSArICcgbm90IGZvdW5kLiBEaWQgeW91IGZvcmdldCB0byBsb2FkIGl0PydcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlLl9hYmJyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmluZUxvY2FsZShuYW1lLCBjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSxcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBiYXNlQ29uZmlnO1xuICAgICAgICAgICAgY29uZmlnLmFiYnIgPSBuYW1lO1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZShcbiAgICAgICAgICAgICAgICAgICAgJ2RlZmluZUxvY2FsZU92ZXJyaWRlJyxcbiAgICAgICAgICAgICAgICAgICAgJ3VzZSBtb21lbnQudXBkYXRlTG9jYWxlKGxvY2FsZU5hbWUsIGNvbmZpZykgdG8gY2hhbmdlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2FuIGV4aXN0aW5nIGxvY2FsZS4gbW9tZW50LmRlZmluZUxvY2FsZShsb2NhbGVOYW1lLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb25maWcpIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIGNyZWF0aW5nIGEgbmV3IGxvY2FsZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kZWZpbmUtbG9jYWxlLyBmb3IgbW9yZSBpbmZvLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbbmFtZV0uX2NvbmZpZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdLl9jb25maWc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShjb25maWcucGFyZW50TG9jYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGUuX2NvbmZpZztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbmV3IExvY2FsZShtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpKTtcblxuICAgICAgICAgICAgaWYgKGxvY2FsZUZhbWlsaWVzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbbmFtZV0uZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVMb2NhbGUoeC5uYW1lLCB4LmNvbmZpZyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHdlIHNldCB0aGUgbG9jYWxlIEFGVEVSIGFsbCBjaGlsZCBsb2NhbGVzIGhhdmUgYmVlblxuICAgICAgICAgICAgLy8gY3JlYXRlZCwgc28gd2Ugd29uJ3QgZW5kIHVwIHdpdGggdGhlIGNoaWxkIGxvY2FsZSBzZXQuXG4gICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdXNlZnVsIGZvciB0ZXN0aW5nXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlTG9jYWxlKG5hbWUsIGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBsb2NhbGUsXG4gICAgICAgICAgICAgICAgdG1wTG9jYWxlLFxuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG5cbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwgJiYgbG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBleGlzdGluZyBjaGlsZCBsb2NhbGUgaW4tcGxhY2UgdG8gYXZvaWQgbWVtb3J5LWxlYWtzXG4gICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXS5zZXQobWVyZ2VDb25maWdzKGxvY2FsZXNbbmFtZV0uX2NvbmZpZywgY29uZmlnKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE1FUkdFXG4gICAgICAgICAgICAgICAgdG1wTG9jYWxlID0gbG9hZExvY2FsZShuYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAodG1wTG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gdG1wTG9jYWxlLl9jb25maWc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgaWYgKHRtcExvY2FsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZUxvY2FsZSBpcyBjYWxsZWQgZm9yIGNyZWF0aW5nIGEgbmV3IGxvY2FsZVxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgYWJiciBzbyBpdCB3aWxsIGhhdmUgYSBuYW1lIChnZXR0ZXJzIHJldHVyblxuICAgICAgICAgICAgICAgICAgICAvLyB1bmRlZmluZWQgb3RoZXJ3aXNlKS5cbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLmFiYnIgPSBuYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsb2NhbGUgPSBuZXcgTG9jYWxlKGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgbG9jYWxlLnBhcmVudExvY2FsZSA9IGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBwYXNzIG51bGwgZm9yIGNvbmZpZyB0byB1bnVwZGF0ZSwgdXNlZnVsIGZvciB0ZXN0c1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09IGdldFNldEdsb2JhbExvY2FsZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfVxuXG4gICAgLy8gcmV0dXJucyBsb2NhbGUgZGF0YVxuICAgIGZ1bmN0aW9uIGdldExvY2FsZShrZXkpIHtcbiAgICAgICAgdmFyIGxvY2FsZTtcblxuICAgICAgICBpZiAoa2V5ICYmIGtleS5fbG9jYWxlICYmIGtleS5fbG9jYWxlLl9hYmJyKSB7XG4gICAgICAgICAgICBrZXkgPSBrZXkuX2xvY2FsZS5fYWJicjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0FycmF5KGtleSkpIHtcbiAgICAgICAgICAgIC8vc2hvcnQtY2lyY3VpdCBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5ID0gW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2hvb3NlTG9jYWxlKGtleSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdExvY2FsZXMoKSB7XG4gICAgICAgIHJldHVybiBrZXlzKGxvY2FsZXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3cobSkge1xuICAgICAgICB2YXIgb3ZlcmZsb3csXG4gICAgICAgICAgICBhID0gbS5fYTtcblxuICAgICAgICBpZiAoYSAmJiBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPT09IC0yKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9XG4gICAgICAgICAgICAgICAgYVtNT05USF0gPCAwIHx8IGFbTU9OVEhdID4gMTFcbiAgICAgICAgICAgICAgICAgICAgPyBNT05USFxuICAgICAgICAgICAgICAgICAgICA6IGFbREFURV0gPCAxIHx8IGFbREFURV0gPiBkYXlzSW5Nb250aChhW1lFQVJdLCBhW01PTlRIXSlcbiAgICAgICAgICAgICAgICAgICAgPyBEQVRFXG4gICAgICAgICAgICAgICAgICAgIDogYVtIT1VSXSA8IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICBhW0hPVVJdID4gMjQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAoYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGFbTUlOVVRFXSAhPT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYVtTRUNPTkRdICE9PSAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW01JTExJU0VDT05EXSAhPT0gMCkpXG4gICAgICAgICAgICAgICAgICAgID8gSE9VUlxuICAgICAgICAgICAgICAgICAgICA6IGFbTUlOVVRFXSA8IDAgfHwgYVtNSU5VVEVdID4gNTlcbiAgICAgICAgICAgICAgICAgICAgPyBNSU5VVEVcbiAgICAgICAgICAgICAgICAgICAgOiBhW1NFQ09ORF0gPCAwIHx8IGFbU0VDT05EXSA+IDU5XG4gICAgICAgICAgICAgICAgICAgID8gU0VDT05EXG4gICAgICAgICAgICAgICAgICAgIDogYVtNSUxMSVNFQ09ORF0gPCAwIHx8IGFbTUlMTElTRUNPTkRdID4gOTk5XG4gICAgICAgICAgICAgICAgICAgID8gTUlMTElTRUNPTkRcbiAgICAgICAgICAgICAgICAgICAgOiAtMTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dEYXlPZlllYXIgJiZcbiAgICAgICAgICAgICAgICAob3ZlcmZsb3cgPCBZRUFSIHx8IG92ZXJmbG93ID4gREFURSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gREFURTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla3MgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrZGF5ICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFS0RBWTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID0gb3ZlcmZsb3c7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9XG5cbiAgICAvLyBpc28gODYwMSByZWdleFxuICAgIC8vIDAwMDAtMDAtMDAgMDAwMC1XMDAgb3IgMDAwMC1XMDAtMCArIFQgKyAwMCBvciAwMDowMCBvciAwMDowMDowMCBvciAwMDowMDowMC4wMDAgKyArMDA6MDAgb3IgKzAwMDAgb3IgKzAwKVxuICAgIHZhciBleHRlbmRlZElzb1JlZ2V4ID1cbiAgICAgICAgICAgIC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSktKD86XFxkXFxkLVxcZFxcZHxXXFxkXFxkLVxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OjpcXGRcXGQoPzo6XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvLFxuICAgICAgICBiYXNpY0lzb1JlZ2V4ID1cbiAgICAgICAgICAgIC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSkoPzpcXGRcXGRcXGRcXGR8V1xcZFxcZFxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGR8KSkoPzooVHwgKShcXGRcXGQoPzpcXGRcXGQoPzpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoWystXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC8sXG4gICAgICAgIHR6UmVnZXggPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy8sXG4gICAgICAgIGlzb0RhdGVzID0gW1xuICAgICAgICAgICAgWydZWVlZWVktTU0tREQnLCAvWystXVxcZHs2fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgICAgICAgICBbJ1lZWVktTU0tREQnLCAvXFxkezR9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICAgICAgICAgIFsnR0dHRy1bV11XVy1FJywgL1xcZHs0fS1XXFxkXFxkLVxcZC9dLFxuICAgICAgICAgICAgWydHR0dHLVtXXVdXJywgL1xcZHs0fS1XXFxkXFxkLywgZmFsc2VdLFxuICAgICAgICAgICAgWydZWVlZLURERCcsIC9cXGR7NH0tXFxkezN9L10sXG4gICAgICAgICAgICBbJ1lZWVktTU0nLCAvXFxkezR9LVxcZFxcZC8sIGZhbHNlXSxcbiAgICAgICAgICAgIFsnWVlZWVlZTU1ERCcsIC9bKy1dXFxkezEwfS9dLFxuICAgICAgICAgICAgWydZWVlZTU1ERCcsIC9cXGR7OH0vXSxcbiAgICAgICAgICAgIFsnR0dHR1tXXVdXRScsIC9cXGR7NH1XXFxkezN9L10sXG4gICAgICAgICAgICBbJ0dHR0dbV11XVycsIC9cXGR7NH1XXFxkezJ9LywgZmFsc2VdLFxuICAgICAgICAgICAgWydZWVlZREREJywgL1xcZHs3fS9dLFxuICAgICAgICAgICAgWydZWVlZTU0nLCAvXFxkezZ9LywgZmFsc2VdLFxuICAgICAgICAgICAgWydZWVlZJywgL1xcZHs0fS8sIGZhbHNlXSxcbiAgICAgICAgXSxcbiAgICAgICAgLy8gaXNvIHRpbWUgZm9ybWF0cyBhbmQgcmVnZXhlc1xuICAgICAgICBpc29UaW1lcyA9IFtcbiAgICAgICAgICAgIFsnSEg6bW06c3MuU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZFxcLlxcZCsvXSxcbiAgICAgICAgICAgIFsnSEg6bW06c3MsU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZCxcXGQrL10sXG4gICAgICAgICAgICBbJ0hIOm1tOnNzJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkL10sXG4gICAgICAgICAgICBbJ0hIOm1tJywgL1xcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgICAgIFsnSEhtbXNzLlNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICAgICAgWydISG1tc3MsU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGQsXFxkKy9dLFxuICAgICAgICAgICAgWydISG1tc3MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkL10sXG4gICAgICAgICAgICBbJ0hIbW0nLCAvXFxkXFxkXFxkXFxkL10sXG4gICAgICAgICAgICBbJ0hIJywgL1xcZFxcZC9dLFxuICAgICAgICBdLFxuICAgICAgICBhc3BOZXRKc29uUmVnZXggPSAvXlxcLz9EYXRlXFwoKC0/XFxkKykvaSxcbiAgICAgICAgLy8gUkZDIDI4MjIgcmVnZXg6IEZvciBkZXRhaWxzIHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMjgyMiNzZWN0aW9uLTMuM1xuICAgICAgICByZmMyODIyID1cbiAgICAgICAgICAgIC9eKD86KE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksP1xccyk/KFxcZHsxLDJ9KVxccyhKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYylcXHMoXFxkezIsNH0pXFxzKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkpP1xccyg/OihVVHxHTVR8W0VDTVBdW1NEXVQpfChbWnpdKXwoWystXVxcZHs0fSkpJC8sXG4gICAgICAgIG9ic09mZnNldHMgPSB7XG4gICAgICAgICAgICBVVDogMCxcbiAgICAgICAgICAgIEdNVDogMCxcbiAgICAgICAgICAgIEVEVDogLTQgKiA2MCxcbiAgICAgICAgICAgIEVTVDogLTUgKiA2MCxcbiAgICAgICAgICAgIENEVDogLTUgKiA2MCxcbiAgICAgICAgICAgIENTVDogLTYgKiA2MCxcbiAgICAgICAgICAgIE1EVDogLTYgKiA2MCxcbiAgICAgICAgICAgIE1TVDogLTcgKiA2MCxcbiAgICAgICAgICAgIFBEVDogLTcgKiA2MCxcbiAgICAgICAgICAgIFBTVDogLTggKiA2MCxcbiAgICAgICAgfTtcblxuICAgIC8vIGRhdGUgZnJvbSBpc28gZm9ybWF0XG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUlTTyhjb25maWcpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgc3RyaW5nID0gY29uZmlnLl9pLFxuICAgICAgICAgICAgbWF0Y2ggPSBleHRlbmRlZElzb1JlZ2V4LmV4ZWMoc3RyaW5nKSB8fCBiYXNpY0lzb1JlZ2V4LmV4ZWMoc3RyaW5nKSxcbiAgICAgICAgICAgIGFsbG93VGltZSxcbiAgICAgICAgICAgIGRhdGVGb3JtYXQsXG4gICAgICAgICAgICB0aW1lRm9ybWF0LFxuICAgICAgICAgICAgdHpGb3JtYXQsXG4gICAgICAgICAgICBpc29EYXRlc0xlbiA9IGlzb0RhdGVzLmxlbmd0aCxcbiAgICAgICAgICAgIGlzb1RpbWVzTGVuID0gaXNvVGltZXMubGVuZ3RoO1xuXG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaXNvID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29EYXRlc0xlbjsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpc29EYXRlc1tpXVsxXS5leGVjKG1hdGNoWzFdKSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRlRm9ybWF0ID0gaXNvRGF0ZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgICAgIGFsbG93VGltZSA9IGlzb0RhdGVzW2ldWzJdICE9PSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaFszXSkge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29UaW1lc0xlbjsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNvVGltZXNbaV1bMV0uZXhlYyhtYXRjaFszXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hdGNoWzJdIHNob3VsZCBiZSAnVCcgb3Igc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVGb3JtYXQgPSAobWF0Y2hbMl0gfHwgJyAnKSArIGlzb1RpbWVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYWxsb3dUaW1lICYmIHRpbWVGb3JtYXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaFs0XSkge1xuICAgICAgICAgICAgICAgIGlmICh0elJlZ2V4LmV4ZWMobWF0Y2hbNF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHR6Rm9ybWF0ID0gJ1onO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uZmlnLl9mID0gZGF0ZUZvcm1hdCArICh0aW1lRm9ybWF0IHx8ICcnKSArICh0ekZvcm1hdCB8fCAnJyk7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MoXG4gICAgICAgIHllYXJTdHIsXG4gICAgICAgIG1vbnRoU3RyLFxuICAgICAgICBkYXlTdHIsXG4gICAgICAgIGhvdXJTdHIsXG4gICAgICAgIG1pbnV0ZVN0cixcbiAgICAgICAgc2Vjb25kU3RyXG4gICAgKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXG4gICAgICAgICAgICB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSxcbiAgICAgICAgICAgIGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydC5pbmRleE9mKG1vbnRoU3RyKSxcbiAgICAgICAgICAgIHBhcnNlSW50KGRheVN0ciwgMTApLFxuICAgICAgICAgICAgcGFyc2VJbnQoaG91clN0ciwgMTApLFxuICAgICAgICAgICAgcGFyc2VJbnQobWludXRlU3RyLCAxMCksXG4gICAgICAgIF07XG5cbiAgICAgICAgaWYgKHNlY29uZFN0cikge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VJbnQoc2Vjb25kU3RyLCAxMCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSB7XG4gICAgICAgIHZhciB5ZWFyID0gcGFyc2VJbnQoeWVhclN0ciwgMTApO1xuICAgICAgICBpZiAoeWVhciA8PSA0OSkge1xuICAgICAgICAgICAgcmV0dXJuIDIwMDAgKyB5ZWFyO1xuICAgICAgICB9IGVsc2UgaWYgKHllYXIgPD0gOTk5KSB7XG4gICAgICAgICAgICByZXR1cm4gMTkwMCArIHllYXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHllYXI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcHJvY2Vzc1JGQzI4MjIocykge1xuICAgICAgICAvLyBSZW1vdmUgY29tbWVudHMgYW5kIGZvbGRpbmcgd2hpdGVzcGFjZSBhbmQgcmVwbGFjZSBtdWx0aXBsZS1zcGFjZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuICAgICAgICByZXR1cm4gc1xuICAgICAgICAgICAgLnJlcGxhY2UoL1xcKFteKCldKlxcKXxbXFxuXFx0XS9nLCAnICcpXG4gICAgICAgICAgICAucmVwbGFjZSgvKFxcc1xccyspL2csICcgJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9eXFxzXFxzKi8sICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcc1xccyokLywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrV2Vla2RheSh3ZWVrZGF5U3RyLCBwYXJzZWRJbnB1dCwgY29uZmlnKSB7XG4gICAgICAgIGlmICh3ZWVrZGF5U3RyKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBSZXBsYWNlIHRoZSB2YW5pbGxhIEpTIERhdGUgb2JqZWN0IHdpdGggYW4gaW5kZXBlbmRlbnQgZGF5LW9mLXdlZWsgY2hlY2suXG4gICAgICAgICAgICB2YXIgd2Vla2RheVByb3ZpZGVkID0gZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQuaW5kZXhPZih3ZWVrZGF5U3RyKSxcbiAgICAgICAgICAgICAgICB3ZWVrZGF5QWN0dWFsID0gbmV3IERhdGUoXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZElucHV0WzBdLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRJbnB1dFsxXSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkSW5wdXRbMl1cbiAgICAgICAgICAgICAgICApLmdldERheSgpO1xuICAgICAgICAgICAgaWYgKHdlZWtkYXlQcm92aWRlZCAhPT0gd2Vla2RheUFjdHVhbCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZU9mZnNldChvYnNPZmZzZXQsIG1pbGl0YXJ5T2Zmc2V0LCBudW1PZmZzZXQpIHtcbiAgICAgICAgaWYgKG9ic09mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIG9ic09mZnNldHNbb2JzT2Zmc2V0XTtcbiAgICAgICAgfSBlbHNlIGlmIChtaWxpdGFyeU9mZnNldCkge1xuICAgICAgICAgICAgLy8gdGhlIG9ubHkgYWxsb3dlZCBtaWxpdGFyeSB0eiBpcyBaXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBobSA9IHBhcnNlSW50KG51bU9mZnNldCwgMTApLFxuICAgICAgICAgICAgICAgIG0gPSBobSAlIDEwMCxcbiAgICAgICAgICAgICAgICBoID0gKGhtIC0gbSkgLyAxMDA7XG4gICAgICAgICAgICByZXR1cm4gaCAqIDYwICsgbTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgYW5kIHRpbWUgZnJvbSByZWYgMjgyMiBmb3JtYXRcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tUkZDMjgyMihjb25maWcpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gcmZjMjgyMi5leGVjKHByZXByb2Nlc3NSRkMyODIyKGNvbmZpZy5faSkpLFxuICAgICAgICAgICAgcGFyc2VkQXJyYXk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgcGFyc2VkQXJyYXkgPSBleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzKFxuICAgICAgICAgICAgICAgIG1hdGNoWzRdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzNdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzJdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzVdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzZdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzddXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCFjaGVja1dlZWtkYXkobWF0Y2hbMV0sIHBhcnNlZEFycmF5LCBjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25maWcuX2EgPSBwYXJzZWRBcnJheTtcbiAgICAgICAgICAgIGNvbmZpZy5fdHptID0gY2FsY3VsYXRlT2Zmc2V0KG1hdGNoWzhdLCBtYXRjaFs5XSwgbWF0Y2hbMTBdKTtcblxuICAgICAgICAgICAgY29uZmlnLl9kID0gY3JlYXRlVVRDRGF0ZS5hcHBseShudWxsLCBjb25maWcuX2EpO1xuICAgICAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykucmZjMjgyMiA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgZnJvbSAxKSBBU1AuTkVULCAyKSBJU08sIDMpIFJGQyAyODIyIGZvcm1hdHMsIG9yIDQpIG9wdGlvbmFsIGZhbGxiYWNrIGlmIHBhcnNpbmcgaXNuJ3Qgc3RyaWN0XG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZyhjb25maWcpIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBhc3BOZXRKc29uUmVnZXguZXhlYyhjb25maWcuX2kpO1xuICAgICAgICBpZiAobWF0Y2hlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoK21hdGNoZWRbMV0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgICAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fc3RyaWN0KSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZpbmFsIGF0dGVtcHQsIHVzZSBJbnB1dCBGYWxsYmFja1xuICAgICAgICAgICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrID0gZGVwcmVjYXRlKFxuICAgICAgICAndmFsdWUgcHJvdmlkZWQgaXMgbm90IGluIGEgcmVjb2duaXplZCBSRkMyODIyIG9yIElTTyBmb3JtYXQuIG1vbWVudCBjb25zdHJ1Y3Rpb24gZmFsbHMgYmFjayB0byBqcyBEYXRlKCksICcgK1xuICAgICAgICAgICAgJ3doaWNoIGlzIG5vdCByZWxpYWJsZSBhY3Jvc3MgYWxsIGJyb3dzZXJzIGFuZCB2ZXJzaW9ucy4gTm9uIFJGQzI4MjIvSVNPIGRhdGUgZm9ybWF0cyBhcmUgJyArXG4gICAgICAgICAgICAnZGlzY291cmFnZWQuIFBsZWFzZSByZWZlciB0byBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2pzLWRhdGUvIGZvciBtb3JlIGluZm8uJyxcbiAgICAgICAgZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoY29uZmlnLl9pICsgKGNvbmZpZy5fdXNlVVRDID8gJyBVVEMnIDogJycpKTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBQaWNrIHRoZSBmaXJzdCBkZWZpbmVkIG9mIHR3byBvciB0aHJlZSBhcmd1bWVudHMuXG4gICAgZnVuY3Rpb24gZGVmYXVsdHMoYSwgYiwgYykge1xuICAgICAgICBpZiAoYSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYiAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZykge1xuICAgICAgICAvLyBob29rcyBpcyBhY3R1YWxseSB0aGUgZXhwb3J0ZWQgbW9tZW50IG9iamVjdFxuICAgICAgICB2YXIgbm93VmFsdWUgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgICAgIGlmIChjb25maWcuX3VzZVVUQykge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBub3dWYWx1ZS5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgIG5vd1ZhbHVlLmdldFVUQ01vbnRoKCksXG4gICAgICAgICAgICAgICAgbm93VmFsdWUuZ2V0VVRDRGF0ZSgpLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW25vd1ZhbHVlLmdldEZ1bGxZZWFyKCksIG5vd1ZhbHVlLmdldE1vbnRoKCksIG5vd1ZhbHVlLmdldERhdGUoKV07XG4gICAgfVxuXG4gICAgLy8gY29udmVydCBhbiBhcnJheSB0byBhIGRhdGUuXG4gICAgLy8gdGhlIGFycmF5IHNob3VsZCBtaXJyb3IgdGhlIHBhcmFtZXRlcnMgYmVsb3dcbiAgICAvLyBub3RlOiBhbGwgdmFsdWVzIHBhc3QgdGhlIHllYXIgYXJlIG9wdGlvbmFsIGFuZCB3aWxsIGRlZmF1bHQgdG8gdGhlIGxvd2VzdCBwb3NzaWJsZSB2YWx1ZS5cbiAgICAvLyBbeWVhciwgbW9udGgsIGRheSAsIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZF1cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgZGF0ZSxcbiAgICAgICAgICAgIGlucHV0ID0gW10sXG4gICAgICAgICAgICBjdXJyZW50RGF0ZSxcbiAgICAgICAgICAgIGV4cGVjdGVkV2Vla2RheSxcbiAgICAgICAgICAgIHllYXJUb1VzZTtcblxuICAgICAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50RGF0ZSA9IGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKTtcblxuICAgICAgICAvL2NvbXB1dGUgZGF5IG9mIHRoZSB5ZWFyIGZyb20gd2Vla3MgYW5kIHdlZWtkYXlzXG4gICAgICAgIGlmIChjb25maWcuX3cgJiYgY29uZmlnLl9hW0RBVEVdID09IG51bGwgJiYgY29uZmlnLl9hW01PTlRIXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vaWYgdGhlIGRheSBvZiB0aGUgeWVhciBpcyBzZXQsIGZpZ3VyZSBvdXQgd2hhdCBpdCBpc1xuICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgeWVhclRvVXNlID0gZGVmYXVsdHMoY29uZmlnLl9hW1lFQVJdLCBjdXJyZW50RGF0ZVtZRUFSXSk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBjb25maWcuX2RheU9mWWVhciA+IGRheXNJblllYXIoeWVhclRvVXNlKSB8fFxuICAgICAgICAgICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID09PSAwXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dEYXlPZlllYXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZSh5ZWFyVG9Vc2UsIDAsIGNvbmZpZy5fZGF5T2ZZZWFyKTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNT05USF0gPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgICBjb25maWcuX2FbREFURV0gPSBkYXRlLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCBkYXRlLlxuICAgICAgICAvLyAqIGlmIG5vIHllYXIsIG1vbnRoLCBkYXkgb2YgbW9udGggYXJlIGdpdmVuLCBkZWZhdWx0IHRvIHRvZGF5XG4gICAgICAgIC8vICogaWYgZGF5IG9mIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG1vbnRoIGFuZCB5ZWFyXG4gICAgICAgIC8vICogaWYgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgb25seSB5ZWFyXG4gICAgICAgIC8vICogaWYgeWVhciBpcyBnaXZlbiwgZG9uJ3QgZGVmYXVsdCBhbnl0aGluZ1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMyAmJiBjb25maWcuX2FbaV0gPT0gbnVsbDsgKytpKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IGN1cnJlbnREYXRlW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gWmVybyBvdXQgd2hhdGV2ZXIgd2FzIG5vdCBkZWZhdWx0ZWQsIGluY2x1ZGluZyB0aW1lXG4gICAgICAgIGZvciAoOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9XG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW2ldID09IG51bGwgPyAoaSA9PT0gMiA/IDEgOiAwKSA6IGNvbmZpZy5fYVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGZvciAyNDowMDowMC4wMDBcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID09PSAyNCAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW01JTlVURV0gPT09IDAgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtTRUNPTkRdID09PSAwICYmXG4gICAgICAgICAgICBjb25maWcuX2FbTUlMTElTRUNPTkRdID09PSAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgY29uZmlnLl9uZXh0RGF5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWcuX2QgPSAoY29uZmlnLl91c2VVVEMgPyBjcmVhdGVVVENEYXRlIDogY3JlYXRlRGF0ZSkuYXBwbHkoXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgaW5wdXRcbiAgICAgICAgKTtcbiAgICAgICAgZXhwZWN0ZWRXZWVrZGF5ID0gY29uZmlnLl91c2VVVENcbiAgICAgICAgICAgID8gY29uZmlnLl9kLmdldFVUQ0RheSgpXG4gICAgICAgICAgICA6IGNvbmZpZy5fZC5nZXREYXkoKTtcblxuICAgICAgICAvLyBBcHBseSB0aW1lem9uZSBvZmZzZXQgZnJvbSBpbnB1dC4gVGhlIGFjdHVhbCB1dGNPZmZzZXQgY2FuIGJlIGNoYW5nZWRcbiAgICAgICAgLy8gd2l0aCBwYXJzZVpvbmUuXG4gICAgICAgIGlmIChjb25maWcuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fbmV4dERheSkge1xuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMjQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjaGVjayBmb3IgbWlzbWF0Y2hpbmcgZGF5IG9mIHdlZWtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29uZmlnLl93ICYmXG4gICAgICAgICAgICB0eXBlb2YgY29uZmlnLl93LmQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICBjb25maWcuX3cuZCAhPT0gZXhwZWN0ZWRXZWVrZGF5XG4gICAgICAgICkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpIHtcbiAgICAgICAgdmFyIHcsIHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSwgdGVtcCwgd2Vla2RheU92ZXJmbG93LCBjdXJXZWVrO1xuXG4gICAgICAgIHcgPSBjb25maWcuX3c7XG4gICAgICAgIGlmICh3LkdHICE9IG51bGwgfHwgdy5XICE9IG51bGwgfHwgdy5FICE9IG51bGwpIHtcbiAgICAgICAgICAgIGRvdyA9IDE7XG4gICAgICAgICAgICBkb3kgPSA0O1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBXZSBuZWVkIHRvIHRha2UgdGhlIGN1cnJlbnQgaXNvV2Vla1llYXIsIGJ1dCB0aGF0IGRlcGVuZHMgb25cbiAgICAgICAgICAgIC8vIGhvdyB3ZSBpbnRlcnByZXQgbm93IChsb2NhbCwgdXRjLCBmaXhlZCBvZmZzZXQpLiBTbyBjcmVhdGVcbiAgICAgICAgICAgIC8vIGEgbm93IHZlcnNpb24gb2YgY3VycmVudCBjb25maWcgKHRha2UgbG9jYWwvdXRjL29mZnNldCBmbGFncywgYW5kXG4gICAgICAgICAgICAvLyBjcmVhdGUgbm93KS5cbiAgICAgICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMoXG4gICAgICAgICAgICAgICAgdy5HRyxcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbWUVBUl0sXG4gICAgICAgICAgICAgICAgd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCAxLCA0KS55ZWFyXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcuVywgMSk7XG4gICAgICAgICAgICB3ZWVrZGF5ID0gZGVmYXVsdHMody5FLCAxKTtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMSB8fCB3ZWVrZGF5ID4gNykge1xuICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb3cgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3c7XG4gICAgICAgICAgICBkb3kgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3k7XG5cbiAgICAgICAgICAgIGN1cldlZWsgPSB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIGRvdywgZG95KTtcblxuICAgICAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LmdnLCBjb25maWcuX2FbWUVBUl0sIGN1cldlZWsueWVhcik7XG5cbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCB3ZWVrLlxuICAgICAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcudywgY3VyV2Vlay53ZWVrKTtcblxuICAgICAgICAgICAgaWYgKHcuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gd2Vla2RheSAtLSBsb3cgZGF5IG51bWJlcnMgYXJlIGNvbnNpZGVyZWQgbmV4dCB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IHcuZDtcbiAgICAgICAgICAgICAgICBpZiAod2Vla2RheSA8IDAgfHwgd2Vla2RheSA+IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHcuZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gbG9jYWwgd2Vla2RheSAtLSBjb3VudGluZyBzdGFydHMgZnJvbSBiZWdpbm5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSB3LmUgKyBkb3c7XG4gICAgICAgICAgICAgICAgaWYgKHcuZSA8IDAgfHwgdy5lID4gNikge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZGVmYXVsdCB0byBiZWdpbm5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSBkb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdlZWsgPCAxIHx8IHdlZWsgPiB3ZWVrc0luWWVhcih3ZWVrWWVhciwgZG93LCBkb3kpKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrcyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAod2Vla2RheU92ZXJmbG93ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtkYXkgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGVtcCA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICAgICAgY29uZmlnLl9hW1lFQVJdID0gdGVtcC55ZWFyO1xuICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0ZW1wLmRheU9mWWVhcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBJU08gc3RhbmRhcmRcbiAgICBob29rcy5JU09fODYwMSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIFJGQyAyODIyIGZvcm1cbiAgICBob29rcy5SRkNfMjgyMiA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgZm9ybWF0IHN0cmluZ1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKSB7XG4gICAgICAgIC8vIFRPRE86IE1vdmUgdGhpcyB0byBhbm90aGVyIHBhcnQgb2YgdGhlIGNyZWF0aW9uIGZsb3cgdG8gcHJldmVudCBjaXJjdWxhciBkZXBzXG4gICAgICAgIGlmIChjb25maWcuX2YgPT09IGhvb2tzLklTT184NjAxKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuUkZDXzI4MjIpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnLl9hID0gW107XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gdHJ1ZTtcblxuICAgICAgICAvLyBUaGlzIGFycmF5IGlzIHVzZWQgdG8gbWFrZSBhIERhdGUsIGVpdGhlciB3aXRoIGBuZXcgRGF0ZWAgb3IgYERhdGUuVVRDYFxuICAgICAgICB2YXIgc3RyaW5nID0gJycgKyBjb25maWcuX2ksXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcGFyc2VkSW5wdXQsXG4gICAgICAgICAgICB0b2tlbnMsXG4gICAgICAgICAgICB0b2tlbixcbiAgICAgICAgICAgIHNraXBwZWQsXG4gICAgICAgICAgICBzdHJpbmdMZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCA9IDAsXG4gICAgICAgICAgICBlcmEsXG4gICAgICAgICAgICB0b2tlbkxlbjtcblxuICAgICAgICB0b2tlbnMgPVxuICAgICAgICAgICAgZXhwYW5kRm9ybWF0KGNvbmZpZy5fZiwgY29uZmlnLl9sb2NhbGUpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpIHx8IFtdO1xuICAgICAgICB0b2tlbkxlbiA9IHRva2Vucy5sZW5ndGg7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbkxlbjsgaSsrKSB7XG4gICAgICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgICAgICAgIHBhcnNlZElucHV0ID0gKHN0cmluZy5tYXRjaChnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykpIHx8XG4gICAgICAgICAgICAgICAgW10pWzBdO1xuICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgc2tpcHBlZCA9IHN0cmluZy5zdWJzdHIoMCwgc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpKTtcbiAgICAgICAgICAgICAgICBpZiAoc2tpcHBlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc2tpcHBlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZShcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpICsgcGFyc2VkSW5wdXQubGVuZ3RoXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoICs9IHBhcnNlZElucHV0Lmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRvbid0IHBhcnNlIGlmIGl0J3Mgbm90IGEga25vd24gdG9rZW5cbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0pIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBwYXJzZWRJbnB1dCwgY29uZmlnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLl9zdHJpY3QgJiYgIXBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIHJlbWFpbmluZyB1bnBhcnNlZCBpbnB1dCBsZW5ndGggdG8gdGhlIHN0cmluZ1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5jaGFyc0xlZnRPdmVyID1cbiAgICAgICAgICAgIHN0cmluZ0xlbmd0aCAtIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGg7XG4gICAgICAgIGlmIChzdHJpbmcubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChzdHJpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2xlYXIgXzEyaCBmbGFnIGlmIGhvdXIgaXMgPD0gMTJcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdIDw9IDEyICYmXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID09PSB0cnVlICYmXG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPiAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnBhcnNlZERhdGVQYXJ0cyA9IGNvbmZpZy5fYS5zbGljZSgwKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykubWVyaWRpZW0gPSBjb25maWcuX21lcmlkaWVtO1xuICAgICAgICAvLyBoYW5kbGUgbWVyaWRpZW1cbiAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gbWVyaWRpZW1GaXhXcmFwKFxuICAgICAgICAgICAgY29uZmlnLl9sb2NhbGUsXG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0sXG4gICAgICAgICAgICBjb25maWcuX21lcmlkaWVtXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gaGFuZGxlIGVyYVxuICAgICAgICBlcmEgPSBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lcmE7XG4gICAgICAgIGlmIChlcmEgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtZRUFSXSA9IGNvbmZpZy5fbG9jYWxlLmVyYXNDb252ZXJ0WWVhcihlcmEsIGNvbmZpZy5fYVtZRUFSXSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICAgICAgY2hlY2tPdmVyZmxvdyhjb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lcmlkaWVtRml4V3JhcChsb2NhbGUsIGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgIHZhciBpc1BtO1xuXG4gICAgICAgIGlmIChtZXJpZGllbSA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBub3RoaW5nIHRvIGRvXG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG9jYWxlLm1lcmlkaWVtSG91ciAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLm1lcmlkaWVtSG91cihob3VyLCBtZXJpZGllbSk7XG4gICAgICAgIH0gZWxzZSBpZiAobG9jYWxlLmlzUE0gIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2tcbiAgICAgICAgICAgIGlzUG0gPSBsb2NhbGUuaXNQTShtZXJpZGllbSk7XG4gICAgICAgICAgICBpZiAoaXNQbSAmJiBob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyICs9IDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc1BtICYmIGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbm90IHN1cHBvc2VkIHRvIGhhcHBlblxuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBhcnJheSBvZiBmb3JtYXQgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpIHtcbiAgICAgICAgdmFyIHRlbXBDb25maWcsXG4gICAgICAgICAgICBiZXN0TW9tZW50LFxuICAgICAgICAgICAgc2NvcmVUb0JlYXQsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgY3VycmVudFNjb3JlLFxuICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZCxcbiAgICAgICAgICAgIGJlc3RGb3JtYXRJc1ZhbGlkID0gZmFsc2UsXG4gICAgICAgICAgICBjb25maWdmTGVuID0gY29uZmlnLl9mLmxlbmd0aDtcblxuICAgICAgICBpZiAoY29uZmlnZkxlbiA9PT0gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZEZvcm1hdCA9IHRydWU7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShOYU4pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbmZpZ2ZMZW47IGkrKykge1xuICAgICAgICAgICAgY3VycmVudFNjb3JlID0gMDtcbiAgICAgICAgICAgIHZhbGlkRm9ybWF0Rm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRlbXBDb25maWcgPSBjb3B5Q29uZmlnKHt9LCBjb25maWcpO1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0ZW1wQ29uZmlnLl91c2VVVEMgPSBjb25maWcuX3VzZVVUQztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlbXBDb25maWcuX2YgPSBjb25maWcuX2ZbaV07XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KHRlbXBDb25maWcpO1xuXG4gICAgICAgICAgICBpZiAoaXNWYWxpZCh0ZW1wQ29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHZhbGlkRm9ybWF0Rm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbnkgaW5wdXQgdGhhdCB3YXMgbm90IHBhcnNlZCBhZGQgYSBwZW5hbHR5IGZvciB0aGF0IGZvcm1hdFxuICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5jaGFyc0xlZnRPdmVyO1xuXG4gICAgICAgICAgICAvL29yIHRva2Vuc1xuICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS51bnVzZWRUb2tlbnMubGVuZ3RoICogMTA7XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5zY29yZSA9IGN1cnJlbnRTY29yZTtcblxuICAgICAgICAgICAgaWYgKCFiZXN0Rm9ybWF0SXNWYWxpZCkge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2NvcmUgPCBzY29yZVRvQmVhdCB8fFxuICAgICAgICAgICAgICAgICAgICB2YWxpZEZvcm1hdEZvdW5kXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3JlVG9CZWF0ID0gY3VycmVudFNjb3JlO1xuICAgICAgICAgICAgICAgICAgICBiZXN0TW9tZW50ID0gdGVtcENvbmZpZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkRm9ybWF0Rm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RGb3JtYXRJc1ZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3JlVG9CZWF0ID0gY3VycmVudFNjb3JlO1xuICAgICAgICAgICAgICAgICAgICBiZXN0TW9tZW50ID0gdGVtcENvbmZpZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBleHRlbmQoY29uZmlnLCBiZXN0TW9tZW50IHx8IHRlbXBDb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoY29uZmlnLl9pKSxcbiAgICAgICAgICAgIGRheU9yRGF0ZSA9IGkuZGF5ID09PSB1bmRlZmluZWQgPyBpLmRhdGUgOiBpLmRheTtcbiAgICAgICAgY29uZmlnLl9hID0gbWFwKFxuICAgICAgICAgICAgW2kueWVhciwgaS5tb250aCwgZGF5T3JEYXRlLCBpLmhvdXIsIGkubWludXRlLCBpLnNlY29uZCwgaS5taWxsaXNlY29uZF0sXG4gICAgICAgICAgICBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBwYXJzZUludChvYmosIDEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVGcm9tQ29uZmlnKGNvbmZpZykge1xuICAgICAgICB2YXIgcmVzID0gbmV3IE1vbWVudChjaGVja092ZXJmbG93KHByZXBhcmVDb25maWcoY29uZmlnKSkpO1xuICAgICAgICBpZiAocmVzLl9uZXh0RGF5KSB7XG4gICAgICAgICAgICAvLyBBZGRpbmcgaXMgc21hcnQgZW5vdWdoIGFyb3VuZCBEU1RcbiAgICAgICAgICAgIHJlcy5hZGQoMSwgJ2QnKTtcbiAgICAgICAgICAgIHJlcy5fbmV4dERheSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcGFyZUNvbmZpZyhjb25maWcpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gY29uZmlnLl9pLFxuICAgICAgICAgICAgZm9ybWF0ID0gY29uZmlnLl9mO1xuXG4gICAgICAgIGNvbmZpZy5fbG9jYWxlID0gY29uZmlnLl9sb2NhbGUgfHwgZ2V0TG9jYWxlKGNvbmZpZy5fbCk7XG5cbiAgICAgICAgaWYgKGlucHV0ID09PSBudWxsIHx8IChmb3JtYXQgPT09IHVuZGVmaW5lZCAmJiBpbnB1dCA9PT0gJycpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCh7IG51bGxJbnB1dDogdHJ1ZSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25maWcuX2kgPSBpbnB1dCA9IGNvbmZpZy5fbG9jYWxlLnByZXBhcnNlKGlucHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc01vbWVudChpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3coaW5wdXQpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBpbnB1dDtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCkge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnRnJvbUlucHV0KGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzVmFsaWQoY29uZmlnKSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUlucHV0KGNvbmZpZykge1xuICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2k7XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dC52YWx1ZU9mKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9hID0gbWFwKGlucHV0LnNsaWNlKDApLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KG9iaiwgMTApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICAgICAgICAgIC8vIGZyb20gbWlsbGlzZWNvbmRzXG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgaXNVVEMpIHtcbiAgICAgICAgdmFyIGMgPSB7fTtcblxuICAgICAgICBpZiAoZm9ybWF0ID09PSB0cnVlIHx8IGZvcm1hdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHN0cmljdCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsb2NhbGUgPT09IHRydWUgfHwgbG9jYWxlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgc3RyaWN0ID0gbG9jYWxlO1xuICAgICAgICAgICAgbG9jYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgKGlzT2JqZWN0KGlucHV0KSAmJiBpc09iamVjdEVtcHR5KGlucHV0KSkgfHxcbiAgICAgICAgICAgIChpc0FycmF5KGlucHV0KSAmJiBpbnB1dC5sZW5ndGggPT09IDApXG4gICAgICAgICkge1xuICAgICAgICAgICAgaW5wdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb2JqZWN0IGNvbnN0cnVjdGlvbiBtdXN0IGJlIGRvbmUgdGhpcyB3YXkuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8xNDIzXG4gICAgICAgIGMuX2lzQU1vbWVudE9iamVjdCA9IHRydWU7XG4gICAgICAgIGMuX3VzZVVUQyA9IGMuX2lzVVRDID0gaXNVVEM7XG4gICAgICAgIGMuX2wgPSBsb2NhbGU7XG4gICAgICAgIGMuX2kgPSBpbnB1dDtcbiAgICAgICAgYy5fZiA9IGZvcm1hdDtcbiAgICAgICAgYy5fc3RyaWN0ID0gc3RyaWN0O1xuXG4gICAgICAgIHJldHVybiBjcmVhdGVGcm9tQ29uZmlnKGMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvdHlwZU1pbiA9IGRlcHJlY2F0ZShcbiAgICAgICAgICAgICdtb21lbnQoKS5taW4gaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5tYXggaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9taW4tbWF4LycsXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvdGhlciA8IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICksXG4gICAgICAgIHByb3RvdHlwZU1heCA9IGRlcHJlY2F0ZShcbiAgICAgICAgICAgICdtb21lbnQoKS5tYXggaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5taW4gaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9taW4tbWF4LycsXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvdGhlciA+IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAvLyBQaWNrIGEgbW9tZW50IG0gZnJvbSBtb21lbnRzIHNvIHRoYXQgbVtmbl0ob3RoZXIpIGlzIHRydWUgZm9yIGFsbFxuICAgIC8vIG90aGVyLiBUaGlzIHJlbGllcyBvbiB0aGUgZnVuY3Rpb24gZm4gdG8gYmUgdHJhbnNpdGl2ZS5cbiAgICAvL1xuICAgIC8vIG1vbWVudHMgc2hvdWxkIGVpdGhlciBiZSBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cyBvciBhbiBhcnJheSwgd2hvc2VcbiAgICAvLyBmaXJzdCBlbGVtZW50IGlzIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzLlxuICAgIGZ1bmN0aW9uIHBpY2tCeShmbiwgbW9tZW50cykge1xuICAgICAgICB2YXIgcmVzLCBpO1xuICAgICAgICBpZiAobW9tZW50cy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShtb21lbnRzWzBdKSkge1xuICAgICAgICAgICAgbW9tZW50cyA9IG1vbWVudHNbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtb21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzID0gbW9tZW50c1swXTtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IG1vbWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmICghbW9tZW50c1tpXS5pc1ZhbGlkKCkgfHwgbW9tZW50c1tpXVtmbl0ocmVzKSkge1xuICAgICAgICAgICAgICAgIHJlcyA9IG1vbWVudHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBVc2UgW10uc29ydCBpbnN0ZWFkP1xuICAgIGZ1bmN0aW9uIG1pbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNCZWZvcmUnLCBhcmdzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXgoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgICAgIHJldHVybiBwaWNrQnkoJ2lzQWZ0ZXInLCBhcmdzKTtcbiAgICB9XG5cbiAgICB2YXIgbm93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gRGF0ZS5ub3cgPyBEYXRlLm5vdygpIDogK25ldyBEYXRlKCk7XG4gICAgfTtcblxuICAgIHZhciBvcmRlcmluZyA9IFtcbiAgICAgICAgJ3llYXInLFxuICAgICAgICAncXVhcnRlcicsXG4gICAgICAgICdtb250aCcsXG4gICAgICAgICd3ZWVrJyxcbiAgICAgICAgJ2RheScsXG4gICAgICAgICdob3VyJyxcbiAgICAgICAgJ21pbnV0ZScsXG4gICAgICAgICdzZWNvbmQnLFxuICAgICAgICAnbWlsbGlzZWNvbmQnLFxuICAgIF07XG5cbiAgICBmdW5jdGlvbiBpc0R1cmF0aW9uVmFsaWQobSkge1xuICAgICAgICB2YXIga2V5LFxuICAgICAgICAgICAgdW5pdEhhc0RlY2ltYWwgPSBmYWxzZSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBvcmRlckxlbiA9IG9yZGVyaW5nLmxlbmd0aDtcbiAgICAgICAgZm9yIChrZXkgaW4gbSkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGhhc093blByb3AobSwga2V5KSAmJlxuICAgICAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgICAgIGluZGV4T2YuY2FsbChvcmRlcmluZywga2V5KSAhPT0gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgKG1ba2V5XSA9PSBudWxsIHx8ICFpc05hTihtW2tleV0pKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBvcmRlckxlbjsgKytpKSB7XG4gICAgICAgICAgICBpZiAobVtvcmRlcmluZ1tpXV0pIHtcbiAgICAgICAgICAgICAgICBpZiAodW5pdEhhc0RlY2ltYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBvbmx5IGFsbG93IG5vbi1pbnRlZ2VycyBmb3Igc21hbGxlc3QgdW5pdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VGbG9hdChtW29yZGVyaW5nW2ldXSkgIT09IHRvSW50KG1bb3JkZXJpbmdbaV1dKSkge1xuICAgICAgICAgICAgICAgICAgICB1bml0SGFzRGVjaW1hbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZCQxKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNWYWxpZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkJDEoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbihOYU4pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIER1cmF0aW9uKGR1cmF0aW9uKSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSBub3JtYWxpemVPYmplY3RVbml0cyhkdXJhdGlvbiksXG4gICAgICAgICAgICB5ZWFycyA9IG5vcm1hbGl6ZWRJbnB1dC55ZWFyIHx8IDAsXG4gICAgICAgICAgICBxdWFydGVycyA9IG5vcm1hbGl6ZWRJbnB1dC5xdWFydGVyIHx8IDAsXG4gICAgICAgICAgICBtb250aHMgPSBub3JtYWxpemVkSW5wdXQubW9udGggfHwgMCxcbiAgICAgICAgICAgIHdlZWtzID0gbm9ybWFsaXplZElucHV0LndlZWsgfHwgbm9ybWFsaXplZElucHV0Lmlzb1dlZWsgfHwgMCxcbiAgICAgICAgICAgIGRheXMgPSBub3JtYWxpemVkSW5wdXQuZGF5IHx8IDAsXG4gICAgICAgICAgICBob3VycyA9IG5vcm1hbGl6ZWRJbnB1dC5ob3VyIHx8IDAsXG4gICAgICAgICAgICBtaW51dGVzID0gbm9ybWFsaXplZElucHV0Lm1pbnV0ZSB8fCAwLFxuICAgICAgICAgICAgc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5zZWNvbmQgfHwgMCxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5taWxsaXNlY29uZCB8fCAwO1xuXG4gICAgICAgIHRoaXMuX2lzVmFsaWQgPSBpc0R1cmF0aW9uVmFsaWQobm9ybWFsaXplZElucHV0KTtcblxuICAgICAgICAvLyByZXByZXNlbnRhdGlvbiBmb3IgZGF0ZUFkZFJlbW92ZVxuICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgPVxuICAgICAgICAgICAgK21pbGxpc2Vjb25kcyArXG4gICAgICAgICAgICBzZWNvbmRzICogMWUzICsgLy8gMTAwMFxuICAgICAgICAgICAgbWludXRlcyAqIDZlNCArIC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgaG91cnMgKiAxMDAwICogNjAgKiA2MDsgLy91c2luZyAxMDAwICogNjAgKiA2MCBpbnN0ZWFkIG9mIDM2ZTUgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3JzIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yOTc4XG4gICAgICAgIC8vIEJlY2F1c2Ugb2YgZGF0ZUFkZFJlbW92ZSB0cmVhdHMgMjQgaG91cnMgYXMgZGlmZmVyZW50IGZyb20gYVxuICAgICAgICAvLyBkYXkgd2hlbiB3b3JraW5nIGFyb3VuZCBEU1QsIHdlIG5lZWQgdG8gc3RvcmUgdGhlbSBzZXBhcmF0ZWx5XG4gICAgICAgIHRoaXMuX2RheXMgPSArZGF5cyArIHdlZWtzICogNztcbiAgICAgICAgLy8gSXQgaXMgaW1wb3NzaWJsZSB0byB0cmFuc2xhdGUgbW9udGhzIGludG8gZGF5cyB3aXRob3V0IGtub3dpbmdcbiAgICAgICAgLy8gd2hpY2ggbW9udGhzIHlvdSBhcmUgYXJlIHRhbGtpbmcgYWJvdXQsIHNvIHdlIGhhdmUgdG8gc3RvcmVcbiAgICAgICAgLy8gaXQgc2VwYXJhdGVseS5cbiAgICAgICAgdGhpcy5fbW9udGhzID0gK21vbnRocyArIHF1YXJ0ZXJzICogMyArIHllYXJzICogMTI7XG5cbiAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuXG4gICAgICAgIHRoaXMuX2xvY2FsZSA9IGdldExvY2FsZSgpO1xuXG4gICAgICAgIHRoaXMuX2J1YmJsZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRHVyYXRpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBEdXJhdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNSb3VuZChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKC0xICogbnVtYmVyKSAqIC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvbXBhcmUgdHdvIGFycmF5cywgcmV0dXJuIHRoZSBudW1iZXIgb2YgZGlmZmVyZW5jZXNcbiAgICBmdW5jdGlvbiBjb21wYXJlQXJyYXlzKGFycmF5MSwgYXJyYXkyLCBkb250Q29udmVydCkge1xuICAgICAgICB2YXIgbGVuID0gTWF0aC5taW4oYXJyYXkxLmxlbmd0aCwgYXJyYXkyLmxlbmd0aCksXG4gICAgICAgICAgICBsZW5ndGhEaWZmID0gTWF0aC5hYnMoYXJyYXkxLmxlbmd0aCAtIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICAgICAgZGlmZnMgPSAwLFxuICAgICAgICAgICAgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKGRvbnRDb252ZXJ0ICYmIGFycmF5MVtpXSAhPT0gYXJyYXkyW2ldKSB8fFxuICAgICAgICAgICAgICAgICghZG9udENvbnZlcnQgJiYgdG9JbnQoYXJyYXkxW2ldKSAhPT0gdG9JbnQoYXJyYXkyW2ldKSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGRpZmZzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpZmZzICsgbGVuZ3RoRGlmZjtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBmdW5jdGlvbiBvZmZzZXQodG9rZW4sIHNlcGFyYXRvcikge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMudXRjT2Zmc2V0KCksXG4gICAgICAgICAgICAgICAgc2lnbiA9ICcrJztcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gLW9mZnNldDtcbiAgICAgICAgICAgICAgICBzaWduID0gJy0nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBzaWduICtcbiAgICAgICAgICAgICAgICB6ZXJvRmlsbCh+fihvZmZzZXQgLyA2MCksIDIpICtcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3IgK1xuICAgICAgICAgICAgICAgIHplcm9GaWxsKH5+b2Zmc2V0ICUgNjAsIDIpXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvZmZzZXQoJ1onLCAnOicpO1xuICAgIG9mZnNldCgnWlonLCAnJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdaJywgbWF0Y2hTaG9ydE9mZnNldCk7XG4gICAgYWRkUmVnZXhUb2tlbignWlonLCBtYXRjaFNob3J0T2Zmc2V0KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnWicsICdaWiddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl91c2VVVEMgPSB0cnVlO1xuICAgICAgICBjb25maWcuX3R6bSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gdGltZXpvbmUgY2h1bmtlclxuICAgIC8vICcrMTA6MDAnID4gWycxMCcsICAnMDAnXVxuICAgIC8vICctMTUzMCcgID4gWyctMTUnLCAnMzAnXVxuICAgIHZhciBjaHVua09mZnNldCA9IC8oW1xcK1xcLV18XFxkXFxkKS9naTtcblxuICAgIGZ1bmN0aW9uIG9mZnNldEZyb21TdHJpbmcobWF0Y2hlciwgc3RyaW5nKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gKHN0cmluZyB8fCAnJykubWF0Y2gobWF0Y2hlciksXG4gICAgICAgICAgICBjaHVuayxcbiAgICAgICAgICAgIHBhcnRzLFxuICAgICAgICAgICAgbWludXRlcztcblxuICAgICAgICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjaHVuayA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXSB8fCBbXTtcbiAgICAgICAgcGFydHMgPSAoY2h1bmsgKyAnJykubWF0Y2goY2h1bmtPZmZzZXQpIHx8IFsnLScsIDAsIDBdO1xuICAgICAgICBtaW51dGVzID0gKyhwYXJ0c1sxXSAqIDYwKSArIHRvSW50KHBhcnRzWzJdKTtcblxuICAgICAgICByZXR1cm4gbWludXRlcyA9PT0gMCA/IDAgOiBwYXJ0c1swXSA9PT0gJysnID8gbWludXRlcyA6IC1taW51dGVzO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBhIG1vbWVudCBmcm9tIGlucHV0LCB0aGF0IGlzIGxvY2FsL3V0Yy96b25lIGVxdWl2YWxlbnQgdG8gbW9kZWwuXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCBtb2RlbCkge1xuICAgICAgICB2YXIgcmVzLCBkaWZmO1xuICAgICAgICBpZiAobW9kZWwuX2lzVVRDKSB7XG4gICAgICAgICAgICByZXMgPSBtb2RlbC5jbG9uZSgpO1xuICAgICAgICAgICAgZGlmZiA9XG4gICAgICAgICAgICAgICAgKGlzTW9tZW50KGlucHV0KSB8fCBpc0RhdGUoaW5wdXQpXG4gICAgICAgICAgICAgICAgICAgID8gaW5wdXQudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgICAgIDogY3JlYXRlTG9jYWwoaW5wdXQpLnZhbHVlT2YoKSkgLSByZXMudmFsdWVPZigpO1xuICAgICAgICAgICAgLy8gVXNlIGxvdy1sZXZlbCBhcGksIGJlY2F1c2UgdGhpcyBmbiBpcyBsb3ctbGV2ZWwgYXBpLlxuICAgICAgICAgICAgcmVzLl9kLnNldFRpbWUocmVzLl9kLnZhbHVlT2YoKSArIGRpZmYpO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHJlcywgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCkubG9jYWwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERhdGVPZmZzZXQobSkge1xuICAgICAgICAvLyBPbiBGaXJlZm94LjI0IERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyBhIGZsb2F0aW5nIHBvaW50LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9wdWxsLzE4NzFcbiAgICAgICAgcmV0dXJuIC1NYXRoLnJvdW5kKG0uX2QuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gICAgfVxuXG4gICAgLy8gSE9PS1NcblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXIgYSBtb21lbnQgaXMgbXV0YXRlZC5cbiAgICAvLyBJdCBpcyBpbnRlbmRlZCB0byBrZWVwIHRoZSBvZmZzZXQgaW4gc3luYyB3aXRoIHRoZSB0aW1lem9uZS5cbiAgICBob29rcy51cGRhdGVPZmZzZXQgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIC8vIGtlZXBMb2NhbFRpbWUgPSB0cnVlIG1lYW5zIG9ubHkgY2hhbmdlIHRoZSB0aW1lem9uZSwgd2l0aG91dFxuICAgIC8vIGFmZmVjdGluZyB0aGUgbG9jYWwgaG91ci4gU28gNTozMToyNiArMDMwMCAtLVt1dGNPZmZzZXQoMiwgdHJ1ZSldLS0+XG4gICAgLy8gNTozMToyNiArMDIwMCBJdCBpcyBwb3NzaWJsZSB0aGF0IDU6MzE6MjYgZG9lc24ndCBleGlzdCB3aXRoIG9mZnNldFxuICAgIC8vICswMjAwLCBzbyB3ZSBhZGp1c3QgdGhlIHRpbWUgYXMgbmVlZGVkLCB0byBiZSB2YWxpZC5cbiAgICAvL1xuICAgIC8vIEtlZXBpbmcgdGhlIHRpbWUgYWN0dWFsbHkgYWRkcy9zdWJ0cmFjdHMgKG9uZSBob3VyKVxuICAgIC8vIGZyb20gdGhlIGFjdHVhbCByZXByZXNlbnRlZCB0aW1lLiBUaGF0IGlzIHdoeSB3ZSBjYWxsIHVwZGF0ZU9mZnNldFxuICAgIC8vIGEgc2Vjb25kIHRpbWUuIEluIGNhc2UgaXQgd2FudHMgdXMgdG8gY2hhbmdlIHRoZSBvZmZzZXQgYWdhaW5cbiAgICAvLyBfY2hhbmdlSW5Qcm9ncmVzcyA9PSB0cnVlIGNhc2UsIHRoZW4gd2UgaGF2ZSB0byBhZGp1c3QsIGJlY2F1c2VcbiAgICAvLyB0aGVyZSBpcyBubyBzdWNoIHRpbWUgaW4gdGhlIGdpdmVuIHRpbWV6b25lLlxuICAgIGZ1bmN0aW9uIGdldFNldE9mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSwga2VlcE1pbnV0ZXMpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMuX29mZnNldCB8fCAwLFxuICAgICAgICAgICAgbG9jYWxBZGp1c3Q7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGlucHV0KSA8IDE2ICYmICFrZWVwTWludXRlcykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gaW5wdXQgKiA2MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5faXNVVEMgJiYga2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIGxvY2FsQWRqdXN0ID0gZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX29mZnNldCA9IGlucHV0O1xuICAgICAgICAgICAgdGhpcy5faXNVVEMgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGxvY2FsQWRqdXN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChsb2NhbEFkanVzdCwgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvZmZzZXQgIT09IGlucHV0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFrZWVwTG9jYWxUaW1lIHx8IHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkU3VidHJhY3QoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRHVyYXRpb24oaW5wdXQgLSBvZmZzZXQsICdtJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gb2Zmc2V0IDogZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldFpvbmUoaW5wdXQsIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSAtaW5wdXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KGlucHV0LCBrZWVwTG9jYWxUaW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gLXRoaXMudXRjT2Zmc2V0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb1VUQyhrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb0xvY2FsKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzVVRDKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICAgICAgICAgIHRoaXMuX2lzVVRDID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJ0cmFjdChnZXREYXRlT2Zmc2V0KHRoaXMpLCAnbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0KCkge1xuICAgICAgICBpZiAodGhpcy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRoaXMuX3R6bSwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9pID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFyIHRab25lID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaE9mZnNldCwgdGhpcy5faSk7XG4gICAgICAgICAgICBpZiAodFpvbmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRab25lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzQWxpZ25lZEhvdXJPZmZzZXQoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0ID0gaW5wdXQgPyBjcmVhdGVMb2NhbChpbnB1dCkudXRjT2Zmc2V0KCkgOiAwO1xuXG4gICAgICAgIHJldHVybiAodGhpcy51dGNPZmZzZXQoKSAtIGlucHV0KSAlIDYwID09PSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCgwKS51dGNPZmZzZXQoKSB8fFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCg1KS51dGNPZmZzZXQoKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCgpIHtcbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9pc0RTVFNoaWZ0ZWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGMgPSB7fSxcbiAgICAgICAgICAgIG90aGVyO1xuXG4gICAgICAgIGNvcHlDb25maWcoYywgdGhpcyk7XG4gICAgICAgIGMgPSBwcmVwYXJlQ29uZmlnKGMpO1xuXG4gICAgICAgIGlmIChjLl9hKSB7XG4gICAgICAgICAgICBvdGhlciA9IGMuX2lzVVRDID8gY3JlYXRlVVRDKGMuX2EpIDogY3JlYXRlTG9jYWwoYy5fYSk7XG4gICAgICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPVxuICAgICAgICAgICAgICAgIHRoaXMuaXNWYWxpZCgpICYmIGNvbXBhcmVBcnJheXMoYy5fYSwgb3RoZXIudG9BcnJheSgpKSA+IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMb2NhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gIXRoaXMuX2lzVVRDIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVdGNPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVdGMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDICYmIHRoaXMuX29mZnNldCA9PT0gMCA6IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEFTUC5ORVQganNvbiBkYXRlIGZvcm1hdCByZWdleFxuICAgIHZhciBhc3BOZXRSZWdleCA9IC9eKC18XFwrKT8oPzooXFxkKilbLiBdKT8oXFxkKyk6KFxcZCspKD86OihcXGQrKShcXC5cXGQqKT8pPyQvLFxuICAgICAgICAvLyBmcm9tIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvY2xvc3VyZV9nb29nX2RhdGVfZGF0ZS5qcy5zb3VyY2UuaHRtbFxuICAgICAgICAvLyBzb21ld2hhdCBtb3JlIGluIGxpbmUgd2l0aCA0LjQuMy4yIDIwMDQgc3BlYywgYnV0IGFsbG93cyBkZWNpbWFsIGFueXdoZXJlXG4gICAgICAgIC8vIGFuZCBmdXJ0aGVyIG1vZGlmaWVkIHRvIGFsbG93IGZvciBzdHJpbmdzIGNvbnRhaW5pbmcgYm90aCB3ZWVrIGFuZCBkYXlcbiAgICAgICAgaXNvUmVnZXggPVxuICAgICAgICAgICAgL14oLXxcXCspP1AoPzooWy0rXT9bMC05LC5dKilZKT8oPzooWy0rXT9bMC05LC5dKilNKT8oPzooWy0rXT9bMC05LC5dKilXKT8oPzooWy0rXT9bMC05LC5dKilEKT8oPzpUKD86KFstK10/WzAtOSwuXSopSCk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopUyk/KT8kLztcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUR1cmF0aW9uKGlucHV0LCBrZXkpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gaW5wdXQsXG4gICAgICAgICAgICAvLyBtYXRjaGluZyBhZ2FpbnN0IHJlZ2V4cCBpcyBleHBlbnNpdmUsIGRvIGl0IG9uIGRlbWFuZFxuICAgICAgICAgICAgbWF0Y2ggPSBudWxsLFxuICAgICAgICAgICAgc2lnbixcbiAgICAgICAgICAgIHJldCxcbiAgICAgICAgICAgIGRpZmZSZXM7XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBtczogaW5wdXQuX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgICAgICBkOiBpbnB1dC5fZGF5cyxcbiAgICAgICAgICAgICAgICBNOiBpbnB1dC5fbW9udGhzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkgfHwgIWlzTmFOKCtpbnB1dCkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb25ba2V5XSA9ICtpbnB1dDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24ubWlsbGlzZWNvbmRzID0gK2lucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKChtYXRjaCA9IGFzcE5ldFJlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICAgICAgc2lnbiA9IG1hdGNoWzFdID09PSAnLScgPyAtMSA6IDE7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgICAgIGQ6IHRvSW50KG1hdGNoW0RBVEVdKSAqIHNpZ24sXG4gICAgICAgICAgICAgICAgaDogdG9JbnQobWF0Y2hbSE9VUl0pICogc2lnbixcbiAgICAgICAgICAgICAgICBtOiB0b0ludChtYXRjaFtNSU5VVEVdKSAqIHNpZ24sXG4gICAgICAgICAgICAgICAgczogdG9JbnQobWF0Y2hbU0VDT05EXSkgKiBzaWduLFxuICAgICAgICAgICAgICAgIG1zOiB0b0ludChhYnNSb3VuZChtYXRjaFtNSUxMSVNFQ09ORF0gKiAxMDAwKSkgKiBzaWduLCAvLyB0aGUgbWlsbGlzZWNvbmQgZGVjaW1hbCBwb2ludCBpcyBpbmNsdWRlZCBpbiB0aGUgbWF0Y2hcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoKG1hdGNoID0gaXNvUmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgICAgICBzaWduID0gbWF0Y2hbMV0gPT09ICctJyA/IC0xIDogMTtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIHk6IHBhcnNlSXNvKG1hdGNoWzJdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBNOiBwYXJzZUlzbyhtYXRjaFszXSwgc2lnbiksXG4gICAgICAgICAgICAgICAgdzogcGFyc2VJc28obWF0Y2hbNF0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIGQ6IHBhcnNlSXNvKG1hdGNoWzVdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBoOiBwYXJzZUlzbyhtYXRjaFs2XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgbTogcGFyc2VJc28obWF0Y2hbN10sIHNpZ24pLFxuICAgICAgICAgICAgICAgIHM6IHBhcnNlSXNvKG1hdGNoWzhdLCBzaWduKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoZHVyYXRpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gY2hlY2tzIGZvciBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIHR5cGVvZiBkdXJhdGlvbiA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICgnZnJvbScgaW4gZHVyYXRpb24gfHwgJ3RvJyBpbiBkdXJhdGlvbilcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBkaWZmUmVzID0gbW9tZW50c0RpZmZlcmVuY2UoXG4gICAgICAgICAgICAgICAgY3JlYXRlTG9jYWwoZHVyYXRpb24uZnJvbSksXG4gICAgICAgICAgICAgICAgY3JlYXRlTG9jYWwoZHVyYXRpb24udG8pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgZHVyYXRpb24ubXMgPSBkaWZmUmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIGR1cmF0aW9uLk0gPSBkaWZmUmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldCA9IG5ldyBEdXJhdGlvbihkdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfbG9jYWxlJykpIHtcbiAgICAgICAgICAgIHJldC5fbG9jYWxlID0gaW5wdXQuX2xvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSAmJiBoYXNPd25Qcm9wKGlucHV0LCAnX2lzVmFsaWQnKSkge1xuICAgICAgICAgICAgcmV0Ll9pc1ZhbGlkID0gaW5wdXQuX2lzVmFsaWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIGNyZWF0ZUR1cmF0aW9uLmZuID0gRHVyYXRpb24ucHJvdG90eXBlO1xuICAgIGNyZWF0ZUR1cmF0aW9uLmludmFsaWQgPSBjcmVhdGVJbnZhbGlkJDE7XG5cbiAgICBmdW5jdGlvbiBwYXJzZUlzbyhpbnAsIHNpZ24pIHtcbiAgICAgICAgLy8gV2UnZCBub3JtYWxseSB1c2Ugfn5pbnAgZm9yIHRoaXMsIGJ1dCB1bmZvcnR1bmF0ZWx5IGl0IGFsc29cbiAgICAgICAgLy8gY29udmVydHMgZmxvYXRzIHRvIGludHMuXG4gICAgICAgIC8vIGlucCBtYXkgYmUgdW5kZWZpbmVkLCBzbyBjYXJlZnVsIGNhbGxpbmcgcmVwbGFjZSBvbiBpdC5cbiAgICAgICAgdmFyIHJlcyA9IGlucCAmJiBwYXJzZUZsb2F0KGlucC5yZXBsYWNlKCcsJywgJy4nKSk7XG4gICAgICAgIC8vIGFwcGx5IHNpZ24gd2hpbGUgd2UncmUgYXQgaXRcbiAgICAgICAgcmV0dXJuIChpc05hTihyZXMpID8gMCA6IHJlcykgKiBzaWduO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlcyA9IHt9O1xuXG4gICAgICAgIHJlcy5tb250aHMgPVxuICAgICAgICAgICAgb3RoZXIubW9udGgoKSAtIGJhc2UubW9udGgoKSArIChvdGhlci55ZWFyKCkgLSBiYXNlLnllYXIoKSkgKiAxMjtcbiAgICAgICAgaWYgKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKS5pc0FmdGVyKG90aGVyKSkge1xuICAgICAgICAgICAgLS1yZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzLm1pbGxpc2Vjb25kcyA9ICtvdGhlciAtICtiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJyk7XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzO1xuICAgICAgICBpZiAoIShiYXNlLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBtaWxsaXNlY29uZHM6IDAsIG1vbnRoczogMCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgb3RoZXIgPSBjbG9uZVdpdGhPZmZzZXQob3RoZXIsIGJhc2UpO1xuICAgICAgICBpZiAoYmFzZS5pc0JlZm9yZShvdGhlcikpIHtcbiAgICAgICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShvdGhlciwgYmFzZSk7XG4gICAgICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gLXJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgICAgICByZXMubW9udGhzID0gLXJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIFRPRE86IHJlbW92ZSAnbmFtZScgYXJnIGFmdGVyIGRlcHJlY2F0aW9uIGlzIHJlbW92ZWRcbiAgICBmdW5jdGlvbiBjcmVhdGVBZGRlcihkaXJlY3Rpb24sIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWwsIHBlcmlvZCkge1xuICAgICAgICAgICAgdmFyIGR1ciwgdG1wO1xuICAgICAgICAgICAgLy9pbnZlcnQgdGhlIGFyZ3VtZW50cywgYnV0IGNvbXBsYWluIGFib3V0IGl0XG4gICAgICAgICAgICBpZiAocGVyaW9kICE9PSBudWxsICYmICFpc05hTigrcGVyaW9kKSkge1xuICAgICAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZShcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgJ21vbWVudCgpLicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnKHBlcmlvZCwgbnVtYmVyKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIG1vbWVudCgpLicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnKG51bWJlciwgcGVyaW9kKS4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvYWRkLWludmVydGVkLXBhcmFtLyBmb3IgbW9yZSBpbmZvLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRtcCA9IHZhbDtcbiAgICAgICAgICAgICAgICB2YWwgPSBwZXJpb2Q7XG4gICAgICAgICAgICAgICAgcGVyaW9kID0gdG1wO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkdXIgPSBjcmVhdGVEdXJhdGlvbih2YWwsIHBlcmlvZCk7XG4gICAgICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBkdXIsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRTdWJ0cmFjdChtb20sIGR1cmF0aW9uLCBpc0FkZGluZywgdXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgZGF5cyA9IGFic1JvdW5kKGR1cmF0aW9uLl9kYXlzKSxcbiAgICAgICAgICAgIG1vbnRocyA9IGFic1JvdW5kKGR1cmF0aW9uLl9tb250aHMpO1xuXG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZU9mZnNldCA9IHVwZGF0ZU9mZnNldCA9PSBudWxsID8gdHJ1ZSA6IHVwZGF0ZU9mZnNldDtcblxuICAgICAgICBpZiAobW9udGhzKSB7XG4gICAgICAgICAgICBzZXRNb250aChtb20sIGdldChtb20sICdNb250aCcpICsgbW9udGhzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXlzKSB7XG4gICAgICAgICAgICBzZXQkMShtb20sICdEYXRlJywgZ2V0KG1vbSwgJ0RhdGUnKSArIGRheXMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbGxpc2Vjb25kcykge1xuICAgICAgICAgICAgbW9tLl9kLnNldFRpbWUobW9tLl9kLnZhbHVlT2YoKSArIG1pbGxpc2Vjb25kcyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQobW9tLCBkYXlzIHx8IG1vbnRocyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYWRkID0gY3JlYXRlQWRkZXIoMSwgJ2FkZCcpLFxuICAgICAgICBzdWJ0cmFjdCA9IGNyZWF0ZUFkZGVyKC0xLCAnc3VidHJhY3QnKTtcblxuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IGlucHV0IGluc3RhbmNlb2YgU3RyaW5nO1xuICAgIH1cblxuICAgIC8vIHR5cGUgTW9tZW50SW5wdXQgPSBNb21lbnQgfCBEYXRlIHwgc3RyaW5nIHwgbnVtYmVyIHwgKG51bWJlciB8IHN0cmluZylbXSB8IE1vbWVudElucHV0T2JqZWN0IHwgdm9pZDsgLy8gbnVsbCB8IHVuZGVmaW5lZFxuICAgIGZ1bmN0aW9uIGlzTW9tZW50SW5wdXQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlzTW9tZW50KGlucHV0KSB8fFxuICAgICAgICAgICAgaXNEYXRlKGlucHV0KSB8fFxuICAgICAgICAgICAgaXNTdHJpbmcoaW5wdXQpIHx8XG4gICAgICAgICAgICBpc051bWJlcihpbnB1dCkgfHxcbiAgICAgICAgICAgIGlzTnVtYmVyT3JTdHJpbmdBcnJheShpbnB1dCkgfHxcbiAgICAgICAgICAgIGlzTW9tZW50SW5wdXRPYmplY3QoaW5wdXQpIHx8XG4gICAgICAgICAgICBpbnB1dCA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgaW5wdXQgPT09IHVuZGVmaW5lZFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTW9tZW50SW5wdXRPYmplY3QoaW5wdXQpIHtcbiAgICAgICAgdmFyIG9iamVjdFRlc3QgPSBpc09iamVjdChpbnB1dCkgJiYgIWlzT2JqZWN0RW1wdHkoaW5wdXQpLFxuICAgICAgICAgICAgcHJvcGVydHlUZXN0ID0gZmFsc2UsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzID0gW1xuICAgICAgICAgICAgICAgICd5ZWFycycsXG4gICAgICAgICAgICAgICAgJ3llYXInLFxuICAgICAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICAgICAnbW9udGhzJyxcbiAgICAgICAgICAgICAgICAnbW9udGgnLFxuICAgICAgICAgICAgICAgICdNJyxcbiAgICAgICAgICAgICAgICAnZGF5cycsXG4gICAgICAgICAgICAgICAgJ2RheScsXG4gICAgICAgICAgICAgICAgJ2QnLFxuICAgICAgICAgICAgICAgICdkYXRlcycsXG4gICAgICAgICAgICAgICAgJ2RhdGUnLFxuICAgICAgICAgICAgICAgICdEJyxcbiAgICAgICAgICAgICAgICAnaG91cnMnLFxuICAgICAgICAgICAgICAgICdob3VyJyxcbiAgICAgICAgICAgICAgICAnaCcsXG4gICAgICAgICAgICAgICAgJ21pbnV0ZXMnLFxuICAgICAgICAgICAgICAgICdtaW51dGUnLFxuICAgICAgICAgICAgICAgICdtJyxcbiAgICAgICAgICAgICAgICAnc2Vjb25kcycsXG4gICAgICAgICAgICAgICAgJ3NlY29uZCcsXG4gICAgICAgICAgICAgICAgJ3MnLFxuICAgICAgICAgICAgICAgICdtaWxsaXNlY29uZHMnLFxuICAgICAgICAgICAgICAgICdtaWxsaXNlY29uZCcsXG4gICAgICAgICAgICAgICAgJ21zJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcHJvcGVydHksXG4gICAgICAgICAgICBwcm9wZXJ0eUxlbiA9IHByb3BlcnRpZXMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcm9wZXJ0eUxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICBwcm9wZXJ0eVRlc3QgPSBwcm9wZXJ0eVRlc3QgfHwgaGFzT3duUHJvcChpbnB1dCwgcHJvcGVydHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9iamVjdFRlc3QgJiYgcHJvcGVydHlUZXN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTnVtYmVyT3JTdHJpbmdBcnJheShpbnB1dCkge1xuICAgICAgICB2YXIgYXJyYXlUZXN0ID0gaXNBcnJheShpbnB1dCksXG4gICAgICAgICAgICBkYXRhVHlwZVRlc3QgPSBmYWxzZTtcbiAgICAgICAgaWYgKGFycmF5VGVzdCkge1xuICAgICAgICAgICAgZGF0YVR5cGVUZXN0ID1cbiAgICAgICAgICAgICAgICBpbnB1dC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFpc051bWJlcihpdGVtKSAmJiBpc1N0cmluZyhpbnB1dCk7XG4gICAgICAgICAgICAgICAgfSkubGVuZ3RoID09PSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheVRlc3QgJiYgZGF0YVR5cGVUZXN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQ2FsZW5kYXJTcGVjKGlucHV0KSB7XG4gICAgICAgIHZhciBvYmplY3RUZXN0ID0gaXNPYmplY3QoaW5wdXQpICYmICFpc09iamVjdEVtcHR5KGlucHV0KSxcbiAgICAgICAgICAgIHByb3BlcnR5VGVzdCA9IGZhbHNlLFxuICAgICAgICAgICAgcHJvcGVydGllcyA9IFtcbiAgICAgICAgICAgICAgICAnc2FtZURheScsXG4gICAgICAgICAgICAgICAgJ25leHREYXknLFxuICAgICAgICAgICAgICAgICdsYXN0RGF5JyxcbiAgICAgICAgICAgICAgICAnbmV4dFdlZWsnLFxuICAgICAgICAgICAgICAgICdsYXN0V2VlaycsXG4gICAgICAgICAgICAgICAgJ3NhbWVFbHNlJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcHJvcGVydHk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHByb3BlcnRpZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHByb3BlcnR5ID0gcHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgIHByb3BlcnR5VGVzdCA9IHByb3BlcnR5VGVzdCB8fCBoYXNPd25Qcm9wKGlucHV0LCBwcm9wZXJ0eSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2JqZWN0VGVzdCAmJiBwcm9wZXJ0eVRlc3Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q2FsZW5kYXJGb3JtYXQobXlNb21lbnQsIG5vdykge1xuICAgICAgICB2YXIgZGlmZiA9IG15TW9tZW50LmRpZmYobm93LCAnZGF5cycsIHRydWUpO1xuICAgICAgICByZXR1cm4gZGlmZiA8IC02XG4gICAgICAgICAgICA/ICdzYW1lRWxzZSdcbiAgICAgICAgICAgIDogZGlmZiA8IC0xXG4gICAgICAgICAgICA/ICdsYXN0V2VlaydcbiAgICAgICAgICAgIDogZGlmZiA8IDBcbiAgICAgICAgICAgID8gJ2xhc3REYXknXG4gICAgICAgICAgICA6IGRpZmYgPCAxXG4gICAgICAgICAgICA/ICdzYW1lRGF5J1xuICAgICAgICAgICAgOiBkaWZmIDwgMlxuICAgICAgICAgICAgPyAnbmV4dERheSdcbiAgICAgICAgICAgIDogZGlmZiA8IDdcbiAgICAgICAgICAgID8gJ25leHRXZWVrJ1xuICAgICAgICAgICAgOiAnc2FtZUVsc2UnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGVuZGFyJDEodGltZSwgZm9ybWF0cykge1xuICAgICAgICAvLyBTdXBwb3J0IGZvciBzaW5nbGUgcGFyYW1ldGVyLCBmb3JtYXRzIG9ubHkgb3ZlcmxvYWQgdG8gdGhlIGNhbGVuZGFyIGZ1bmN0aW9uXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBpZiAoIWFyZ3VtZW50c1swXSkge1xuICAgICAgICAgICAgICAgIHRpbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNNb21lbnRJbnB1dChhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgICAgICAgICAgdGltZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgICAgICBmb3JtYXRzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0NhbGVuZGFyU3BlYyhhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0cyA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgICAgICB0aW1lID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFdlIHdhbnQgdG8gY29tcGFyZSB0aGUgc3RhcnQgb2YgdG9kYXksIHZzIHRoaXMuXG4gICAgICAgIC8vIEdldHRpbmcgc3RhcnQtb2YtdG9kYXkgZGVwZW5kcyBvbiB3aGV0aGVyIHdlJ3JlIGxvY2FsL3V0Yy9vZmZzZXQgb3Igbm90LlxuICAgICAgICB2YXIgbm93ID0gdGltZSB8fCBjcmVhdGVMb2NhbCgpLFxuICAgICAgICAgICAgc29kID0gY2xvbmVXaXRoT2Zmc2V0KG5vdywgdGhpcykuc3RhcnRPZignZGF5JyksXG4gICAgICAgICAgICBmb3JtYXQgPSBob29rcy5jYWxlbmRhckZvcm1hdCh0aGlzLCBzb2QpIHx8ICdzYW1lRWxzZScsXG4gICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgIGZvcm1hdHMgJiZcbiAgICAgICAgICAgICAgICAoaXNGdW5jdGlvbihmb3JtYXRzW2Zvcm1hdF0pXG4gICAgICAgICAgICAgICAgICAgID8gZm9ybWF0c1tmb3JtYXRdLmNhbGwodGhpcywgbm93KVxuICAgICAgICAgICAgICAgICAgICA6IGZvcm1hdHNbZm9ybWF0XSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KFxuICAgICAgICAgICAgb3V0cHV0IHx8IHRoaXMubG9jYWxlRGF0YSgpLmNhbGVuZGFyKGZvcm1hdCwgdGhpcywgY3JlYXRlTG9jYWwobm93KSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQodGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBZnRlcihpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJztcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPiBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbElucHV0LnZhbHVlT2YoKSA8IHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0JlZm9yZShpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJztcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNCZXR3ZWVuKGZyb20sIHRvLCB1bml0cywgaW5jbHVzaXZpdHkpIHtcbiAgICAgICAgdmFyIGxvY2FsRnJvbSA9IGlzTW9tZW50KGZyb20pID8gZnJvbSA6IGNyZWF0ZUxvY2FsKGZyb20pLFxuICAgICAgICAgICAgbG9jYWxUbyA9IGlzTW9tZW50KHRvKSA/IHRvIDogY3JlYXRlTG9jYWwodG8pO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbEZyb20uaXNWYWxpZCgpICYmIGxvY2FsVG8uaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGluY2x1c2l2aXR5ID0gaW5jbHVzaXZpdHkgfHwgJygpJztcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChpbmNsdXNpdml0eVswXSA9PT0gJygnXG4gICAgICAgICAgICAgICAgPyB0aGlzLmlzQWZ0ZXIobG9jYWxGcm9tLCB1bml0cylcbiAgICAgICAgICAgICAgICA6ICF0aGlzLmlzQmVmb3JlKGxvY2FsRnJvbSwgdW5pdHMpKSAmJlxuICAgICAgICAgICAgKGluY2x1c2l2aXR5WzFdID09PSAnKSdcbiAgICAgICAgICAgICAgICA/IHRoaXMuaXNCZWZvcmUobG9jYWxUbywgdW5pdHMpXG4gICAgICAgICAgICAgICAgOiAhdGhpcy5pc0FmdGVyKGxvY2FsVG8sIHVuaXRzKSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWUoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCksXG4gICAgICAgICAgICBpbnB1dE1zO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA9PT0gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnB1dE1zID0gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCkgPD0gaW5wdXRNcyAmJlxuICAgICAgICAgICAgICAgIGlucHV0TXMgPD0gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWVPckFmdGVyKGlucHV0LCB1bml0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQWZ0ZXIoaW5wdXQsIHVuaXRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWVPckJlZm9yZShpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0JlZm9yZShpbnB1dCwgdW5pdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpZmYoaW5wdXQsIHVuaXRzLCBhc0Zsb2F0KSB7XG4gICAgICAgIHZhciB0aGF0LCB6b25lRGVsdGEsIG91dHB1dDtcblxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhhdCA9IGNsb25lV2l0aE9mZnNldChpbnB1dCwgdGhpcyk7XG5cbiAgICAgICAgaWYgKCF0aGF0LmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHpvbmVEZWx0YSA9ICh0aGF0LnV0Y09mZnNldCgpIC0gdGhpcy51dGNPZmZzZXQoKSkgKiA2ZTQ7XG5cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gMTI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gMztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDFlMztcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gMTAwMFxuICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gNmU0O1xuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyAxMDAwICogNjBcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAzNmU1O1xuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MFxuICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQgLSB6b25lRGVsdGEpIC8gODY0ZTU7XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwICogMjQsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCAtIHpvbmVEZWx0YSkgLyA2MDQ4ZTU7XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwICogMjQgKiA3LCBuZWdhdGUgZHN0XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIG91dHB1dCA9IHRoaXMgLSB0aGF0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFzRmxvYXQgPyBvdXRwdXQgOiBhYnNGbG9vcihvdXRwdXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoRGlmZihhLCBiKSB7XG4gICAgICAgIGlmIChhLmRhdGUoKSA8IGIuZGF0ZSgpKSB7XG4gICAgICAgICAgICAvLyBlbmQtb2YtbW9udGggY2FsY3VsYXRpb25zIHdvcmsgY29ycmVjdCB3aGVuIHRoZSBzdGFydCBtb250aCBoYXMgbW9yZVxuICAgICAgICAgICAgLy8gZGF5cyB0aGFuIHRoZSBlbmQgbW9udGguXG4gICAgICAgICAgICByZXR1cm4gLW1vbnRoRGlmZihiLCBhKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBkaWZmZXJlbmNlIGluIG1vbnRoc1xuICAgICAgICB2YXIgd2hvbGVNb250aERpZmYgPSAoYi55ZWFyKCkgLSBhLnllYXIoKSkgKiAxMiArIChiLm1vbnRoKCkgLSBhLm1vbnRoKCkpLFxuICAgICAgICAgICAgLy8gYiBpcyBpbiAoYW5jaG9yIC0gMSBtb250aCwgYW5jaG9yICsgMSBtb250aClcbiAgICAgICAgICAgIGFuY2hvciA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYsICdtb250aHMnKSxcbiAgICAgICAgICAgIGFuY2hvcjIsXG4gICAgICAgICAgICBhZGp1c3Q7XG5cbiAgICAgICAgaWYgKGIgLSBhbmNob3IgPCAwKSB7XG4gICAgICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiAtIDEsICdtb250aHMnKTtcbiAgICAgICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yIC0gYW5jaG9yMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiArIDEsICdtb250aHMnKTtcbiAgICAgICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yMiAtIGFuY2hvcik7XG4gICAgICAgIH1cblxuICAgICAgICAvL2NoZWNrIGZvciBuZWdhdGl2ZSB6ZXJvLCByZXR1cm4gemVybyBpZiBuZWdhdGl2ZSB6ZXJvXG4gICAgICAgIHJldHVybiAtKHdob2xlTW9udGhEaWZmICsgYWRqdXN0KSB8fCAwO1xuICAgIH1cblxuICAgIGhvb2tzLmRlZmF1bHRGb3JtYXQgPSAnWVlZWS1NTS1ERFRISDptbTpzc1onO1xuICAgIGhvb2tzLmRlZmF1bHRGb3JtYXRVdGMgPSAnWVlZWS1NTS1ERFRISDptbTpzc1taXSc7XG5cbiAgICBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5sb2NhbGUoJ2VuJykuZm9ybWF0KCdkZGQgTU1NIEREIFlZWVkgSEg6bW06c3MgW0dNVF1aWicpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSVNPU3RyaW5nKGtlZXBPZmZzZXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHV0YyA9IGtlZXBPZmZzZXQgIT09IHRydWUsXG4gICAgICAgICAgICBtID0gdXRjID8gdGhpcy5jbG9uZSgpLnV0YygpIDogdGhpcztcbiAgICAgICAgaWYgKG0ueWVhcigpIDwgMCB8fCBtLnllYXIoKSA+IDk5OTkpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQoXG4gICAgICAgICAgICAgICAgbSxcbiAgICAgICAgICAgICAgICB1dGNcbiAgICAgICAgICAgICAgICAgICAgPyAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJ1xuICAgICAgICAgICAgICAgICAgICA6ICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NaJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNGdW5jdGlvbihEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZykpIHtcbiAgICAgICAgICAgIC8vIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBpcyB+NTB4IGZhc3RlciwgdXNlIGl0IHdoZW4gd2UgY2FuXG4gICAgICAgICAgICBpZiAodXRjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9EYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpICsgdGhpcy51dGNPZmZzZXQoKSAqIDYwICogMTAwMClcbiAgICAgICAgICAgICAgICAgICAgLnRvSVNPU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoJ1onLCBmb3JtYXRNb21lbnQobSwgJ1onKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChcbiAgICAgICAgICAgIG0sXG4gICAgICAgICAgICB1dGMgPyAnWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXScgOiAnWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1onXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgaHVtYW4gcmVhZGFibGUgcmVwcmVzZW50YXRpb24gb2YgYSBtb21lbnQgdGhhdCBjYW5cbiAgICAgKiBhbHNvIGJlIGV2YWx1YXRlZCB0byBnZXQgYSBuZXcgbW9tZW50IHdoaWNoIGlzIHRoZSBzYW1lXG4gICAgICpcbiAgICAgKiBAbGluayBodHRwczovL25vZGVqcy5vcmcvZGlzdC9sYXRlc3QvZG9jcy9hcGkvdXRpbC5odG1sI3V0aWxfY3VzdG9tX2luc3BlY3RfZnVuY3Rpb25fb25fb2JqZWN0c1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiAnbW9tZW50LmludmFsaWQoLyogJyArIHRoaXMuX2kgKyAnICovKSc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZ1bmMgPSAnbW9tZW50JyxcbiAgICAgICAgICAgIHpvbmUgPSAnJyxcbiAgICAgICAgICAgIHByZWZpeCxcbiAgICAgICAgICAgIHllYXIsXG4gICAgICAgICAgICBkYXRldGltZSxcbiAgICAgICAgICAgIHN1ZmZpeDtcbiAgICAgICAgaWYgKCF0aGlzLmlzTG9jYWwoKSkge1xuICAgICAgICAgICAgZnVuYyA9IHRoaXMudXRjT2Zmc2V0KCkgPT09IDAgPyAnbW9tZW50LnV0YycgOiAnbW9tZW50LnBhcnNlWm9uZSc7XG4gICAgICAgICAgICB6b25lID0gJ1onO1xuICAgICAgICB9XG4gICAgICAgIHByZWZpeCA9ICdbJyArIGZ1bmMgKyAnKFwiXSc7XG4gICAgICAgIHllYXIgPSAwIDw9IHRoaXMueWVhcigpICYmIHRoaXMueWVhcigpIDw9IDk5OTkgPyAnWVlZWScgOiAnWVlZWVlZJztcbiAgICAgICAgZGF0ZXRpbWUgPSAnLU1NLUREW1RdSEg6bW06c3MuU1NTJztcbiAgICAgICAgc3VmZml4ID0gem9uZSArICdbXCIpXSc7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KHByZWZpeCArIHllYXIgKyBkYXRldGltZSArIHN1ZmZpeCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0KGlucHV0U3RyaW5nKSB7XG4gICAgICAgIGlmICghaW5wdXRTdHJpbmcpIHtcbiAgICAgICAgICAgIGlucHV0U3RyaW5nID0gdGhpcy5pc1V0YygpXG4gICAgICAgICAgICAgICAgPyBob29rcy5kZWZhdWx0Rm9ybWF0VXRjXG4gICAgICAgICAgICAgICAgOiBob29rcy5kZWZhdWx0Rm9ybWF0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBvdXRwdXQgPSBmb3JtYXRNb21lbnQodGhpcywgaW5wdXRTdHJpbmcpO1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkucG9zdGZvcm1hdChvdXRwdXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb20odGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHwgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7IHRvOiB0aGlzLCBmcm9tOiB0aW1lIH0pXG4gICAgICAgICAgICAgICAgLmxvY2FsZSh0aGlzLmxvY2FsZSgpKVxuICAgICAgICAgICAgICAgIC5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb21Ob3cod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tKGNyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8IGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oeyBmcm9tOiB0aGlzLCB0bzogdGltZSB9KVxuICAgICAgICAgICAgICAgIC5sb2NhbGUodGhpcy5sb2NhbGUoKSlcbiAgICAgICAgICAgICAgICAuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b05vdyh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvKGNyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cblxuICAgIC8vIElmIHBhc3NlZCBhIGxvY2FsZSBrZXksIGl0IHdpbGwgc2V0IHRoZSBsb2NhbGUgZm9yIHRoaXNcbiAgICAvLyBpbnN0YW5jZS4gIE90aGVyd2lzZSwgaXQgd2lsbCByZXR1cm4gdGhlIGxvY2FsZSBjb25maWd1cmF0aW9uXG4gICAgLy8gdmFyaWFibGVzIGZvciB0aGlzIGluc3RhbmNlLlxuICAgIGZ1bmN0aW9uIGxvY2FsZShrZXkpIHtcbiAgICAgICAgdmFyIG5ld0xvY2FsZURhdGE7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlLl9hYmJyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3TG9jYWxlRGF0YSA9IGdldExvY2FsZShrZXkpO1xuICAgICAgICAgICAgaWYgKG5ld0xvY2FsZURhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvY2FsZSA9IG5ld0xvY2FsZURhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsYW5nID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkubGFuZygpIGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQsIHVzZSBtb21lbnQoKS5sb2NhbGVEYXRhKCkgdG8gZ2V0IHRoZSBsYW5ndWFnZSBjb25maWd1cmF0aW9uLiBVc2UgbW9tZW50KCkubG9jYWxlKCkgdG8gY2hhbmdlIGxhbmd1YWdlcy4nLFxuICAgICAgICBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZURhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGU7XG4gICAgfVxuXG4gICAgdmFyIE1TX1BFUl9TRUNPTkQgPSAxMDAwLFxuICAgICAgICBNU19QRVJfTUlOVVRFID0gNjAgKiBNU19QRVJfU0VDT05ELFxuICAgICAgICBNU19QRVJfSE9VUiA9IDYwICogTVNfUEVSX01JTlVURSxcbiAgICAgICAgTVNfUEVSXzQwMF9ZRUFSUyA9ICgzNjUgKiA0MDAgKyA5NykgKiAyNCAqIE1TX1BFUl9IT1VSO1xuXG4gICAgLy8gYWN0dWFsIG1vZHVsbyAtIGhhbmRsZXMgbmVnYXRpdmUgbnVtYmVycyAoZm9yIGRhdGVzIGJlZm9yZSAxOTcwKTpcbiAgICBmdW5jdGlvbiBtb2QkMShkaXZpZGVuZCwgZGl2aXNvcikge1xuICAgICAgICByZXR1cm4gKChkaXZpZGVuZCAlIGRpdmlzb3IpICsgZGl2aXNvcikgJSBkaXZpc29yO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsU3RhcnRPZkRhdGUoeSwgbSwgZCkge1xuICAgICAgICAvLyB0aGUgZGF0ZSBjb25zdHJ1Y3RvciByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHkgKyA0MDAsIG0sIGQpIC0gTVNfUEVSXzQwMF9ZRUFSUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh5LCBtLCBkKS52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1dGNTdGFydE9mRGF0ZSh5LCBtLCBkKSB7XG4gICAgICAgIC8vIERhdGUuVVRDIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5VVEMoeSArIDQwMCwgbSwgZCkgLSBNU19QRVJfNDAwX1lFQVJTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIERhdGUuVVRDKHksIG0sIGQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RhcnRPZih1bml0cykge1xuICAgICAgICB2YXIgdGltZSwgc3RhcnRPZkRhdGU7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAodW5pdHMgPT09IHVuZGVmaW5lZCB8fCB1bml0cyA9PT0gJ21pbGxpc2Vjb25kJyB8fCAhdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnRPZkRhdGUgPSB0aGlzLl9pc1VUQyA/IHV0Y1N0YXJ0T2ZEYXRlIDogbG9jYWxTdGFydE9mRGF0ZTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIDAsIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpIC0gKHRoaXMubW9udGgoKSAlIDMpLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgpIC0gdGhpcy53ZWVrZGF5KClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaXNvV2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtICh0aGlzLmlzb1dlZWtkYXkoKSAtIDEpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEoXG4gICAgICAgICAgICAgICAgICAgIHRpbWUgKyAodGhpcy5faXNVVEMgPyAwIDogdGhpcy51dGNPZmZzZXQoKSAqIE1TX1BFUl9NSU5VVEUpLFxuICAgICAgICAgICAgICAgICAgICBNU19QRVJfSE9VUlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKHRpbWUsIE1TX1BFUl9NSU5VVEUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMSh0aW1lLCBNU19QRVJfU0VDT05EKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2Quc2V0VGltZSh0aW1lKTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRPZih1bml0cykge1xuICAgICAgICB2YXIgdGltZSwgc3RhcnRPZkRhdGU7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAodW5pdHMgPT09IHVuZGVmaW5lZCB8fCB1bml0cyA9PT0gJ21pbGxpc2Vjb25kJyB8fCAhdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnRPZkRhdGUgPSB0aGlzLl9pc1VUQyA/IHV0Y1N0YXJ0T2ZEYXRlIDogbG9jYWxTdGFydE9mRGF0ZTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCkgKyAxLCAwLCAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICB0aW1lID1cbiAgICAgICAgICAgICAgICAgICAgc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSAtICh0aGlzLm1vbnRoKCkgJSAzKSArIDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICAgICkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpICsgMSwgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtIHRoaXMud2Vla2RheSgpICsgN1xuICAgICAgICAgICAgICAgICAgICApIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPVxuICAgICAgICAgICAgICAgICAgICBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgLSAodGhpcy5pc29XZWVrZGF5KCkgLSAxKSArIDdcbiAgICAgICAgICAgICAgICAgICAgKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpICsgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz1cbiAgICAgICAgICAgICAgICAgICAgTVNfUEVSX0hPVVIgLVxuICAgICAgICAgICAgICAgICAgICBtb2QkMShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgKyAodGhpcy5faXNVVEMgPyAwIDogdGhpcy51dGNPZmZzZXQoKSAqIE1TX1BFUl9NSU5VVEUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgTVNfUEVSX0hPVVJcbiAgICAgICAgICAgICAgICAgICAgKSAtXG4gICAgICAgICAgICAgICAgICAgIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9IE1TX1BFUl9NSU5VVEUgLSBtb2QkMSh0aW1lLCBNU19QRVJfTUlOVVRFKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9IE1TX1BFUl9TRUNPTkQgLSBtb2QkMSh0aW1lLCBNU19QRVJfU0VDT05EKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9kLnNldFRpbWUodGltZSk7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsdWVPZigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2QudmFsdWVPZigpIC0gKHRoaXMuX29mZnNldCB8fCAwKSAqIDYwMDAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuaXgoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMudmFsdWVPZigpIC8gMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9EYXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvQXJyYXkoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG0ueWVhcigpLFxuICAgICAgICAgICAgbS5tb250aCgpLFxuICAgICAgICAgICAgbS5kYXRlKCksXG4gICAgICAgICAgICBtLmhvdXIoKSxcbiAgICAgICAgICAgIG0ubWludXRlKCksXG4gICAgICAgICAgICBtLnNlY29uZCgpLFxuICAgICAgICAgICAgbS5taWxsaXNlY29uZCgpLFxuICAgICAgICBdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvT2JqZWN0KCkge1xuICAgICAgICB2YXIgbSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyczogbS55ZWFyKCksXG4gICAgICAgICAgICBtb250aHM6IG0ubW9udGgoKSxcbiAgICAgICAgICAgIGRhdGU6IG0uZGF0ZSgpLFxuICAgICAgICAgICAgaG91cnM6IG0uaG91cnMoKSxcbiAgICAgICAgICAgIG1pbnV0ZXM6IG0ubWludXRlcygpLFxuICAgICAgICAgICAgc2Vjb25kczogbS5zZWNvbmRzKCksXG4gICAgICAgICAgICBtaWxsaXNlY29uZHM6IG0ubWlsbGlzZWNvbmRzKCksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAvLyBuZXcgRGF0ZShOYU4pLnRvSlNPTigpID09PSBudWxsXG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMudG9JU09TdHJpbmcoKSA6IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZCQyKCkge1xuICAgICAgICByZXR1cm4gaXNWYWxpZCh0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzaW5nRmxhZ3MoKSB7XG4gICAgICAgIHJldHVybiBleHRlbmQoe30sIGdldFBhcnNpbmdGbGFncyh0aGlzKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52YWxpZEF0KCkge1xuICAgICAgICByZXR1cm4gZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpLm92ZXJmbG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0aW9uRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlucHV0OiB0aGlzLl9pLFxuICAgICAgICAgICAgZm9ybWF0OiB0aGlzLl9mLFxuICAgICAgICAgICAgbG9jYWxlOiB0aGlzLl9sb2NhbGUsXG4gICAgICAgICAgICBpc1VUQzogdGhpcy5faXNVVEMsXG4gICAgICAgICAgICBzdHJpY3Q6IHRoaXMuX3N0cmljdCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTicsIDAsIDAsICdlcmFBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ05OJywgMCwgMCwgJ2VyYUFiYnInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignTk5OJywgMCwgMCwgJ2VyYUFiYnInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignTk5OTicsIDAsIDAsICdlcmFOYW1lJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ05OTk5OJywgMCwgMCwgJ2VyYU5hcnJvdycpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3knLCBbJ3knLCAxXSwgJ3lvJywgJ2VyYVllYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigneScsIFsneXknLCAyXSwgMCwgJ2VyYVllYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigneScsIFsneXl5JywgM10sIDAsICdlcmFZZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3knLCBbJ3l5eXknLCA0XSwgMCwgJ2VyYVllYXInKTtcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ04nLCBtYXRjaEVyYUFiYnIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ05OJywgbWF0Y2hFcmFBYmJyKTtcbiAgICBhZGRSZWdleFRva2VuKCdOTk4nLCBtYXRjaEVyYUFiYnIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ05OTk4nLCBtYXRjaEVyYU5hbWUpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ05OTk5OJywgbWF0Y2hFcmFOYXJyb3cpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihcbiAgICAgICAgWydOJywgJ05OJywgJ05OTicsICdOTk5OJywgJ05OTk5OJ10sXG4gICAgICAgIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgICAgIHZhciBlcmEgPSBjb25maWcuX2xvY2FsZS5lcmFzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgICAgICAgICBpZiAoZXJhKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZXJhID0gZXJhO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRXJhID0gaW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgYWRkUmVnZXhUb2tlbigneScsIG1hdGNoVW5zaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3l5JywgbWF0Y2hVbnNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbigneXl5JywgbWF0Y2hVbnNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbigneXl5eScsIG1hdGNoVW5zaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3lvJywgbWF0Y2hFcmFZZWFyT3JkaW5hbCk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsneScsICd5eScsICd5eXknLCAneXl5eSddLCBZRUFSKTtcbiAgICBhZGRQYXJzZVRva2VuKFsneW8nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgbWF0Y2g7XG4gICAgICAgIGlmIChjb25maWcuX2xvY2FsZS5fZXJhWWVhck9yZGluYWxSZWdleCkge1xuICAgICAgICAgICAgbWF0Y2ggPSBpbnB1dC5tYXRjaChjb25maWcuX2xvY2FsZS5fZXJhWWVhck9yZGluYWxSZWdleCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnLl9sb2NhbGUuZXJhWWVhck9yZGluYWxQYXJzZSkge1xuICAgICAgICAgICAgYXJyYXlbWUVBUl0gPSBjb25maWcuX2xvY2FsZS5lcmFZZWFyT3JkaW5hbFBhcnNlKGlucHV0LCBtYXRjaCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVtZRUFSXSA9IHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUVyYXMobSwgZm9ybWF0KSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIGRhdGUsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5fZXJhcyB8fCBnZXRMb2NhbGUoJ2VuJykuX2VyYXM7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IGhvb2tzKGVyYXNbaV0uc2luY2UpLnN0YXJ0T2YoJ2RheScpO1xuICAgICAgICAgICAgICAgICAgICBlcmFzW2ldLnNpbmNlID0gZGF0ZS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiBlcmFzW2ldLnVudGlsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgICAgICAgICAgICAgICAgZXJhc1tpXS51bnRpbCA9ICtJbmZpbml0eTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgICAgICAgICBkYXRlID0gaG9va3MoZXJhc1tpXS51bnRpbCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgICAgICBlcmFzW2ldLnVudGlsID0gZGF0ZS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlcmFzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZUVyYXNQYXJzZShlcmFOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5lcmFzKCksXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgYWJicixcbiAgICAgICAgICAgIG5hcnJvdztcbiAgICAgICAgZXJhTmFtZSA9IGVyYU5hbWUudG9VcHBlckNhc2UoKTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIG5hbWUgPSBlcmFzW2ldLm5hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIGFiYnIgPSBlcmFzW2ldLmFiYnIudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIG5hcnJvdyA9IGVyYXNbaV0ubmFycm93LnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdOJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTk4nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdOTk4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiYnIgPT09IGVyYU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ05OTk4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09IGVyYU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ05OTk5OJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYXJyb3cgPT09IGVyYU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoW25hbWUsIGFiYnIsIG5hcnJvd10uaW5kZXhPZihlcmFOYW1lKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVFcmFzQ29udmVydFllYXIoZXJhLCB5ZWFyKSB7XG4gICAgICAgIHZhciBkaXIgPSBlcmEuc2luY2UgPD0gZXJhLnVudGlsID8gKzEgOiAtMTtcbiAgICAgICAgaWYgKHllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGhvb2tzKGVyYS5zaW5jZSkueWVhcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGhvb2tzKGVyYS5zaW5jZSkueWVhcigpICsgKHllYXIgLSBlcmEub2Zmc2V0KSAqIGRpcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEVyYU5hbWUoKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmxvY2FsZURhdGEoKS5lcmFzKCk7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgdmFsID0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcblxuICAgICAgICAgICAgaWYgKGVyYXNbaV0uc2luY2UgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnVudGlsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0ubmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnVudGlsIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RXJhTmFycm93KCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgIHZhbCA9IHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG5cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hcnJvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnVudGlsIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hcnJvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFcmFBYmJyKCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgIHZhbCA9IHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG5cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLmFiYnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5hYmJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEVyYVllYXIoKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIGRpcixcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmxvY2FsZURhdGEoKS5lcmFzKCk7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgZGlyID0gZXJhc1tpXS5zaW5jZSA8PSBlcmFzW2ldLnVudGlsID8gKzEgOiAtMTtcblxuICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgdmFsID0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkgfHxcbiAgICAgICAgICAgICAgICAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAodGhpcy55ZWFyKCkgLSBob29rcyhlcmFzW2ldLnNpbmNlKS55ZWFyKCkpICogZGlyICtcbiAgICAgICAgICAgICAgICAgICAgZXJhc1tpXS5vZmZzZXRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMueWVhcigpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVyYXNOYW1lUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfZXJhc05hbWVSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlRXJhc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0ID8gdGhpcy5fZXJhc05hbWVSZWdleCA6IHRoaXMuX2VyYXNSZWdleDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcmFzQWJiclJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX2VyYXNBYmJyUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZUVyYXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1N0cmljdCA/IHRoaXMuX2VyYXNBYmJyUmVnZXggOiB0aGlzLl9lcmFzUmVnZXg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXJhc05hcnJvd1JlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX2VyYXNOYXJyb3dSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlRXJhc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0ID8gdGhpcy5fZXJhc05hcnJvd1JlZ2V4IDogdGhpcy5fZXJhc1JlZ2V4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hdGNoRXJhQWJicihpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZXJhc0FiYnJSZWdleChpc1N0cmljdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF0Y2hFcmFOYW1lKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5lcmFzTmFtZVJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaEVyYU5hcnJvdyhpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZXJhc05hcnJvd1JlZ2V4KGlzU3RyaWN0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaEVyYVllYXJPcmRpbmFsKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5fZXJhWWVhck9yZGluYWxSZWdleCB8fCBtYXRjaFVuc2lnbmVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVFcmFzUGFyc2UoKSB7XG4gICAgICAgIHZhciBhYmJyUGllY2VzID0gW10sXG4gICAgICAgICAgICBuYW1lUGllY2VzID0gW10sXG4gICAgICAgICAgICBuYXJyb3dQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmVyYXMoKTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIG5hbWVQaWVjZXMucHVzaChyZWdleEVzY2FwZShlcmFzW2ldLm5hbWUpKTtcbiAgICAgICAgICAgIGFiYnJQaWVjZXMucHVzaChyZWdleEVzY2FwZShlcmFzW2ldLmFiYnIpKTtcbiAgICAgICAgICAgIG5hcnJvd1BpZWNlcy5wdXNoKHJlZ2V4RXNjYXBlKGVyYXNbaV0ubmFycm93KSk7XG5cbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gocmVnZXhFc2NhcGUoZXJhc1tpXS5uYW1lKSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHJlZ2V4RXNjYXBlKGVyYXNbaV0uYWJicikpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChyZWdleEVzY2FwZShlcmFzW2ldLm5hcnJvdykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZXJhc1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9lcmFzTmFtZVJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbmFtZVBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX2VyYXNBYmJyUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBhYmJyUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fZXJhc05hcnJvd1JlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBuYXJyb3dQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydnZycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndlZWtZZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ0dHJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNvV2Vla1llYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4odG9rZW4sIGdldHRlcikge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbigwLCBbdG9rZW4sIHRva2VuLmxlbmd0aF0sIDAsIGdldHRlcik7XG4gICAgfVxuXG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZycsICd3ZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2dnJywgJ3dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHRycsICdpc29XZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0dHJywgJ2lzb1dlZWtZZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3dlZWtZZWFyJywgJ2dnJyk7XG4gICAgYWRkVW5pdEFsaWFzKCdpc29XZWVrWWVhcicsICdHRycpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnd2Vla1llYXInLCAxKTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWtZZWFyJywgMSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdHJywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2cnLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignR0cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignZ2cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignR0dHRycsIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdnZ2dnJywgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHR0dHJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnZ2dnJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oXG4gICAgICAgIFsnZ2dnZycsICdnZ2dnZycsICdHR0dHJywgJ0dHR0dHJ10sXG4gICAgICAgIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICAgICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMildID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICB9XG4gICAgKTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZ2cnLCAnR0cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW5dID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXIoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwoXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICB0aGlzLndlZWsoKSxcbiAgICAgICAgICAgIHRoaXMud2Vla2RheSgpLFxuICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93LFxuICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG95XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPV2Vla1llYXIoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwoXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICB0aGlzLmlzb1dlZWsoKSxcbiAgICAgICAgICAgIHRoaXMuaXNvV2Vla2RheSgpLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDRcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJU09XZWVrc0luWWVhcigpIHtcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCAxLCA0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJU09XZWVrc0luSVNPV2Vla1llYXIoKSB7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLmlzb1dlZWtZZWFyKCksIDEsIDQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFdlZWtzSW5ZZWFyKCkge1xuICAgICAgICB2YXIgd2Vla0luZm8gPSB0aGlzLmxvY2FsZURhdGEoKS5fd2VlaztcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCB3ZWVrSW5mby5kb3csIHdlZWtJbmZvLmRveSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0V2Vla3NJbldlZWtZZWFyKCkge1xuICAgICAgICB2YXIgd2Vla0luZm8gPSB0aGlzLmxvY2FsZURhdGEoKS5fd2VlaztcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMud2Vla1llYXIoKSwgd2Vla0luZm8uZG93LCB3ZWVrSW5mby5kb3kpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWtZZWFySGVscGVyKGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla3NUYXJnZXQ7XG4gICAgICAgIGlmIChpbnB1dCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gd2Vla09mWWVhcih0aGlzLCBkb3csIGRveSkueWVhcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdlZWtzVGFyZ2V0ID0gd2Vla3NJblllYXIoaW5wdXQsIGRvdywgZG95KTtcbiAgICAgICAgICAgIGlmICh3ZWVrID4gd2Vla3NUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICB3ZWVrID0gd2Vla3NUYXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2V0V2Vla0FsbC5jYWxsKHRoaXMsIGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRXZWVrQWxsKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgZGF5T2ZZZWFyRGF0YSA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpLFxuICAgICAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoZGF5T2ZZZWFyRGF0YS55ZWFyLCAwLCBkYXlPZlllYXJEYXRhLmRheU9mWWVhcik7XG5cbiAgICAgICAgdGhpcy55ZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSk7XG4gICAgICAgIHRoaXMubW9udGgoZGF0ZS5nZXRVVENNb250aCgpKTtcbiAgICAgICAgdGhpcy5kYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1EnLCAwLCAnUW8nLCAncXVhcnRlcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdxdWFydGVyJywgJ1EnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3F1YXJ0ZXInLCA3KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1EnLCBtYXRjaDEpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1EnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9ICh0b0ludChpbnB1dCkgLSAxKSAqIDM7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRRdWFydGVyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsXG4gICAgICAgICAgICA/IE1hdGguY2VpbCgodGhpcy5tb250aCgpICsgMSkgLyAzKVxuICAgICAgICAgICAgOiB0aGlzLm1vbnRoKChpbnB1dCAtIDEpICogMyArICh0aGlzLm1vbnRoKCkgJSAzKSk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0QnLCBbJ0REJywgMl0sICdEbycsICdkYXRlJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2RhdGUnLCAnRCcpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2RhdGUnLCA5KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0QnLCBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0REJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgLy8gVE9ETzogUmVtb3ZlIFwib3JkaW5hbFBhcnNlXCIgZmFsbGJhY2sgaW4gbmV4dCBtYWpvciByZWxlYXNlLlxuICAgICAgICByZXR1cm4gaXNTdHJpY3RcbiAgICAgICAgICAgID8gbG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlIHx8IGxvY2FsZS5fb3JkaW5hbFBhcnNlXG4gICAgICAgICAgICA6IGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQ7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnRCcsICdERCddLCBEQVRFKTtcbiAgICBhZGRQYXJzZVRva2VuKCdEbycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbREFURV0gPSB0b0ludChpbnB1dC5tYXRjaChtYXRjaDF0bzIpWzBdKTtcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXREYXlPZk1vbnRoID0gbWFrZUdldFNldCgnRGF0ZScsIHRydWUpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0RERCcsIFsnRERERCcsIDNdLCAnREREbycsICdkYXlPZlllYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF5T2ZZZWFyJywgJ0RERCcpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2RheU9mWWVhcicsIDQpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignREREJywgbWF0Y2gxdG8zKTtcbiAgICBhZGRSZWdleFRva2VuKCdEREREJywgbWF0Y2gzKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnREREJywgJ0REREQnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0RGF5T2ZZZWFyKGlucHV0KSB7XG4gICAgICAgIHZhciBkYXlPZlllYXIgPVxuICAgICAgICAgICAgTWF0aC5yb3VuZChcbiAgICAgICAgICAgICAgICAodGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpIC0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ3llYXInKSkgLyA4NjRlNVxuICAgICAgICAgICAgKSArIDE7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gZGF5T2ZZZWFyIDogdGhpcy5hZGQoaW5wdXQgLSBkYXlPZlllYXIsICdkJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ20nLCBbJ21tJywgMl0sIDAsICdtaW51dGUnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnbWludXRlJywgJ20nKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ21pbnV0ZScsIDE0KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ20nLCBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ21tJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydtJywgJ21tJ10sIE1JTlVURSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0TWludXRlID0gbWFrZUdldFNldCgnTWludXRlcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdzJywgWydzcycsIDJdLCAwLCAnc2Vjb25kJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3NlY29uZCcsICdzJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdzZWNvbmQnLCAxNSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdzJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdzcycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRQYXJzZVRva2VuKFsncycsICdzcyddLCBTRUNPTkQpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldFNlY29uZCA9IG1ha2VHZXRTZXQoJ1NlY29uZHMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignUycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIH5+KHRoaXMubWlsbGlzZWNvbmQoKSAvIDEwMCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIH5+KHRoaXMubWlsbGlzZWNvbmQoKSAvIDEwKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTJywgM10sIDAsICdtaWxsaXNlY29uZCcpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTUycsIDRdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTJywgNV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTUycsIDZdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTUycsIDddLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1NTJywgOF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1NTUycsIDldLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDAwO1xuICAgIH0pO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtaWxsaXNlY29uZCcsICdtcycpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnbWlsbGlzZWNvbmQnLCAxNik7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdTJywgbWF0Y2gxdG8zLCBtYXRjaDEpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1NTJywgbWF0Y2gxdG8zLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1NTUycsIG1hdGNoMXRvMywgbWF0Y2gzKTtcblxuICAgIHZhciB0b2tlbiwgZ2V0U2V0TWlsbGlzZWNvbmQ7XG4gICAgZm9yICh0b2tlbiA9ICdTU1NTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgICAgICBhZGRSZWdleFRva2VuKHRva2VuLCBtYXRjaFVuc2lnbmVkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU1zKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNSUxMSVNFQ09ORF0gPSB0b0ludCgoJzAuJyArIGlucHV0KSAqIDEwMDApO1xuICAgIH1cblxuICAgIGZvciAodG9rZW4gPSAnUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgcGFyc2VNcyk7XG4gICAgfVxuXG4gICAgZ2V0U2V0TWlsbGlzZWNvbmQgPSBtYWtlR2V0U2V0KCdNaWxsaXNlY29uZHMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigneicsIDAsIDAsICd6b25lQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd6eicsIDAsIDAsICd6b25lTmFtZScpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0Wm9uZUFiYnIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdVVEMnIDogJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Wm9uZU5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZScgOiAnJztcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8gPSBNb21lbnQucHJvdG90eXBlO1xuXG4gICAgcHJvdG8uYWRkID0gYWRkO1xuICAgIHByb3RvLmNhbGVuZGFyID0gY2FsZW5kYXIkMTtcbiAgICBwcm90by5jbG9uZSA9IGNsb25lO1xuICAgIHByb3RvLmRpZmYgPSBkaWZmO1xuICAgIHByb3RvLmVuZE9mID0gZW5kT2Y7XG4gICAgcHJvdG8uZm9ybWF0ID0gZm9ybWF0O1xuICAgIHByb3RvLmZyb20gPSBmcm9tO1xuICAgIHByb3RvLmZyb21Ob3cgPSBmcm9tTm93O1xuICAgIHByb3RvLnRvID0gdG87XG4gICAgcHJvdG8udG9Ob3cgPSB0b05vdztcbiAgICBwcm90by5nZXQgPSBzdHJpbmdHZXQ7XG4gICAgcHJvdG8uaW52YWxpZEF0ID0gaW52YWxpZEF0O1xuICAgIHByb3RvLmlzQWZ0ZXIgPSBpc0FmdGVyO1xuICAgIHByb3RvLmlzQmVmb3JlID0gaXNCZWZvcmU7XG4gICAgcHJvdG8uaXNCZXR3ZWVuID0gaXNCZXR3ZWVuO1xuICAgIHByb3RvLmlzU2FtZSA9IGlzU2FtZTtcbiAgICBwcm90by5pc1NhbWVPckFmdGVyID0gaXNTYW1lT3JBZnRlcjtcbiAgICBwcm90by5pc1NhbWVPckJlZm9yZSA9IGlzU2FtZU9yQmVmb3JlO1xuICAgIHByb3RvLmlzVmFsaWQgPSBpc1ZhbGlkJDI7XG4gICAgcHJvdG8ubGFuZyA9IGxhbmc7XG4gICAgcHJvdG8ubG9jYWxlID0gbG9jYWxlO1xuICAgIHByb3RvLmxvY2FsZURhdGEgPSBsb2NhbGVEYXRhO1xuICAgIHByb3RvLm1heCA9IHByb3RvdHlwZU1heDtcbiAgICBwcm90by5taW4gPSBwcm90b3R5cGVNaW47XG4gICAgcHJvdG8ucGFyc2luZ0ZsYWdzID0gcGFyc2luZ0ZsYWdzO1xuICAgIHByb3RvLnNldCA9IHN0cmluZ1NldDtcbiAgICBwcm90by5zdGFydE9mID0gc3RhcnRPZjtcbiAgICBwcm90by5zdWJ0cmFjdCA9IHN1YnRyYWN0O1xuICAgIHByb3RvLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIHByb3RvLnRvT2JqZWN0ID0gdG9PYmplY3Q7XG4gICAgcHJvdG8udG9EYXRlID0gdG9EYXRlO1xuICAgIHByb3RvLnRvSVNPU3RyaW5nID0gdG9JU09TdHJpbmc7XG4gICAgcHJvdG8uaW5zcGVjdCA9IGluc3BlY3Q7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5mb3IgIT0gbnVsbCkge1xuICAgICAgICBwcm90b1tTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnTW9tZW50PCcgKyB0aGlzLmZvcm1hdCgpICsgJz4nO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBwcm90by50b0pTT04gPSB0b0pTT047XG4gICAgcHJvdG8udG9TdHJpbmcgPSB0b1N0cmluZztcbiAgICBwcm90by51bml4ID0gdW5peDtcbiAgICBwcm90by52YWx1ZU9mID0gdmFsdWVPZjtcbiAgICBwcm90by5jcmVhdGlvbkRhdGEgPSBjcmVhdGlvbkRhdGE7XG4gICAgcHJvdG8uZXJhTmFtZSA9IGdldEVyYU5hbWU7XG4gICAgcHJvdG8uZXJhTmFycm93ID0gZ2V0RXJhTmFycm93O1xuICAgIHByb3RvLmVyYUFiYnIgPSBnZXRFcmFBYmJyO1xuICAgIHByb3RvLmVyYVllYXIgPSBnZXRFcmFZZWFyO1xuICAgIHByb3RvLnllYXIgPSBnZXRTZXRZZWFyO1xuICAgIHByb3RvLmlzTGVhcFllYXIgPSBnZXRJc0xlYXBZZWFyO1xuICAgIHByb3RvLndlZWtZZWFyID0gZ2V0U2V0V2Vla1llYXI7XG4gICAgcHJvdG8uaXNvV2Vla1llYXIgPSBnZXRTZXRJU09XZWVrWWVhcjtcbiAgICBwcm90by5xdWFydGVyID0gcHJvdG8ucXVhcnRlcnMgPSBnZXRTZXRRdWFydGVyO1xuICAgIHByb3RvLm1vbnRoID0gZ2V0U2V0TW9udGg7XG4gICAgcHJvdG8uZGF5c0luTW9udGggPSBnZXREYXlzSW5Nb250aDtcbiAgICBwcm90by53ZWVrID0gcHJvdG8ud2Vla3MgPSBnZXRTZXRXZWVrO1xuICAgIHByb3RvLmlzb1dlZWsgPSBwcm90by5pc29XZWVrcyA9IGdldFNldElTT1dlZWs7XG4gICAgcHJvdG8ud2Vla3NJblllYXIgPSBnZXRXZWVrc0luWWVhcjtcbiAgICBwcm90by53ZWVrc0luV2Vla1llYXIgPSBnZXRXZWVrc0luV2Vla1llYXI7XG4gICAgcHJvdG8uaXNvV2Vla3NJblllYXIgPSBnZXRJU09XZWVrc0luWWVhcjtcbiAgICBwcm90by5pc29XZWVrc0luSVNPV2Vla1llYXIgPSBnZXRJU09XZWVrc0luSVNPV2Vla1llYXI7XG4gICAgcHJvdG8uZGF0ZSA9IGdldFNldERheU9mTW9udGg7XG4gICAgcHJvdG8uZGF5ID0gcHJvdG8uZGF5cyA9IGdldFNldERheU9mV2VlaztcbiAgICBwcm90by53ZWVrZGF5ID0gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrO1xuICAgIHByb3RvLmlzb1dlZWtkYXkgPSBnZXRTZXRJU09EYXlPZldlZWs7XG4gICAgcHJvdG8uZGF5T2ZZZWFyID0gZ2V0U2V0RGF5T2ZZZWFyO1xuICAgIHByb3RvLmhvdXIgPSBwcm90by5ob3VycyA9IGdldFNldEhvdXI7XG4gICAgcHJvdG8ubWludXRlID0gcHJvdG8ubWludXRlcyA9IGdldFNldE1pbnV0ZTtcbiAgICBwcm90by5zZWNvbmQgPSBwcm90by5zZWNvbmRzID0gZ2V0U2V0U2Vjb25kO1xuICAgIHByb3RvLm1pbGxpc2Vjb25kID0gcHJvdG8ubWlsbGlzZWNvbmRzID0gZ2V0U2V0TWlsbGlzZWNvbmQ7XG4gICAgcHJvdG8udXRjT2Zmc2V0ID0gZ2V0U2V0T2Zmc2V0O1xuICAgIHByb3RvLnV0YyA9IHNldE9mZnNldFRvVVRDO1xuICAgIHByb3RvLmxvY2FsID0gc2V0T2Zmc2V0VG9Mb2NhbDtcbiAgICBwcm90by5wYXJzZVpvbmUgPSBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldDtcbiAgICBwcm90by5oYXNBbGlnbmVkSG91ck9mZnNldCA9IGhhc0FsaWduZWRIb3VyT2Zmc2V0O1xuICAgIHByb3RvLmlzRFNUID0gaXNEYXlsaWdodFNhdmluZ1RpbWU7XG4gICAgcHJvdG8uaXNMb2NhbCA9IGlzTG9jYWw7XG4gICAgcHJvdG8uaXNVdGNPZmZzZXQgPSBpc1V0Y09mZnNldDtcbiAgICBwcm90by5pc1V0YyA9IGlzVXRjO1xuICAgIHByb3RvLmlzVVRDID0gaXNVdGM7XG4gICAgcHJvdG8uem9uZUFiYnIgPSBnZXRab25lQWJicjtcbiAgICBwcm90by56b25lTmFtZSA9IGdldFpvbmVOYW1lO1xuICAgIHByb3RvLmRhdGVzID0gZGVwcmVjYXRlKFxuICAgICAgICAnZGF0ZXMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIGRhdGUgaW5zdGVhZC4nLFxuICAgICAgICBnZXRTZXREYXlPZk1vbnRoXG4gICAgKTtcbiAgICBwcm90by5tb250aHMgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb250aHMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbnRoIGluc3RlYWQnLFxuICAgICAgICBnZXRTZXRNb250aFxuICAgICk7XG4gICAgcHJvdG8ueWVhcnMgPSBkZXByZWNhdGUoXG4gICAgICAgICd5ZWFycyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgeWVhciBpbnN0ZWFkJyxcbiAgICAgICAgZ2V0U2V0WWVhclxuICAgICk7XG4gICAgcHJvdG8uem9uZSA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLnpvbmUgaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudCgpLnV0Y09mZnNldCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL3pvbmUvJyxcbiAgICAgICAgZ2V0U2V0Wm9uZVxuICAgICk7XG4gICAgcHJvdG8uaXNEU1RTaGlmdGVkID0gZGVwcmVjYXRlKFxuICAgICAgICAnaXNEU1RTaGlmdGVkIGlzIGRlcHJlY2F0ZWQuIFNlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2RzdC1zaGlmdGVkLyBmb3IgbW9yZSBpbmZvcm1hdGlvbicsXG4gICAgICAgIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZFxuICAgICk7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVbml4KGlucHV0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCAqIDEwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUluWm9uZSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cykucGFyc2Vab25lKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlUGFyc2VQb3N0Rm9ybWF0KHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgIH1cblxuICAgIHZhciBwcm90byQxID0gTG9jYWxlLnByb3RvdHlwZTtcblxuICAgIHByb3RvJDEuY2FsZW5kYXIgPSBjYWxlbmRhcjtcbiAgICBwcm90byQxLmxvbmdEYXRlRm9ybWF0ID0gbG9uZ0RhdGVGb3JtYXQ7XG4gICAgcHJvdG8kMS5pbnZhbGlkRGF0ZSA9IGludmFsaWREYXRlO1xuICAgIHByb3RvJDEub3JkaW5hbCA9IG9yZGluYWw7XG4gICAgcHJvdG8kMS5wcmVwYXJzZSA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbiAgICBwcm90byQxLnBvc3Rmb3JtYXQgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG4gICAgcHJvdG8kMS5yZWxhdGl2ZVRpbWUgPSByZWxhdGl2ZVRpbWU7XG4gICAgcHJvdG8kMS5wYXN0RnV0dXJlID0gcGFzdEZ1dHVyZTtcbiAgICBwcm90byQxLnNldCA9IHNldDtcbiAgICBwcm90byQxLmVyYXMgPSBsb2NhbGVFcmFzO1xuICAgIHByb3RvJDEuZXJhc1BhcnNlID0gbG9jYWxlRXJhc1BhcnNlO1xuICAgIHByb3RvJDEuZXJhc0NvbnZlcnRZZWFyID0gbG9jYWxlRXJhc0NvbnZlcnRZZWFyO1xuICAgIHByb3RvJDEuZXJhc0FiYnJSZWdleCA9IGVyYXNBYmJyUmVnZXg7XG4gICAgcHJvdG8kMS5lcmFzTmFtZVJlZ2V4ID0gZXJhc05hbWVSZWdleDtcbiAgICBwcm90byQxLmVyYXNOYXJyb3dSZWdleCA9IGVyYXNOYXJyb3dSZWdleDtcblxuICAgIHByb3RvJDEubW9udGhzID0gbG9jYWxlTW9udGhzO1xuICAgIHByb3RvJDEubW9udGhzU2hvcnQgPSBsb2NhbGVNb250aHNTaG9ydDtcbiAgICBwcm90byQxLm1vbnRoc1BhcnNlID0gbG9jYWxlTW9udGhzUGFyc2U7XG4gICAgcHJvdG8kMS5tb250aHNSZWdleCA9IG1vbnRoc1JlZ2V4O1xuICAgIHByb3RvJDEubW9udGhzU2hvcnRSZWdleCA9IG1vbnRoc1Nob3J0UmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrID0gbG9jYWxlV2VlaztcbiAgICBwcm90byQxLmZpcnN0RGF5T2ZZZWFyID0gbG9jYWxlRmlyc3REYXlPZlllYXI7XG4gICAgcHJvdG8kMS5maXJzdERheU9mV2VlayA9IGxvY2FsZUZpcnN0RGF5T2ZXZWVrO1xuXG4gICAgcHJvdG8kMS53ZWVrZGF5cyA9IGxvY2FsZVdlZWtkYXlzO1xuICAgIHByb3RvJDEud2Vla2RheXNNaW4gPSBsb2NhbGVXZWVrZGF5c01pbjtcbiAgICBwcm90byQxLndlZWtkYXlzU2hvcnQgPSBsb2NhbGVXZWVrZGF5c1Nob3J0O1xuICAgIHByb3RvJDEud2Vla2RheXNQYXJzZSA9IGxvY2FsZVdlZWtkYXlzUGFyc2U7XG5cbiAgICBwcm90byQxLndlZWtkYXlzUmVnZXggPSB3ZWVrZGF5c1JlZ2V4O1xuICAgIHByb3RvJDEud2Vla2RheXNTaG9ydFJlZ2V4ID0gd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgIHByb3RvJDEud2Vla2RheXNNaW5SZWdleCA9IHdlZWtkYXlzTWluUmVnZXg7XG5cbiAgICBwcm90byQxLmlzUE0gPSBsb2NhbGVJc1BNO1xuICAgIHByb3RvJDEubWVyaWRpZW0gPSBsb2NhbGVNZXJpZGllbTtcblxuICAgIGZ1bmN0aW9uIGdldCQxKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCBzZXR0ZXIpIHtcbiAgICAgICAgdmFyIGxvY2FsZSA9IGdldExvY2FsZSgpLFxuICAgICAgICAgICAgdXRjID0gY3JlYXRlVVRDKCkuc2V0KHNldHRlciwgaW5kZXgpO1xuICAgICAgICByZXR1cm4gbG9jYWxlW2ZpZWxkXSh1dGMsIGZvcm1hdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgZmllbGQpIHtcbiAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCBpbmRleCwgZmllbGQsICdtb250aCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBvdXQgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdCwgaSwgZmllbGQsICdtb250aCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgLy8gKClcbiAgICAvLyAoNSlcbiAgICAvLyAoZm10LCA1KVxuICAgIC8vIChmbXQpXG4gICAgLy8gKHRydWUpXG4gICAgLy8gKHRydWUsIDUpXG4gICAgLy8gKHRydWUsIGZtdCwgNSlcbiAgICAvLyAodHJ1ZSwgZm10KVxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgICAgICBpZiAodHlwZW9mIGxvY2FsZVNvcnRlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9ybWF0ID0gbG9jYWxlU29ydGVkO1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBsb2NhbGVTb3J0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKSxcbiAgICAgICAgICAgIHNoaWZ0ID0gbG9jYWxlU29ydGVkID8gbG9jYWxlLl93ZWVrLmRvdyA6IDAsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgb3V0ID0gW107XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIChpbmRleCArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIChpICsgc2hpZnQpICUgNywgZmllbGQsICdkYXknKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHMoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRocycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHNTaG9ydChmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCAnbW9udGhzU2hvcnQnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXMobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzU2hvcnQobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzU2hvcnQnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNNaW4obG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzTWluJyk7XG4gICAgfVxuXG4gICAgZ2V0U2V0R2xvYmFsTG9jYWxlKCdlbicsIHtcbiAgICAgICAgZXJhczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNpbmNlOiAnMDAwMS0wMS0wMScsXG4gICAgICAgICAgICAgICAgdW50aWw6ICtJbmZpbml0eSxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ0Fubm8gRG9taW5pJyxcbiAgICAgICAgICAgICAgICBuYXJyb3c6ICdBRCcsXG4gICAgICAgICAgICAgICAgYWJicjogJ0FEJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2luY2U6ICcwMDAwLTEyLTMxJyxcbiAgICAgICAgICAgICAgICB1bnRpbDogLUluZmluaXR5LFxuICAgICAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnQmVmb3JlIENocmlzdCcsXG4gICAgICAgICAgICAgICAgbmFycm93OiAnQkMnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdCQycsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0odGh8c3R8bmR8cmQpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB0b0ludCgobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG4gICAgaG9va3MubGFuZyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudC5sYW5nIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlIGluc3RlYWQuJyxcbiAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlXG4gICAgKTtcbiAgICBob29rcy5sYW5nRGF0YSA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudC5sYW5nRGF0YSBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZURhdGEgaW5zdGVhZC4nLFxuICAgICAgICBnZXRMb2NhbGVcbiAgICApO1xuXG4gICAgdmFyIG1hdGhBYnMgPSBNYXRoLmFicztcblxuICAgIGZ1bmN0aW9uIGFicygpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXG4gICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9IG1hdGhBYnModGhpcy5fbWlsbGlzZWNvbmRzKTtcbiAgICAgICAgdGhpcy5fZGF5cyA9IG1hdGhBYnModGhpcy5fZGF5cyk7XG4gICAgICAgIHRoaXMuX21vbnRocyA9IG1hdGhBYnModGhpcy5fbW9udGhzKTtcblxuICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyA9IG1hdGhBYnMoZGF0YS5taWxsaXNlY29uZHMpO1xuICAgICAgICBkYXRhLnNlY29uZHMgPSBtYXRoQWJzKGRhdGEuc2Vjb25kcyk7XG4gICAgICAgIGRhdGEubWludXRlcyA9IG1hdGhBYnMoZGF0YS5taW51dGVzKTtcbiAgICAgICAgZGF0YS5ob3VycyA9IG1hdGhBYnMoZGF0YS5ob3Vycyk7XG4gICAgICAgIGRhdGEubW9udGhzID0gbWF0aEFicyhkYXRhLm1vbnRocyk7XG4gICAgICAgIGRhdGEueWVhcnMgPSBtYXRoQWJzKGRhdGEueWVhcnMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFN1YnRyYWN0JDEoZHVyYXRpb24sIGlucHV0LCB2YWx1ZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUR1cmF0aW9uKGlucHV0LCB2YWx1ZSk7XG5cbiAgICAgICAgZHVyYXRpb24uX21pbGxpc2Vjb25kcyArPSBkaXJlY3Rpb24gKiBvdGhlci5fbWlsbGlzZWNvbmRzO1xuICAgICAgICBkdXJhdGlvbi5fZGF5cyArPSBkaXJlY3Rpb24gKiBvdGhlci5fZGF5cztcbiAgICAgICAgZHVyYXRpb24uX21vbnRocyArPSBkaXJlY3Rpb24gKiBvdGhlci5fbW9udGhzO1xuXG4gICAgICAgIHJldHVybiBkdXJhdGlvbi5fYnViYmxlKCk7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgYWRkKDEsICdzJykgb3IgYWRkKGR1cmF0aW9uKVxuICAgIGZ1bmN0aW9uIGFkZCQxKGlucHV0LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYWRkU3VidHJhY3QkMSh0aGlzLCBpbnB1dCwgdmFsdWUsIDEpO1xuICAgIH1cblxuICAgIC8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIHN1YnRyYWN0KDEsICdzJykgb3Igc3VidHJhY3QoZHVyYXRpb24pXG4gICAgZnVuY3Rpb24gc3VidHJhY3QkMShpbnB1dCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAtMSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzQ2VpbChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBidWJibGUoKSB7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyxcbiAgICAgICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyxcbiAgICAgICAgICAgIGRhdGEgPSB0aGlzLl9kYXRhLFxuICAgICAgICAgICAgc2Vjb25kcyxcbiAgICAgICAgICAgIG1pbnV0ZXMsXG4gICAgICAgICAgICBob3VycyxcbiAgICAgICAgICAgIHllYXJzLFxuICAgICAgICAgICAgbW9udGhzRnJvbURheXM7XG5cbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIG1peCBvZiBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgdmFsdWVzLCBidWJibGUgZG93biBmaXJzdFxuICAgICAgICAvLyBjaGVjazogaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzIxNjZcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIShcbiAgICAgICAgICAgICAgICAobWlsbGlzZWNvbmRzID49IDAgJiYgZGF5cyA+PSAwICYmIG1vbnRocyA+PSAwKSB8fFxuICAgICAgICAgICAgICAgIChtaWxsaXNlY29uZHMgPD0gMCAmJiBkYXlzIDw9IDAgJiYgbW9udGhzIDw9IDApXG4gICAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgICAgbWlsbGlzZWNvbmRzICs9IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRocykgKyBkYXlzKSAqIDg2NGU1O1xuICAgICAgICAgICAgZGF5cyA9IDA7XG4gICAgICAgICAgICBtb250aHMgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBjb2RlIGJ1YmJsZXMgdXAgdmFsdWVzLCBzZWUgdGhlIHRlc3RzIGZvclxuICAgICAgICAvLyBleGFtcGxlcyBvZiB3aGF0IHRoYXQgbWVhbnMuXG4gICAgICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzICUgMTAwMDtcblxuICAgICAgICBzZWNvbmRzID0gYWJzRmxvb3IobWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gICAgICAgIGRhdGEuc2Vjb25kcyA9IHNlY29uZHMgJSA2MDtcblxuICAgICAgICBtaW51dGVzID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgZGF0YS5taW51dGVzID0gbWludXRlcyAlIDYwO1xuXG4gICAgICAgIGhvdXJzID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICAgICAgZGF0YS5ob3VycyA9IGhvdXJzICUgMjQ7XG5cbiAgICAgICAgZGF5cyArPSBhYnNGbG9vcihob3VycyAvIDI0KTtcblxuICAgICAgICAvLyBjb252ZXJ0IGRheXMgdG8gbW9udGhzXG4gICAgICAgIG1vbnRoc0Zyb21EYXlzID0gYWJzRmxvb3IoZGF5c1RvTW9udGhzKGRheXMpKTtcbiAgICAgICAgbW9udGhzICs9IG1vbnRoc0Zyb21EYXlzO1xuICAgICAgICBkYXlzIC09IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRoc0Zyb21EYXlzKSk7XG5cbiAgICAgICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgICAgICB5ZWFycyA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICAgICAgbW9udGhzICU9IDEyO1xuXG4gICAgICAgIGRhdGEuZGF5cyA9IGRheXM7XG4gICAgICAgIGRhdGEubW9udGhzID0gbW9udGhzO1xuICAgICAgICBkYXRhLnllYXJzID0geWVhcnM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5c1RvTW9udGhzKGRheXMpIHtcbiAgICAgICAgLy8gNDAwIHllYXJzIGhhdmUgMTQ2MDk3IGRheXMgKHRha2luZyBpbnRvIGFjY291bnQgbGVhcCB5ZWFyIHJ1bGVzKVxuICAgICAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxMiBtb250aHMgPT09IDQ4MDBcbiAgICAgICAgcmV0dXJuIChkYXlzICogNDgwMCkgLyAxNDYwOTc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhzVG9EYXlzKG1vbnRocykge1xuICAgICAgICAvLyB0aGUgcmV2ZXJzZSBvZiBkYXlzVG9Nb250aHNcbiAgICAgICAgcmV0dXJuIChtb250aHMgKiAxNDYwOTcpIC8gNDgwMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcyh1bml0cykge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXlzLFxuICAgICAgICAgICAgbW9udGhzLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzO1xuXG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21vbnRoJyB8fCB1bml0cyA9PT0gJ3F1YXJ0ZXInIHx8IHVuaXRzID09PSAneWVhcicpIHtcbiAgICAgICAgICAgIGRheXMgPSB0aGlzLl9kYXlzICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICBtb250aHMgPSB0aGlzLl9tb250aHMgKyBkYXlzVG9Nb250aHMoZGF5cyk7XG4gICAgICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzIC8gMztcbiAgICAgICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRocyAvIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaGFuZGxlIG1pbGxpc2Vjb25kcyBzZXBhcmF0ZWx5IGJlY2F1c2Ugb2YgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGlzc3VlICMxODY3KVxuICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMgKyBNYXRoLnJvdW5kKG1vbnRoc1RvRGF5cyh0aGlzLl9tb250aHMpKTtcbiAgICAgICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgLyA3ICsgbWlsbGlzZWNvbmRzIC8gNjA0OGU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzICogMjQgKyBtaWxsaXNlY29uZHMgLyAzNmU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzICogMTQ0MCArIG1pbGxpc2Vjb25kcyAvIDZlNDtcbiAgICAgICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyAqIDg2NDAwICsgbWlsbGlzZWNvbmRzIC8gMTAwMDtcbiAgICAgICAgICAgICAgICAvLyBNYXRoLmZsb29yIHByZXZlbnRzIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIGhlcmVcbiAgICAgICAgICAgICAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKGRheXMgKiA4NjRlNSkgKyBtaWxsaXNlY29uZHM7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHVuaXQgJyArIHVuaXRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRPRE86IFVzZSB0aGlzLmFzKCdtcycpP1xuICAgIGZ1bmN0aW9uIHZhbHVlT2YkMSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzICtcbiAgICAgICAgICAgIHRoaXMuX2RheXMgKiA4NjRlNSArXG4gICAgICAgICAgICAodGhpcy5fbW9udGhzICUgMTIpICogMjU5MmU2ICtcbiAgICAgICAgICAgIHRvSW50KHRoaXMuX21vbnRocyAvIDEyKSAqIDMxNTM2ZTZcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlQXMoYWxpYXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFzKGFsaWFzKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgYXNNaWxsaXNlY29uZHMgPSBtYWtlQXMoJ21zJyksXG4gICAgICAgIGFzU2Vjb25kcyA9IG1ha2VBcygncycpLFxuICAgICAgICBhc01pbnV0ZXMgPSBtYWtlQXMoJ20nKSxcbiAgICAgICAgYXNIb3VycyA9IG1ha2VBcygnaCcpLFxuICAgICAgICBhc0RheXMgPSBtYWtlQXMoJ2QnKSxcbiAgICAgICAgYXNXZWVrcyA9IG1ha2VBcygndycpLFxuICAgICAgICBhc01vbnRocyA9IG1ha2VBcygnTScpLFxuICAgICAgICBhc1F1YXJ0ZXJzID0gbWFrZUFzKCdRJyksXG4gICAgICAgIGFzWWVhcnMgPSBtYWtlQXMoJ3knKTtcblxuICAgIGZ1bmN0aW9uIGNsb25lJDEoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXQkMih1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpc1t1bml0cyArICdzJ10oKSA6IE5hTjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlR2V0dGVyKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2RhdGFbbmFtZV0gOiBOYU47XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IG1ha2VHZXR0ZXIoJ21pbGxpc2Vjb25kcycpLFxuICAgICAgICBzZWNvbmRzID0gbWFrZUdldHRlcignc2Vjb25kcycpLFxuICAgICAgICBtaW51dGVzID0gbWFrZUdldHRlcignbWludXRlcycpLFxuICAgICAgICBob3VycyA9IG1ha2VHZXR0ZXIoJ2hvdXJzJyksXG4gICAgICAgIGRheXMgPSBtYWtlR2V0dGVyKCdkYXlzJyksXG4gICAgICAgIG1vbnRocyA9IG1ha2VHZXR0ZXIoJ21vbnRocycpLFxuICAgICAgICB5ZWFycyA9IG1ha2VHZXR0ZXIoJ3llYXJzJyk7XG5cbiAgICBmdW5jdGlvbiB3ZWVrcygpIHtcbiAgICAgICAgcmV0dXJuIGFic0Zsb29yKHRoaXMuZGF5cygpIC8gNyk7XG4gICAgfVxuXG4gICAgdmFyIHJvdW5kID0gTWF0aC5yb3VuZCxcbiAgICAgICAgdGhyZXNob2xkcyA9IHtcbiAgICAgICAgICAgIHNzOiA0NCwgLy8gYSBmZXcgc2Vjb25kcyB0byBzZWNvbmRzXG4gICAgICAgICAgICBzOiA0NSwgLy8gc2Vjb25kcyB0byBtaW51dGVcbiAgICAgICAgICAgIG06IDQ1LCAvLyBtaW51dGVzIHRvIGhvdXJcbiAgICAgICAgICAgIGg6IDIyLCAvLyBob3VycyB0byBkYXlcbiAgICAgICAgICAgIGQ6IDI2LCAvLyBkYXlzIHRvIG1vbnRoL3dlZWtcbiAgICAgICAgICAgIHc6IG51bGwsIC8vIHdlZWtzIHRvIG1vbnRoXG4gICAgICAgICAgICBNOiAxMSwgLy8gbW9udGhzIHRvIHllYXJcbiAgICAgICAgfTtcblxuICAgIC8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbW9tZW50LmZuLmZyb20sIG1vbWVudC5mbi5mcm9tTm93LCBhbmQgbW9tZW50LmR1cmF0aW9uLmZuLmh1bWFuaXplXG4gICAgZnVuY3Rpb24gc3Vic3RpdHV0ZVRpbWVBZ28oc3RyaW5nLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGlzRnV0dXJlLCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5yZWxhdGl2ZVRpbWUobnVtYmVyIHx8IDEsICEhd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lJDEocG9zTmVnRHVyYXRpb24sIHdpdGhvdXRTdWZmaXgsIHRocmVzaG9sZHMsIGxvY2FsZSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBjcmVhdGVEdXJhdGlvbihwb3NOZWdEdXJhdGlvbikuYWJzKCksXG4gICAgICAgICAgICBzZWNvbmRzID0gcm91bmQoZHVyYXRpb24uYXMoJ3MnKSksXG4gICAgICAgICAgICBtaW51dGVzID0gcm91bmQoZHVyYXRpb24uYXMoJ20nKSksXG4gICAgICAgICAgICBob3VycyA9IHJvdW5kKGR1cmF0aW9uLmFzKCdoJykpLFxuICAgICAgICAgICAgZGF5cyA9IHJvdW5kKGR1cmF0aW9uLmFzKCdkJykpLFxuICAgICAgICAgICAgbW9udGhzID0gcm91bmQoZHVyYXRpb24uYXMoJ00nKSksXG4gICAgICAgICAgICB3ZWVrcyA9IHJvdW5kKGR1cmF0aW9uLmFzKCd3JykpLFxuICAgICAgICAgICAgeWVhcnMgPSByb3VuZChkdXJhdGlvbi5hcygneScpKSxcbiAgICAgICAgICAgIGEgPVxuICAgICAgICAgICAgICAgIChzZWNvbmRzIDw9IHRocmVzaG9sZHMuc3MgJiYgWydzJywgc2Vjb25kc10pIHx8XG4gICAgICAgICAgICAgICAgKHNlY29uZHMgPCB0aHJlc2hvbGRzLnMgJiYgWydzcycsIHNlY29uZHNdKSB8fFxuICAgICAgICAgICAgICAgIChtaW51dGVzIDw9IDEgJiYgWydtJ10pIHx8XG4gICAgICAgICAgICAgICAgKG1pbnV0ZXMgPCB0aHJlc2hvbGRzLm0gJiYgWydtbScsIG1pbnV0ZXNdKSB8fFxuICAgICAgICAgICAgICAgIChob3VycyA8PSAxICYmIFsnaCddKSB8fFxuICAgICAgICAgICAgICAgIChob3VycyA8IHRocmVzaG9sZHMuaCAmJiBbJ2hoJywgaG91cnNdKSB8fFxuICAgICAgICAgICAgICAgIChkYXlzIDw9IDEgJiYgWydkJ10pIHx8XG4gICAgICAgICAgICAgICAgKGRheXMgPCB0aHJlc2hvbGRzLmQgJiYgWydkZCcsIGRheXNdKTtcblxuICAgICAgICBpZiAodGhyZXNob2xkcy53ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGEgPVxuICAgICAgICAgICAgICAgIGEgfHxcbiAgICAgICAgICAgICAgICAod2Vla3MgPD0gMSAmJiBbJ3cnXSkgfHxcbiAgICAgICAgICAgICAgICAod2Vla3MgPCB0aHJlc2hvbGRzLncgJiYgWyd3dycsIHdlZWtzXSk7XG4gICAgICAgIH1cbiAgICAgICAgYSA9IGEgfHxcbiAgICAgICAgICAgIChtb250aHMgPD0gMSAmJiBbJ00nXSkgfHxcbiAgICAgICAgICAgIChtb250aHMgPCB0aHJlc2hvbGRzLk0gJiYgWydNTScsIG1vbnRoc10pIHx8XG4gICAgICAgICAgICAoeWVhcnMgPD0gMSAmJiBbJ3knXSkgfHwgWyd5eScsIHllYXJzXTtcblxuICAgICAgICBhWzJdID0gd2l0aG91dFN1ZmZpeDtcbiAgICAgICAgYVszXSA9ICtwb3NOZWdEdXJhdGlvbiA+IDA7XG4gICAgICAgIGFbNF0gPSBsb2NhbGU7XG4gICAgICAgIHJldHVybiBzdWJzdGl0dXRlVGltZUFnby5hcHBseShudWxsLCBhKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IHRoZSByb3VuZGluZyBmdW5jdGlvbiBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG4gICAgZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmcocm91bmRpbmdGdW5jdGlvbikge1xuICAgICAgICBpZiAocm91bmRpbmdGdW5jdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcm91bmQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiByb3VuZGluZ0Z1bmN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByb3VuZCA9IHJvdW5kaW5nRnVuY3Rpb247XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCBhIHRocmVzaG9sZCBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG4gICAgZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkKHRocmVzaG9sZCwgbGltaXQpIHtcbiAgICAgICAgaWYgKHRocmVzaG9sZHNbdGhyZXNob2xkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpbWl0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aHJlc2hvbGRzW3RocmVzaG9sZF07XG4gICAgICAgIH1cbiAgICAgICAgdGhyZXNob2xkc1t0aHJlc2hvbGRdID0gbGltaXQ7XG4gICAgICAgIGlmICh0aHJlc2hvbGQgPT09ICdzJykge1xuICAgICAgICAgICAgdGhyZXNob2xkcy5zcyA9IGxpbWl0IC0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBodW1hbml6ZShhcmdXaXRoU3VmZml4LCBhcmdUaHJlc2hvbGRzKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHdpdGhTdWZmaXggPSBmYWxzZSxcbiAgICAgICAgICAgIHRoID0gdGhyZXNob2xkcyxcbiAgICAgICAgICAgIGxvY2FsZSxcbiAgICAgICAgICAgIG91dHB1dDtcblxuICAgICAgICBpZiAodHlwZW9mIGFyZ1dpdGhTdWZmaXggPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBhcmdUaHJlc2hvbGRzID0gYXJnV2l0aFN1ZmZpeDtcbiAgICAgICAgICAgIGFyZ1dpdGhTdWZmaXggPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGFyZ1dpdGhTdWZmaXggPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgd2l0aFN1ZmZpeCA9IGFyZ1dpdGhTdWZmaXg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBhcmdUaHJlc2hvbGRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGggPSBPYmplY3QuYXNzaWduKHt9LCB0aHJlc2hvbGRzLCBhcmdUaHJlc2hvbGRzKTtcbiAgICAgICAgICAgIGlmIChhcmdUaHJlc2hvbGRzLnMgIT0gbnVsbCAmJiBhcmdUaHJlc2hvbGRzLnNzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aC5zcyA9IGFyZ1RocmVzaG9sZHMucyAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbGUgPSB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgb3V0cHV0ID0gcmVsYXRpdmVUaW1lJDEodGhpcywgIXdpdGhTdWZmaXgsIHRoLCBsb2NhbGUpO1xuXG4gICAgICAgIGlmICh3aXRoU3VmZml4KSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBsb2NhbGUucGFzdEZ1dHVyZSgrdGhpcywgb3V0cHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsb2NhbGUucG9zdGZvcm1hdChvdXRwdXQpO1xuICAgIH1cblxuICAgIHZhciBhYnMkMSA9IE1hdGguYWJzO1xuXG4gICAgZnVuY3Rpb24gc2lnbih4KSB7XG4gICAgICAgIHJldHVybiAoeCA+IDApIC0gKHggPCAwKSB8fCAreDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0lTT1N0cmluZyQxKCkge1xuICAgICAgICAvLyBmb3IgSVNPIHN0cmluZ3Mgd2UgZG8gbm90IHVzZSB0aGUgbm9ybWFsIGJ1YmJsaW5nIHJ1bGVzOlxuICAgICAgICAvLyAgKiBtaWxsaXNlY29uZHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIGhvdXJzXG4gICAgICAgIC8vICAqIGRheXMgZG8gbm90IGJ1YmJsZSBhdCBhbGxcbiAgICAgICAgLy8gICogbW9udGhzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSB5ZWFyc1xuICAgICAgICAvLyBUaGlzIGlzIGJlY2F1c2UgdGhlcmUgaXMgbm8gY29udGV4dC1mcmVlIGNvbnZlcnNpb24gYmV0d2VlbiBob3VycyBhbmQgZGF5c1xuICAgICAgICAvLyAodGhpbmsgb2YgY2xvY2sgY2hhbmdlcylcbiAgICAgICAgLy8gYW5kIGFsc28gbm90IGJldHdlZW4gZGF5cyBhbmQgbW9udGhzICgyOC0zMSBkYXlzIHBlciBtb250aClcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2Vjb25kcyA9IGFicyQxKHRoaXMuX21pbGxpc2Vjb25kcykgLyAxMDAwLFxuICAgICAgICAgICAgZGF5cyA9IGFicyQxKHRoaXMuX2RheXMpLFxuICAgICAgICAgICAgbW9udGhzID0gYWJzJDEodGhpcy5fbW9udGhzKSxcbiAgICAgICAgICAgIG1pbnV0ZXMsXG4gICAgICAgICAgICBob3VycyxcbiAgICAgICAgICAgIHllYXJzLFxuICAgICAgICAgICAgcyxcbiAgICAgICAgICAgIHRvdGFsID0gdGhpcy5hc1NlY29uZHMoKSxcbiAgICAgICAgICAgIHRvdGFsU2lnbixcbiAgICAgICAgICAgIHltU2lnbixcbiAgICAgICAgICAgIGRheXNTaWduLFxuICAgICAgICAgICAgaG1zU2lnbjtcblxuICAgICAgICBpZiAoIXRvdGFsKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIHRoZSBzYW1lIGFzIEMjJ3MgKE5vZGEpIGFuZCBweXRob24gKGlzb2RhdGUpLi4uXG4gICAgICAgICAgICAvLyBidXQgbm90IG90aGVyIEpTIChnb29nLmRhdGUpXG4gICAgICAgICAgICByZXR1cm4gJ1AwRCc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAzNjAwIHNlY29uZHMgLT4gNjAgbWludXRlcyAtPiAxIGhvdXJcbiAgICAgICAgbWludXRlcyA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgICAgIGhvdXJzID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICAgICAgc2Vjb25kcyAlPSA2MDtcbiAgICAgICAgbWludXRlcyAlPSA2MDtcblxuICAgICAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgICAgIHllYXJzID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgICAgICBtb250aHMgJT0gMTI7XG5cbiAgICAgICAgLy8gaW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2RvcmRpbGxlL21vbWVudC1pc29kdXJhdGlvbi9ibG9iL21hc3Rlci9tb21lbnQuaXNvZHVyYXRpb24uanNcbiAgICAgICAgcyA9IHNlY29uZHMgPyBzZWNvbmRzLnRvRml4ZWQoMykucmVwbGFjZSgvXFwuPzArJC8sICcnKSA6ICcnO1xuXG4gICAgICAgIHRvdGFsU2lnbiA9IHRvdGFsIDwgMCA/ICctJyA6ICcnO1xuICAgICAgICB5bVNpZ24gPSBzaWduKHRoaXMuX21vbnRocykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG4gICAgICAgIGRheXNTaWduID0gc2lnbih0aGlzLl9kYXlzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcbiAgICAgICAgaG1zU2lnbiA9IHNpZ24odGhpcy5fbWlsbGlzZWNvbmRzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdG90YWxTaWduICtcbiAgICAgICAgICAgICdQJyArXG4gICAgICAgICAgICAoeWVhcnMgPyB5bVNpZ24gKyB5ZWFycyArICdZJyA6ICcnKSArXG4gICAgICAgICAgICAobW9udGhzID8geW1TaWduICsgbW9udGhzICsgJ00nIDogJycpICtcbiAgICAgICAgICAgIChkYXlzID8gZGF5c1NpZ24gKyBkYXlzICsgJ0QnIDogJycpICtcbiAgICAgICAgICAgIChob3VycyB8fCBtaW51dGVzIHx8IHNlY29uZHMgPyAnVCcgOiAnJykgK1xuICAgICAgICAgICAgKGhvdXJzID8gaG1zU2lnbiArIGhvdXJzICsgJ0gnIDogJycpICtcbiAgICAgICAgICAgIChtaW51dGVzID8gaG1zU2lnbiArIG1pbnV0ZXMgKyAnTScgOiAnJykgK1xuICAgICAgICAgICAgKHNlY29uZHMgPyBobXNTaWduICsgcyArICdTJyA6ICcnKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBwcm90byQyID0gRHVyYXRpb24ucHJvdG90eXBlO1xuXG4gICAgcHJvdG8kMi5pc1ZhbGlkID0gaXNWYWxpZCQxO1xuICAgIHByb3RvJDIuYWJzID0gYWJzO1xuICAgIHByb3RvJDIuYWRkID0gYWRkJDE7XG4gICAgcHJvdG8kMi5zdWJ0cmFjdCA9IHN1YnRyYWN0JDE7XG4gICAgcHJvdG8kMi5hcyA9IGFzO1xuICAgIHByb3RvJDIuYXNNaWxsaXNlY29uZHMgPSBhc01pbGxpc2Vjb25kcztcbiAgICBwcm90byQyLmFzU2Vjb25kcyA9IGFzU2Vjb25kcztcbiAgICBwcm90byQyLmFzTWludXRlcyA9IGFzTWludXRlcztcbiAgICBwcm90byQyLmFzSG91cnMgPSBhc0hvdXJzO1xuICAgIHByb3RvJDIuYXNEYXlzID0gYXNEYXlzO1xuICAgIHByb3RvJDIuYXNXZWVrcyA9IGFzV2Vla3M7XG4gICAgcHJvdG8kMi5hc01vbnRocyA9IGFzTW9udGhzO1xuICAgIHByb3RvJDIuYXNRdWFydGVycyA9IGFzUXVhcnRlcnM7XG4gICAgcHJvdG8kMi5hc1llYXJzID0gYXNZZWFycztcbiAgICBwcm90byQyLnZhbHVlT2YgPSB2YWx1ZU9mJDE7XG4gICAgcHJvdG8kMi5fYnViYmxlID0gYnViYmxlO1xuICAgIHByb3RvJDIuY2xvbmUgPSBjbG9uZSQxO1xuICAgIHByb3RvJDIuZ2V0ID0gZ2V0JDI7XG4gICAgcHJvdG8kMi5taWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHM7XG4gICAgcHJvdG8kMi5zZWNvbmRzID0gc2Vjb25kcztcbiAgICBwcm90byQyLm1pbnV0ZXMgPSBtaW51dGVzO1xuICAgIHByb3RvJDIuaG91cnMgPSBob3VycztcbiAgICBwcm90byQyLmRheXMgPSBkYXlzO1xuICAgIHByb3RvJDIud2Vla3MgPSB3ZWVrcztcbiAgICBwcm90byQyLm1vbnRocyA9IG1vbnRocztcbiAgICBwcm90byQyLnllYXJzID0geWVhcnM7XG4gICAgcHJvdG8kMi5odW1hbml6ZSA9IGh1bWFuaXplO1xuICAgIHByb3RvJDIudG9JU09TdHJpbmcgPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIudG9TdHJpbmcgPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIudG9KU09OID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLmxvY2FsZSA9IGxvY2FsZTtcbiAgICBwcm90byQyLmxvY2FsZURhdGEgPSBsb2NhbGVEYXRhO1xuXG4gICAgcHJvdG8kMi50b0lzb1N0cmluZyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ3RvSXNvU3RyaW5nKCkgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB0b0lTT1N0cmluZygpIGluc3RlYWQgKG5vdGljZSB0aGUgY2FwaXRhbHMpJyxcbiAgICAgICAgdG9JU09TdHJpbmckMVxuICAgICk7XG4gICAgcHJvdG8kMi5sYW5nID0gbGFuZztcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdYJywgMCwgMCwgJ3VuaXgnKTtcbiAgICBhZGRGb3JtYXRUb2tlbigneCcsIDAsIDAsICd2YWx1ZU9mJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCd4JywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1gnLCBtYXRjaFRpbWVzdGFtcCk7XG4gICAgYWRkUGFyc2VUb2tlbignWCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShwYXJzZUZsb2F0KGlucHV0KSAqIDEwMDApO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ3gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUodG9JbnQoaW5wdXQpKTtcbiAgICB9KTtcblxuICAgIC8vISBtb21lbnQuanNcblxuICAgIGhvb2tzLnZlcnNpb24gPSAnMi4yOS40JztcblxuICAgIHNldEhvb2tDYWxsYmFjayhjcmVhdGVMb2NhbCk7XG5cbiAgICBob29rcy5mbiA9IHByb3RvO1xuICAgIGhvb2tzLm1pbiA9IG1pbjtcbiAgICBob29rcy5tYXggPSBtYXg7XG4gICAgaG9va3Mubm93ID0gbm93O1xuICAgIGhvb2tzLnV0YyA9IGNyZWF0ZVVUQztcbiAgICBob29rcy51bml4ID0gY3JlYXRlVW5peDtcbiAgICBob29rcy5tb250aHMgPSBsaXN0TW9udGhzO1xuICAgIGhvb2tzLmlzRGF0ZSA9IGlzRGF0ZTtcbiAgICBob29rcy5sb2NhbGUgPSBnZXRTZXRHbG9iYWxMb2NhbGU7XG4gICAgaG9va3MuaW52YWxpZCA9IGNyZWF0ZUludmFsaWQ7XG4gICAgaG9va3MuZHVyYXRpb24gPSBjcmVhdGVEdXJhdGlvbjtcbiAgICBob29rcy5pc01vbWVudCA9IGlzTW9tZW50O1xuICAgIGhvb2tzLndlZWtkYXlzID0gbGlzdFdlZWtkYXlzO1xuICAgIGhvb2tzLnBhcnNlWm9uZSA9IGNyZWF0ZUluWm9uZTtcbiAgICBob29rcy5sb2NhbGVEYXRhID0gZ2V0TG9jYWxlO1xuICAgIGhvb2tzLmlzRHVyYXRpb24gPSBpc0R1cmF0aW9uO1xuICAgIGhvb2tzLm1vbnRoc1Nob3J0ID0gbGlzdE1vbnRoc1Nob3J0O1xuICAgIGhvb2tzLndlZWtkYXlzTWluID0gbGlzdFdlZWtkYXlzTWluO1xuICAgIGhvb2tzLmRlZmluZUxvY2FsZSA9IGRlZmluZUxvY2FsZTtcbiAgICBob29rcy51cGRhdGVMb2NhbGUgPSB1cGRhdGVMb2NhbGU7XG4gICAgaG9va3MubG9jYWxlcyA9IGxpc3RMb2NhbGVzO1xuICAgIGhvb2tzLndlZWtkYXlzU2hvcnQgPSBsaXN0V2Vla2RheXNTaG9ydDtcbiAgICBob29rcy5ub3JtYWxpemVVbml0cyA9IG5vcm1hbGl6ZVVuaXRzO1xuICAgIGhvb2tzLnJlbGF0aXZlVGltZVJvdW5kaW5nID0gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmc7XG4gICAgaG9va3MucmVsYXRpdmVUaW1lVGhyZXNob2xkID0gZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkO1xuICAgIGhvb2tzLmNhbGVuZGFyRm9ybWF0ID0gZ2V0Q2FsZW5kYXJGb3JtYXQ7XG4gICAgaG9va3MucHJvdG90eXBlID0gcHJvdG87XG5cbiAgICAvLyBjdXJyZW50bHkgSFRNTDUgaW5wdXQgdHlwZSBvbmx5IHN1cHBvcnRzIDI0LWhvdXIgZm9ybWF0c1xuICAgIGhvb2tzLkhUTUw1X0ZNVCA9IHtcbiAgICAgICAgREFURVRJTUVfTE9DQUw6ICdZWVlZLU1NLUREVEhIOm1tJywgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIC8+XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMX1NFQ09ORFM6ICdZWVlZLU1NLUREVEhIOm1tOnNzJywgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIxXCIgLz5cbiAgICAgICAgREFURVRJTUVfTE9DQUxfTVM6ICdZWVlZLU1NLUREVEhIOm1tOnNzLlNTUycsIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBzdGVwPVwiMC4wMDFcIiAvPlxuICAgICAgICBEQVRFOiAnWVlZWS1NTS1ERCcsIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIC8+XG4gICAgICAgIFRJTUU6ICdISDptbScsIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIC8+XG4gICAgICAgIFRJTUVfU0VDT05EUzogJ0hIOm1tOnNzJywgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgc3RlcD1cIjFcIiAvPlxuICAgICAgICBUSU1FX01TOiAnSEg6bW06c3MuU1NTJywgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgc3RlcD1cIjAuMDAxXCIgLz5cbiAgICAgICAgV0VFSzogJ0dHR0ctW1ddV1cnLCAvLyA8aW5wdXQgdHlwZT1cIndlZWtcIiAvPlxuICAgICAgICBNT05USDogJ1lZWVktTU0nLCAvLyA8aW5wdXQgdHlwZT1cIm1vbnRoXCIgLz5cbiAgICB9O1xuXG4gICAgcmV0dXJuIGhvb2tzO1xuXG59KSkpO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuXHJcbmxldCByZWxlYXNlRGF0ZUxhYmVsO1xyXG5sZXQgcmVsZWFzZURheXNMZWZ0O1xyXG5sZXQgcmVsZWFzZUhvdXJzTGVmdDtcclxubGV0IHJlbGVhc2VNaW51dGVzTGVmdDtcclxubGV0IHJlbGVhc2VTZWNvbmRzTGVmdDtcclxuXHJcbmxldCBzdWJzY3JpcHRpb25Gb3JtO1xyXG5sZXQgbmFtZUlucHV0O1xyXG5sZXQgZW1haWxJbnB1dDtcclxubGV0IHN1Ym1pdEJ0bjtcclxuaWYgKHN1YnNjcmlwdGlvbkZvcm0pIHtcclxuXHRjb25zdCBuYW1lSW5wdXQgPSBzdWJzY3JpcHRpb25Gb3JtLnF1ZXJ5U2VsZWN0b3IoJyNuYW1lJyk7XHJcblx0Y29uc3QgZW1haWxJbnB1dCA9IHN1YnNjcmlwdGlvbkZvcm0ucXVlcnlTZWxlY3RvcignI2VtYWlsJyk7XHJcblx0Y29uc3Qgc3VibWl0QnRuID0gc3Vic2NyaXB0aW9uRm9ybS5xdWVyeVNlbGVjdG9yKCcjc3VibWl0LWJ0bicpO1xyXG59XHJcblxyXG5jb25zdCByZWxlYXNlRGF0ZSA9IG1vbWVudCgpLmFkZCgzMCwgJ2RheXMnKS5zdGFydE9mKCdkYXknKTtcclxuY29uc3QgZW1haWxSZWdleCA9XHJcblx0L14oKFtePD4oKVtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXF0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvO1xyXG5cclxuY29uc3QgbWFpbiA9ICgpID0+IHtcclxuXHRwcmVwYXJlRE9NRWxlbWVudHMoKTtcclxuXHRwcmVwYXJlRE9NRXZlbnRzKCk7XHJcblxyXG5cdGxvYWRSZWxlYXNlRGF0ZSgpO1xyXG5cdGhhbmRsZUNvdW50ZG93bigpO1xyXG5cdHNldEludGVydmFsKGhhbmRsZUNvdW50ZG93biwgMTAwMCk7XHJcbn07XHJcblxyXG5jb25zdCBwcmVwYXJlRE9NRWxlbWVudHMgPSAoKSA9PiB7XHJcblx0cmVsZWFzZURhdGVMYWJlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyZWxlYXNlLWRhdGUnKTtcclxuXHRyZWxlYXNlRGF5c0xlZnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcmVsZWFzZS1kYXlzJyk7XHJcblx0cmVsZWFzZUhvdXJzTGVmdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyZWxlYXNlLWhvdXJzJyk7XHJcblx0cmVsZWFzZU1pbnV0ZXNMZWZ0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3JlbGVhc2UtbWludXRlcycpO1xyXG5cdHJlbGVhc2VTZWNvbmRzTGVmdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyZWxlYXNlLXNlY29uZHMnKTtcclxuXHJcblx0c3Vic2NyaXB0aW9uRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdWJzY3JpcHRpb24tZm9ybScpO1xyXG5cdGlmIChzdWJzY3JpcHRpb25Gb3JtKSB7XHJcblx0XHRuYW1lSW5wdXQgPSBzdWJzY3JpcHRpb25Gb3JtLnF1ZXJ5U2VsZWN0b3IoJyNuYW1lJyk7XHJcblx0XHRlbWFpbElucHV0ID0gc3Vic2NyaXB0aW9uRm9ybS5xdWVyeVNlbGVjdG9yKCcjZW1haWwnKTtcclxuXHRcdHN1Ym1pdEJ0biA9IHN1YnNjcmlwdGlvbkZvcm0ucXVlcnlTZWxlY3RvcignI3N1Ym1pdC1idG4nKTtcclxuXHR9XHJcbn07XHJcblxyXG5jb25zdCBwcmVwYXJlRE9NRXZlbnRzID0gKCkgPT4ge1xyXG5cdGlmIChzdWJzY3JpcHRpb25Gb3JtKSB7XHJcblx0XHRzdWJtaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVTdWJtaXRCdG4pO1xyXG5cdFx0bmFtZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCByZW1vdmVFcnJvcik7XHJcblx0XHRlbWFpbElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCByZW1vdmVFcnJvcik7XHJcblx0XHRuYW1lSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNvdXQnLCB2YWxpZGF0ZU5hbWUpO1xyXG5cdFx0ZW1haWxJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIHZhbGlkYXRlRW1haWwpO1xyXG5cdH1cclxufTtcclxuXHJcbi8vIGNvdW50ZG93bnNcclxuY29uc3QgbG9hZFJlbGVhc2VEYXRlID0gKCkgPT4ge1xyXG5cdGlmIChyZWxlYXNlRGF0ZUxhYmVsKSB7XHJcblx0XHRyZWxlYXNlRGF0ZUxhYmVsLnNldEF0dHJpYnV0ZSgnZGF0ZXRpbWUnLCByZWxlYXNlRGF0ZS5mb3JtYXQoJ1lZWVktTU0tREQnKSk7XHJcblx0XHRyZWxlYXNlRGF0ZUxhYmVsLmlubmVyVGV4dCA9IHJlbGVhc2VEYXRlLmZvcm1hdCgnRCBNTU0gWVlZWScpO1xyXG5cdH1cclxufTtcclxuXHJcbmNvbnN0IGhhbmRsZUNvdW50ZG93biA9ICgpID0+IHtcclxuXHRjb25zdCBub3cgPSBtb21lbnQoKTtcclxuXHRjb25zdCB0aW1lTGVmdCA9IG1vbWVudC5kdXJhdGlvbihyZWxlYXNlRGF0ZSAtIG5vdyk7XHJcblxyXG5cdGlmIChyZWxlYXNlRGF5c0xlZnQpIHJlbGVhc2VEYXlzTGVmdC5pbm5lclRleHQgPSBmb3JtYXRUaW1lKHRpbWVMZWZ0LmRheXMoKSk7XHJcblxyXG5cdGlmIChyZWxlYXNlSG91cnNMZWZ0KSByZWxlYXNlSG91cnNMZWZ0LmlubmVyVGV4dCA9IGZvcm1hdFRpbWUodGltZUxlZnQuaG91cnMoKSk7XHJcblxyXG5cdGlmIChyZWxlYXNlTWludXRlc0xlZnQpIHJlbGVhc2VNaW51dGVzTGVmdC5pbm5lclRleHQgPSBmb3JtYXRUaW1lKHRpbWVMZWZ0Lm1pbnV0ZXMoKSk7XHJcblxyXG5cdGlmIChyZWxlYXNlU2Vjb25kc0xlZnQpIHJlbGVhc2VTZWNvbmRzTGVmdC5pbm5lclRleHQgPSBmb3JtYXRUaW1lKHRpbWVMZWZ0LnNlY29uZHMoKSk7XHJcbn07XHJcblxyXG5jb25zdCBmb3JtYXRUaW1lID0gKHRpbWUpID0+IHtcclxuXHRyZXR1cm4gYCR7dGltZSA8IDEwID8gMCA6ICcnfSR7dGltZX1gO1xyXG59O1xyXG5cclxuLy8gZm9ybSB2YWxpZGF0aW9uXHJcbmNvbnN0IGhhbmRsZVN1Ym1pdEJ0biA9IChlKSA9PiB7XHJcblx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdHZhbGlkYXRlTmFtZSgpO1xyXG5cdHZhbGlkYXRlRW1haWwoKTtcclxufTtcclxuXHJcbmNvbnN0IHZhbGlkYXRlTmFtZSA9ICgpID0+IHtcclxuXHRuYW1lSW5wdXQuY2xhc3NMaXN0LnRvZ2dsZSgnZXJyb3InLCAhbmFtZUlucHV0LnZhbHVlKTtcclxufTtcclxuXHJcbmNvbnN0IHZhbGlkYXRlRW1haWwgPSAoKSA9PiB7XHJcblx0ZW1haWxJbnB1dC5jbGFzc0xpc3QudG9nZ2xlKCdlcnJvcicsICFlbWFpbElucHV0LnZhbHVlIHx8ICFlbWFpbC52YWx1ZS5tYXRjaChlbWFpbFJlZ2V4KSk7XHJcbn07XHJcblxyXG5jb25zdCByZW1vdmVFcnJvciA9IChlKSA9PiB7XHJcblx0ZS50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnZXJyb3InKTtcclxufTtcclxuXHJcbi8vIGV2ZW50IGxpc3RlbmVyc1xyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgbWFpbik7XHJcbiJdfQ==
